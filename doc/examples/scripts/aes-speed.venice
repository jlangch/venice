;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Compares AES-256 / ChaCha20 encryption/decryption speed

;;                      MacBookAir M2, Java 8 (Zulu), BouncyCastle 1.77
;; --------------------------------------------------------------------
;;                          2KB    20KB   200KB     2MB    20MB   200MB
;; --------------------------------------------------------------------
;; Encrypt AES-256 CBC:    85ms    65ms    66ms    74ms   172ms  1165ms
;; Decrypt AES-256 CBC:    67ms    67ms    65ms    76ms   162ms  1053ms
;; Encrypt AES-256 GCM:    64ms    65ms    70ms    96ms   364ms  3170ms
;; Decrypt AES-256 GCM:    66ms    65ms    67ms    94ms   363ms  3215ms
;; Encrypt AES-256 ZIP:    11ms     5ms    10ms    60ms   565ms  5681ms
;; Decrypt AES-256 ZIP:     7ms     5ms     6ms    24ms   204ms  2045ms
;; Encrypt ChaCha20:          -       -       -       -       -       -
;; Decrypt ChaCha20:          -       -       -       -       -       -
;; Encrypt ChaCha20-BC:    75ms    63ms    66ms    71ms   127ms   701ms
;; Decrypt ChaCha20-BC:    66ms    65ms    65ms    71ms   127ms   704ms
;; --------------------------------------------------------------------

;;                     MacBookAir M2, Java 17 (Zulu), BouncyCastle 1.77
;; --------------------------------------------------------------------
;;                          2KB    20KB   200KB     2MB    20MB   200MB
;; --------------------------------------------------------------------
;; Encrypt AES-256 CBC:    96ms    73ms    73ms    84ms   193ms  1337ms
;; Decrypt AES-256 CBC:    75ms    72ms    74ms    85ms   195ms  1562ms
;; Encrypt AES-256 GCM:    73ms    72ms    75ms   103ms   388ms  3593ms
;; Decrypt AES-256 GCM:    75ms    73ms    76ms   103ms   392ms  3283ms
;; Encrypt AES-256 ZIP:     7ms     5ms     9ms    60ms   600ms  5900ms
;; Decrypt AES-256 ZIP:     7ms     4ms     7ms    26ms   240ms  2311ms
;; Encrypt ChaCha20:       83ms    72ms    73ms    77ms   119ms   566ms
;; Decrypt ChaCha20:       73ms    72ms    73ms    76ms   118ms   527ms
;; Encrypt ChaCha20-BC:    74ms    73ms    73ms    87ms   160ms   949ms
;; Decrypt ChaCha20-BC:    74ms    73ms    74ms    85ms   160ms   931ms
;; --------------------------------------------------------------------



(do
  (load-module :zipvault)
  (load-module :crypt)
  (load-module :timing)


  (defonce passwd   "j87vhfrtxvzrzver445dffg")
  (defonce test-dir (io/file (io/user-home-dir) "Desktop/venice/tmp"))


  (defn identical [file1 file2]
    (= (io/slurp file1 :binary true) 
       (io/slurp file2 :binary true)))

  (defn printel [title elapsed]
    (printf "%-21s %4dms%n" title elapsed))

  (defn encrypt-aes-cbc [file-in file-out passphrase]
    (crypt/encrypt-file "AES256-CBC" file-in file-out passphrase))

  (defn decrypt-aes-cbc [file-in file-out passphrase]
    (crypt/decrypt-file "AES256-CBC" file-in file-out passphrase))

  (defn encrypt-aes-gcm [file-in file-out passphrase]
    (crypt/encrypt-file "AES256-GCM" file-in file-out passphrase))

  (defn decrypt-aes-gcm [file-in file-out passphrase]
    (crypt/decrypt-file "AES256-GCM" file-in file-out passphrase))

  (defn encrypt-cha [file-in file-out passphrase]
    (crypt/encrypt-file "ChaCha20" file-in file-out passphrase))

  (defn decrypt-cha [file-in file-out passphrase]
    (crypt/decrypt-file "ChaCha20" file-in file-out passphrase))

  (defn encrypt-cha-bc [file-in file-out passphrase]
    (crypt/encrypt-file "ChaCha20-BC" file-in file-out passphrase))

  (defn decrypt-cha-bc [file-in file-out passphrase]
    (crypt/decrypt-file "ChaCha20-BC" file-in file-out passphrase))

  (defn encrypt-zip [zip passphrase filename file ]
    (zipvault/zip zip passphrase filename (io/slurp file :binary true)))

  (defn decrypt-zip [zip passphrase filename destpath]
    (zipvault/extract-file zip passphrase filename destpath))


  (defn run [size-kb]
    (let [size               (* size-kb 1024)
          data               (bytebuf-allocate-random size)
          dir                test-dir
          data-file          (io/file dir "test.data")
          aes-cbc-file-enc   (io/file dir "test.data.aes-cbc.enc")
          aes-cbc-file-dec   (io/file dir "test.data.aes-cbc.dec")
          aes-gcm-file-enc   (io/file dir "test.data.aes-gcm.enc")
          aes-gcm-file-dec   (io/file dir "test.data.aes-gcm.dec")
          cha-file-enc       (io/file dir "test.data.cha.enc")
          cha-file-dec       (io/file dir "test.data.cha.dec")
          cha-bc-file-enc    (io/file dir "test.data.cha-bc.enc")
          cha-bc-file-dec    (io/file dir "test.data.cha-bc.dec")
          aes-file-zip       (io/file dir "test.data.zip")
          aes-file-unzip     (io/file dir "test.data.unzip")]
      (when-not (io/exists-dir? dir)
        (throw (ex :VncException (str "The dir " dir " does not exist!)"))))

      (println "Testing file:" data-file (str size-kb "KB"))
      (println "        size:" size)

      ;; create the test data file (a buffer with random bytes)
      (io/spit data-file data)
      (io/slurp data-file :binary true) ;; warm up os file read
      (println "            : created")
      (println)

      (let [t (timing/elapsed #(encrypt-aes-cbc data-file
                                                aes-cbc-file-enc
                                                passwd))]
        (printel "Encrypt AES CBC:" t))
 

      (let [t (timing/elapsed #(decrypt-aes-cbc aes-cbc-file-enc
                                                aes-cbc-file-dec
                                                passwd))]
        (printel "Decrypt AES CBC:" t))

      (let [t (timing/elapsed #(encrypt-aes-gcm data-file
                                                aes-gcm-file-enc
                                                passwd))]
        (printel "Encrypt AES GCM:" t))

      (let [t (timing/elapsed #(decrypt-aes-gcm aes-gcm-file-enc
                                                aes-gcm-file-dec
                                                 passwd))]
        (printel "Decrypt AES GCM:" t))

      (when (crypt/encrypt-file-supported? "ChaCha20")
        (let [t (timing/elapsed #(encrypt-cha data-file
                                              cha-file-enc
                                              passwd))]
          (printel "Encrypt ChaCha20:" t))

        (let [t (timing/elapsed #(decrypt-cha cha-file-enc
                                              cha-file-dec
                                              passwd))]
          (printel "Decrypt ChaCha20:" t)))

      (when (crypt/encrypt-file-supported? "ChaCha20-BC")
        (let [t (timing/elapsed #(encrypt-cha-bc data-file
                                                 cha-bc-file-enc
                                                 passwd))]
          (printel "Encrypt ChaCha20-BC:" t))

        (let [t (timing/elapsed #(decrypt-cha-bc cha-bc-file-enc
                                                 cha-bc-file-dec
                                                 passwd))]
          (printel "Decrypt ChaCha20-BC:" t)))
       
      (let [t (timing/elapsed #(encrypt-zip aes-file-zip
                                            passwd
                                            (io/file-name aes-file-unzip)
                                            data-file))]
        (printel "Encrypt AES ZIP:" t))

      (let [t (timing/elapsed #(decrypt-zip aes-file-zip
                                            passwd
                                            (io/file-name aes-file-unzip)
                                            (io/file-parent aes-file-unzip)))]
        (printel "Decrypt AES ZIP:" t))
                                     
      (println)            
      (println "Decrypt verify AES CBC:     " 
               (if (identical data-file aes-cbc-file-dec) "OK" "FAIL"))
      (println "Decrypt verify AES GCM:     " 
               (if (identical data-file aes-gcm-file-dec) "OK" "FAIL"))
      (when (crypt/encrypt-file-supported? "ChaCha20")
        (println "Decrypt verify ChaCha20:    " 
                (if (identical data-file cha-file-dec) "OK" "FAIL")))
      (when (crypt/encrypt-file-supported? "ChaCha20-BC")
        (println "Decrypt verify ChaCha20-BC: " 
                (if (identical data-file cha-bc-file-dec) "OK" "FAIL")))
      (println "Decrypt verify ZIP:         " 
               (if (identical data-file aes-file-unzip) "OK" "FAIL"))))

  (defn run-sample []
    (docoll #(do (run %) (println) (println)) 
            [2 20 200 2000 20000 200000])))
