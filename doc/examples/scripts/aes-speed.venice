;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Compares AES-256 / ChaCha20 encryption/decryption speed

;;                      MacBookAir M2, Java 8 (Zulu), BouncyCastle 1.77
;; --------------------------------------------------------------------
;;                          2KB    20KB   200KB     2MB    20MB   200MB
;; --------------------------------------------------------------------
;; Encrypt AES-256 CBC:    85ms    65ms    66ms    74ms   172ms  1165ms
;; Decrypt AES-256 CBC:    67ms    67ms    65ms    76ms   162ms  1053ms
;; Encrypt AES-256 GCM:    64ms    65ms    70ms    96ms   364ms  3170ms
;; Decrypt AES-256 GCM:    66ms    65ms    67ms    94ms   363ms  3215ms
;; Encrypt AES-256 ZIP:    11ms     5ms    10ms    60ms   565ms  5681ms
;; Decrypt AES-256 ZIP:     7ms     5ms     6ms    24ms   204ms  2045ms
;; Encrypt ChaCha20:          -       -       -       -       -       -
;; Decrypt ChaCha20:          -       -       -       -       -       -
;; Encrypt ChaCha20-BC:    75ms    63ms    66ms    71ms   127ms   701ms
;; Decrypt ChaCha20-BC:    66ms    65ms    65ms    71ms   127ms   704ms
;; --------------------------------------------------------------------

;;                     MacBookAir M2, Java 17 (Zulu), BouncyCastle 1.77
;; --------------------------------------------------------------------
;;                          2KB    20KB   200KB     2MB    20MB   200MB
;; --------------------------------------------------------------------
;; Encrypt AES-256 CBC:    96ms    73ms    73ms    84ms   193ms  1337ms
;; Decrypt AES-256 CBC:    75ms    72ms    74ms    85ms   195ms  1562ms
;; Encrypt AES-256 GCM:    73ms    72ms    75ms   103ms   388ms  3593ms
;; Decrypt AES-256 GCM:    75ms    73ms    76ms   103ms   392ms  3283ms
;; Encrypt AES-256 ZIP:     7ms     5ms     9ms    60ms   600ms  5900ms
;; Decrypt AES-256 ZIP:     7ms     4ms     7ms    26ms   240ms  2311ms
;; Encrypt ChaCha20:       83ms    72ms    73ms    77ms   119ms   566ms
;; Decrypt ChaCha20:       73ms    72ms    73ms    76ms   118ms   527ms
;; Encrypt ChaCha20-BC:    74ms    73ms    73ms    87ms   160ms   949ms
;; Decrypt ChaCha20-BC:    74ms    73ms    74ms    85ms   160ms   931ms
;; --------------------------------------------------------------------

(do
  (load-module :zipvault)
  (load-module :crypt)
  (load-module :timing ['timing :as 't])
  (load-module :matrix)
  (load-module :ascii-table)


  (defonce passwd   "j87vhfrtxvzrzver445dffg")
  (defonce test-dir (io/file (io/user-home-dir) "Desktop/venice/tmp"))

  (defn format-size [size-kb] 
    (if (< size-kb 1000) (str size-kb "KB") (str (/ size-kb 1000) "MB")))

  (defn identical [file1 file2]
    (= (io/slurp file1 :binary true) (io/slurp file2 :binary true)))

  (defn encrypt-zip [zip passphrase filename file ]
    (zipvault/zip zip passphrase filename (io/slurp file :binary true)))

  (defn decrypt-zip [zip passphrase filename destpath]
    (zipvault/extract-file zip passphrase filename destpath))


  (defn sample [size-kb]
    (let [size               (* size-kb 1024)
          data               (bytebuf-allocate-random size)
          data-file          (io/file test-dir "test.data")
          aes-cbc-file-enc   (io/file test-dir "test.data.aes-cbc.enc")
          aes-cbc-file-dec   (io/file test-dir "test.data.aes-cbc.dec")
          aes-gcm-file-enc   (io/file test-dir "test.data.aes-gcm.enc")
          aes-gcm-file-dec   (io/file test-dir "test.data.aes-gcm.dec")
          cha-file-enc       (io/file test-dir "test.data.cha.enc")
          cha-file-dec       (io/file test-dir "test.data.cha.dec")
          cha-bc-file-enc    (io/file test-dir "test.data.cha-bc.enc")
          cha-bc-file-dec    (io/file test-dir "test.data.cha-bc.dec")
          aes-file-zip       (io/file test-dir "test.data.zip")
          aes-file-unzip     (io/file test-dir "test.data.unzip")
          
          secret             "secret"
          encryptor-aes-cbc   (crypt/encryptor-aes-256-cbc secret)
          encryptor-aes-gcm   (crypt/encryptor-aes-256-gcm secret)
          encryptor-chacha    (if (crypt/encryptor-chacha20-supported?) 
                                (crypt/encryptor-chacha20 secret)
                                nil)
          encryptor-chacha-bc (if (crypt/encryptor-chacha20-bouncycastle-supported?) 
                                (crypt/encryptor-chacha20-bouncycastle secret)
                                nil)]

      (println "Testing file:" data-file (str size-kb "KB"))

      ;; create the test data file (a buffer with random bytes)
      (io/spit data-file data)
      (io/slurp data-file :binary true) ;; warm up os file read

      (let [timings [ [ (t/elapsed #(encryptor-aes-cbc    :encrypt 
                                                          data-file 
                                                          aes-cbc-file-enc
                                                          true))
                        (t/elapsed #(encryptor-aes-cbc    :decrypt  
                                                          aes-cbc-file-enc 
                                                          aes-cbc-file-dec
                                                          true))]
                      [ (t/elapsed #(encryptor-aes-gcm    :encrypt  
                                                          data-file 
                                                          aes-gcm-file-enc
                                                          true))
                        (t/elapsed #(encryptor-aes-gcm    :decrypt  
                                                          aes-gcm-file-enc 
                                                          aes-gcm-file-dec
                                                          true))]
                      (if encryptor-chacha
                        [ (t/elapsed #(encryptor-chacha  :encrypt
                                                         data-file 
                                                         cha-file-enc
                                                         true))
                          (t/elapsed #(encryptor-chacha  :decrypt
                                                         cha-file-enc 
                                                         cha-file-dec
                                                         true))]
                        ["-" "-"])
                      (if encryptor-chacha-bc
                        [ (t/elapsed #(encryptor-chacha-bc  :encrypt
                                                            data-file 
                                                            cha-bc-file-enc
                                                            true))
                          (t/elapsed #(encryptor-chacha-bc  :decrypt
                                                            cha-bc-file-enc 
                                                            cha-bc-file-dec
                                                            true))]
                        ["-" "-"])                       
                      (t/elapsed #(encrypt-zip aes-file-zip 
                                                passwd 
                                                (io/file-name aes-file-unzip) 
                                                data-file))
                      (t/elapsed #(decrypt-zip aes-file-zip 
                                                passwd 
                                                (io/file-name aes-file-unzip) 
                                                (io/file-parent aes-file-unzip)))
                    ]]

        (println "Decrypt verify AES CBC:       " 
                 (if (identical data-file aes-cbc-file-dec) "OK" "FAIL"))
        (println "Decrypt verify AES GCM:       " 
                 (if (identical data-file aes-gcm-file-dec) "OK" "FAIL"))
        (when encryptor-chacha
          (println "Decrypt verify ChaCha20:      " 
                   (if (identical data-file cha-file-dec) "OK" "FAIL")))
        (when encryptor-chacha-bc
          (println "Decrypt verify ChaCha20-BC:   " 
                   (if (identical data-file cha-bc-file-dec) "OK" "FAIL")))
        (println "Decrypt verify ZIP:           " 
                 (if (identical data-file aes-file-unzip) "OK" "FAIL"))

        (flatten timings))))

  (defn sections []
    [ "AES-256 CBC  encrypt"
      "AES-256 CBC  decrypt"
      "AES-256 GCM  encrypt "
      "AES-256 GCM  decrypt"
      "ChaCha20     encrypt " 
      "ChaCha20     decrypt" 
      "ChaCha20-BC  encrypt " 
      "ChaCha20-BC  decrypt"
      "AES-256 ZIP  encrypt "
      "AES-256 ZIP  decrypt"] )

  (defn run []
    (when-not (io/exists-dir? test-dir)
      (throw (ex :VncException (str "The dir " test-dir " does not exist!)"))))

    (println "Test dir:" test-dir)
    (println)

    (let [samples  [2 20 200 (* 2 1024) (* 20 1024) (* 200 1024)]
          sections (sections)
          columns  (cons {:header {:text "" } :width 20}
                         (map #(hash-map :header {:text (format-size %)
                                                  :align :right}
                                         :body   {:align :right}
                                         :width  6)
                              samples))]
      (as-> (map #(sample %) samples) data
            (matrix/vector2d data)
            (matrix/transpose data)
            (matrix/add-column-at-start data sections)
            (ascii-table/print columns data :bold-no-data 1)))))
