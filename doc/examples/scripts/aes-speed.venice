;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Compares AES-256 encryption/decryption speed

(do
  (load-module :zipvault)
  (load-module :crypt)
  (load-module :timing)


  (defonce passwd   "j87vhfrtxvzrzver445dffg")


  (defn identical [file1 file2]
    (= (io/slurp file1 :binary true) 
       (io/slurp file2 :binary true)))

 
  (defn filesize [file]
     (str (long (/ (io/file-size file) 1024 1024)) " MB"))

  (defn encrypt-aes [file-in file-out passphrase]
    (let [encryptor (crypt/encrypt "AES256" passphrase)]
      (->> (io/slurp file-in :binary true)
           (encryptor)
           (io/spit file-out))))

  (defn decrypt-aes [file-in file-out passphrase]
    (let [decryptor (crypt/decrypt "AES256" passphrase)]
      (->> (io/slurp file-in :binary true)
           (decryptor)
           (io/spit file-out))))

  (defn encrypt-aes-gcm [file-in file-out passphrase]
    (crypt/encrypt-file file-in file-out passphrase))

  (defn decrypt-aes-gcm [file-in file-out passphrase]
    (crypt/decrypt-file file-in file-out passphrase))

  (defn encrypt-zip [zip passphrase filename file ]
    (zipvault/zip zip passphrase filename (io/slurp file :binary true)))

  (defn decrypt-zip [zip passphrase filename destpath]
    (zipvault/extract-file zip passphrase filename destpath))


  (defn run [size-kb] 
    (let [size               (* size-kb 1024)
          dir                (io/file "/Users/juerg/Desktop/aes-test")
          data-file          (io/file dir "test.data")
          aes-file-cbc-enc   (io/file dir "test.data.aes-cbc.enc")
          aes-file-cbc-dec   (io/file dir "test.data.aes-cbc.dec")
          aes-file-gcm-enc   (io/file dir "test.data.aes-gcm.enc")
          aes-file-gcm-dec   (io/file dir "test.data.aes-gcm.dec")
          aes-file-zip       (io/file dir "test.data.zip")
          aes-file-unzip     (io/file dir "test.data.unzip")]
      (println "Testing file:" data-file (str size-kb "KB"))
      (println "        size:" size)

      ;; create the test data file (a buffer with random bytes)
      (io/spit data-file (bytebuf-allocate-random size))
      (println "            : created")

      (println)
      (println "Encrypt AES CBC")
      (timing/run (fn [] (encrypt-aes data-file aes-file-cbc-enc passwd)))

      (println)     
      (println "Decrypt AES CBC")
      (timing/run (fn [] (decrypt-aes aes-file-cbc-enc aes-file-cbc-dec passwd)))

      (println)
      (println "Encrypt AES GCM")
      (timing/run (fn [] (encrypt-aes data-file aes-file-gcm-enc passwd)))

      (println)     
      (println "Decrypt AES GCM")
      (timing/run (fn [] (decrypt-aes aes-file-gcm-enc aes-file-gcm-dec passwd)))
     
      (println)            
      (println "Encrypt ZIP")
      (timing/run (fn [] (encrypt-zip aes-file-zip 
                                      passwd
                                      (io/file-name aes-file-unzip) 
                                      data-file)))

      (println)            
      (println "Decrypt ZIP")
      (timing/run (fn [] (decrypt-zip aes-file-zip 
                                      passwd
                                      (io/file-name aes-file-unzip)
                                      (io/file-parent aes-file-unzip))))
                                      
      (println)            
      (println "Decrypt verify AES CBC: " 
               (if (identical data-file aes-file-cbc-dec) "OK" "FAIL"))
      (println "Decrypt verify AES GCM: " 
               (if (identical data-file aes-file-gcm-dec) "OK" "FAIL"))
      (println "Decrypt verify ZIP:     " 
               (if (identical data-file aes-file-unzip) "OK" "FAIL")))))
