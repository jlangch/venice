;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

(do
  (load-module :tomcat-util ['tomcat-util :as 'tc-util])
  (load-module :geoip)
  (load-module :kira)


  ;; The MaxMind country database.
  (def maxmind-country-zip "resources/geoip-country.zip")

  (def private-ip4-addresses [ "10.0.0.0/8"
                               "172.16.0.0/12"
                               "192.168.0.0/16" ])

  (def private-ip4-trie (let [trie (cidr/trie)]
                          (docoll #(cidr/insert trie (cidr/parse %) "")
                                  private-ip4-addresses)
                          trie))

  (def resolver (delay (create-resolver)))

  (def svg-map-tpl
    """
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <title>STEP Access World Map <%= (kira/escape-xml year) %></title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
        <link href="https://cdn.jsdelivr.net/gh/StephanWagner/svgMap@v2.7.2/dist/svgMap.min.css" rel="stylesheet">
        <script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js"></script>
        <script src="https://cdn.jsdelivr.net/gh/StephanWagner/svgMap@v2.7.2/dist/svgMap.min.js"></script>
        <style>
          body { font-family: Arial, Helvetica, sans-serif; color: #0a3aac; text-align: center; }
        </style>
        <!-- see: https://github.com/StephanWagner/svgMap -->
      </head>

      <body>
        <h1>STEP Access World Map <%= (kira/escape-xml year) %></h1>
        <div id="svgMap"></div>
        <script>
          $('document').ready(function () {
            new svgMap({
                  targetElementID: 'svgMap',
                  data: {
                    data: {
                      step: {
                        name: 'HTTP Access',
                        format: '{0}',
                        thousandSeparator: '\\'',
                        thresholdMax: 10000,
                        thresholdMin: 10
                      }
                    },
                    applyData: 'step',
                    values: { <%= country-data %> }
                  }
                });
          });
        </script>
      </body>
    </html>
    """
    )

  (defn create-resolver[]
    ; this may take some time
    (println "Loading Google country DB ...")
    (let [country-db (geoip/download-google-country-db)]
      (println "Parsing MaxMind DB ...")
      (geoip/ip-to-country-loc-resolver maxmind-country-zip country-db)))

  (defn public-ip? [ip]
    (nil? (cidr/lookup-reverse private-ip4-trie ip)))

  (defn merge-freq-maps [freq-maps]
    (apply (partial merge-with +) freq-maps))

  (defn merge-ip-locations-by-country [ip-locations]
    ;; ip-locations: list of map with keys :loc :ip :freq :country :country-iso
    ;; group by :country-iso and sum up :freq
    (->> (vals (group-by :country-iso ip-locations))
         (map #(let [sum (apply + (map :freq %))
                     location (dissoc (first %) :ip)]
                 (assoc location :freq sum)))))

  (defn parse-ip-logs [log]
    (let [parser (tc-util/simple-ipaddr-access-log-entry-parser)
          data   (bytebuf-to-string log :utf-8)]
      (->> (str/split-lines data)
           (transduce (comp (map parser)
                            (map :ip)
                            (filter public-ip?))
                      conj)
           (frequencies))))

  (defn parse-log-file [log-file]
    (println "Parsing" log-file "...")
    (if (io/file-ext? log-file "zip")
      (->> (io/unzip-all log-file)
           (vals)
           (map #(parse-ip-logs %)))
      (->> (io/slurp log-file :binary true)
           (parse-ip-logs ))))

  (defn parse-log-files [log-files]
    ;; returns an aggregated map with IP frequencies:
    ;;    { "196.52.43.56" 3 "178.197.226.244" 8 }
    (merge-freq-maps (flatten (map parse-log-file log-files))))

  (defn map-ip-to-location [ip-freq ip-loc-resolver]
    (let [ip   (key ip-freq)
          data (ip-loc-resolver ip)]
      { :loc         (geoip/map-location-to-numerics (:loc data))
        :ip          ip
        :freq        (val ip-freq)
        :country     (:country-name data)
        :country-iso (:country-iso data) } ))

  (defn map-data-by-country [ip-freq-map ip-loc-resolver]
    (printf "Mapping %d IP addresses ...%n" (count ip-freq-map))
    (->> (entries ip-freq-map)
         (map #(map-ip-to-location % ip-loc-resolver)) ;; this is very slow
         (merge-ip-locations-by-country)
         (map #(let [[lat lon] (:loc %)
                     country   (:country-iso %)
                     frequency (:freq %)]
                 [country frequency]))))

  (defn svg-country-data [country-iso count]
    (if (= country-iso "CH")
      (str/format "%s: { step: %d, color: '#2E9444' }" country-iso count)
      (str/format "%s: { step: %d }" country-iso count)))

  (defn create-svg-map [ip-freq-map ip-loc-resolver out-file]
    (let [data (->> (map-data-by-country ip-freq-map ip-loc-resolver)
                    (map #(svg-country-data (first %) (second %)))
                    (str/join ", "))
          svg  (kira/eval svg-map-tpl { :country-data data, :year 2022 })]
      (io/spit out-file svg)))

  (defn process [out-file log-files]
     (println "Processing log files...")
     (-<> (map io/file log-files)
          (parse-log-files <>)
          (create-svg-map <> @resolver out-file)))

  (defn download-maxmind-db [lic-key]
    (->> (geoip/download-maxmind-db :country lic-key)
         (io/spit (io/file maxmind-country-zip))))

  (defn lookup-ip [ip] (@resolver ip))

  (defn run [out-file & log-files]
    (process out-file log-files))

  (println """
           Actions:
              [1] (lookup-ip "41.216.186.131")
              [2] (download-maxmind-db "YOUR-MAXMIND-KEY")
              [3] (run "./ip-map.html"
                       "resources/step-logs/localhost_access_log.2022-12.zip")
              [4] (run "./ip-map.html"
                       "resources/step-logs/localhost_access_log.2022-12-01.log")
              [5] (apply run "./ip-map.html"
                             (io/list-files-glob "resources/step-logs/"
                                                 "localhost_access_log.2022-*"))
           """)

  (when-not (macroexpand-on-load?)
    (println)
    (print-warn-box """
                    macroexpand-on-load is not activated. To get a better \
                    performance activate it before loading this script.

                    From the REPL run the command: !macroexpand
                    """))

  (when-not (io/exists-file? maxmind-country-zip)
    (println)
    (print-error-box """
                     The MaxMind country file does not exist!

                     ~{maxmind-country-zip}
                     """))

)
