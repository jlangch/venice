;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

(do
  (load-module :tomcat-util ['tomcat-util :as 'tc-util])
  (load-module :mercator)
  (load-module :geoip)


  ;; The MaxMind country database.
  (def maxmind-country-zip "resources/geoip-country.zip")

  (def private-ip4-addresses [ "10.0.0.0/8"
                               "172.16.0.0/12"
                               "192.168.0.0/16" ])

  (def private-ip4-trie (let [trie (cidr/trie)]
                          (docoll #(cidr/insert trie (cidr/parse %) "")
                                  private-ip4-addresses)
                          trie))

  (def resolver (delay (create-resolver)))

  (defn create-resolver[]
    ; this may take some time
    (println "Loading Google country DB ...")
    (let [country-db (geoip/download-google-country-db)]
      (println "Parsing MaxMind DB ...")
      (geoip/ip-to-country-loc-resolver maxmind-country-zip country-db)))

  (defn public-ip? [ip]
    (nil? (cidr/lookup-reverse private-ip4-trie ip)))

  (defn format-label [country-iso freq]
    (cond
      (> freq 1000000) (str/format "%s %.1fm" country-iso (/ freq 1000000.0))
      (> freq 1000)    (str/format "%s %.1fk" country-iso (/ freq 1000.0))
      :else            (str/format "%s %d" country-iso freq)))

  (defn merge-freq-maps [freq-maps]
    (apply (partial merge-with +) freq-maps))

  (defn merge-ip-locations-by-country [ip-locations]
    ;; ip-locations: list of map with keys :loc :ip :freq :country :country-iso
    ;; group by :country-iso and sum up :freq
    (->> (vals (group-by :country-iso ip-locations))
         (map #(let [sum (apply + (map :freq %))
                     location (dissoc (first %) :ip)]
                 (assoc location :freq sum)))))

  (defn get-mercator-img [mercator-img]
    (if (some? mercator-img)
      mercator-img
      (do
        (println "Downloading Mercator image...")
        (mercator/load-mercator-image))))

  (defn draw [styles mercator-img format file locations]
    (println "Drawing Mercator map ...")
    (-> (get-mercator-img mercator-img)
        (mercator/draw-locations locations styles)
        (mercator/crop-image 400 600)
        (mercator/save-image format file)))

  (defn parse-ip-logs [log]
    (let [parser (tc-util/simple-ipaddr-access-log-entry-parser)
          data   (bytebuf-to-string log :utf-8)]
      (->> (str/split-lines data)
           (transduce (comp (map parser)
                            (map :ip)
                            (filter public-ip?))
                      conj)
           (frequencies))))

  (defn parse-log-file [log-file]
    (println "Parsing" log-file "...")
    (if (io/file-ext? log-file "zip")
      (->> (io/unzip-all log-file)
           (vals)
           (map #(parse-ip-logs %)))
      (->> (io/slurp log-file :binary true)
           (parse-ip-logs ))))

  (defn parse-log-files [log-files]
    ;; returns an aggregated map with IP frequencies:
    ;;    { "196.52.43.56" 3 "178.197.226.244" 8 }
    (merge-freq-maps (flatten (map parse-log-file log-files))))

  (defn map-ip-to-location [ip-freq ip-loc-resolver]
    (let [ip   (key ip-freq)
          data (ip-loc-resolver ip)]
      { :loc         (geoip/map-location-to-numerics (:loc data))
        :ip          ip
        :freq        (val ip-freq)
        :country     (:country-name data)
        :country-iso (:country-iso data) } ))

  (defn create-map [styles mercator-img ip-freq-map ip-loc-resolver out-file]
    (printf "Mapping %d IP addresses ...%n" (count ip-freq-map))
    (->> (entries ip-freq-map)
         (map #(map-ip-to-location % ip-loc-resolver)) ;; this is very slow
         (merge-ip-locations-by-country)
         (map #(let [[lat lon] (:loc %)
                     country   (:country-iso %)
                     frequency (:freq %)
                     label     (format-label country frequency)]
                 [lat lon {:label label :font-size-px 14}]))
         (draw styles mercator-img :png out-file)))

  (defn process [styles mercator-img out-file log-files]
     (println "Processing log files...")
     (-<> (map io/file log-files)
          (parse-log-files <>)
          (create-map styles mercator-img <> @resolver out-file)))

  (defn load-image [file]
    (println "Loading Mercator image...")
    (mercator/load-image file))

  (defn download-maxmind-db [lic-key]
    (->> (geoip/download-maxmind-db :country lic-key)
         (io/spit (io/file maxmind-country-zip))))

  (defn lookup-ip [ip] (@resolver ip))

  (defn run-custom [styles mercator-img out-file & log-files]
    (process styles mercator-img out-file log-files))

  (defn run [out-file & log-files]
    (process nil nil out-file log-files))

  (println """
           Actions:
              [1] (lookup-ip "41.216.186.131")
              [2] (download-maxmind-db "YOUR-MAXMIND-KEY")
              [3] (run "./ip-map.png"
                       "resources/localhost_access_log.2019-12.zip")
              [4] (run "./ip-map.png"
                       "resources/localhost_access_log.2019-12-01.log")
              [5] (apply run "./ip-map.png"
                             (io/list-files-glob "resources"
                                                 "localhost_access_log.2020-*"))
           """)

  (when-not (macroexpand-on-load?)
    (println)
    (print-warn-box """
                    macroexpand-on-load is not activated. To get a better \
                    performance activate it before loading this script.

                    From the REPL run the command: !macroexpand
                    """))

  (when-not (io/exists-file? maxmind-country-zip)
    (println)
    (print-error-box """
                     The MaxMind country file does not exist!

                     ~{maxmind-country-zip}
                     """))
)
