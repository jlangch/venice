;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

(do
  (load-module :tomcat-util ['tomcat-util :as 'tc-util])
  (load-module :geoip)
  (load-module :kira)


  ;; The MaxMind country database.
  (def maxmind-country-zip "resources/geoip-country.zip")

  (def private-ip4-addresses [ "10.0.0.0/8"
                               "172.16.0.0/12"
                               "192.168.0.0/16" ])

  (def private-ip4-trie (let [trie (cidr/trie)]
                          (docoll #(cidr/insert trie (cidr/parse %) "")
                                  private-ip4-addresses)
                          trie))

  (def resolver (delay (create-resolver)))

  (def svg-map-tpl
    """
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <title>WebApp Access World Map <%= (kira/escape-xml year) %></title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
        <link href="https://cdn.jsdelivr.net/gh/StephanWagner/svgMap@v2.7.2/dist/svgMap.min.css" rel="stylesheet">
        <script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js"></script>
        <script src="https://cdn.jsdelivr.net/gh/StephanWagner/svgMap@v2.7.2/dist/svgMap.min.js"></script>
        <style>
          body { font-family: Arial, Helvetica, sans-serif; color: #0a3aac; text-align: center; }
        </style>
        <!-- see: https://github.com/StephanWagner/svgMap -->
      </head>

      <body>
        <h1>WebApp Access World Map <%= (kira/escape-xml year) %></h1>
        <div id="svgMap"></div>
        <script>
          $('document').ready(function () {
            new svgMap({
                  targetElementID: 'svgMap',
                  data: {
                    data: {
                      total: {
                        name: 'HTTP Access',
                        format: '{0}',
                        thousandSeparator: '\\'',
                        thresholdMax: 10000,
                        thresholdMin: 10
                      },
                      _1xx: {
                        name: '1xx',
                        format: '{0}',
                        thousandSeparator: '\\''
                      },
                      _2xx: {
                        name: '2xx',
                        format: '{0}',
                        thousandSeparator: '\\''
                      },
                      _3xx: {
                        name: '3xx',
                        format: '{0}',
                        thousandSeparator: '\\''
                      },
                      _4xx: {
                        name: '4xx',
                        format: '{0}',
                        thousandSeparator: '\\''
                      },
                      _5xx: {
                        name: '5xx',
                        format: '{0}',
                        thousandSeparator: '\\''
                      },
                      webapp: {
                        name: 'WebApp',
                        format: '{0}',
                        thousandSeparator: '\\''
                      },
                      vpn: {
                        name: 'VPN',
                        format: '{0}',
                        thousandSeparator: '\\''
                      }
                    },
                    applyData: 'total',
                    values: { <%= countries %> }
                  }
                });
          });
        </script>
      </body>
    </html>
    """
    )

  (defn create-resolver[]
    ; this may take some time
    (println "Loading Google country DB ...")
    (let [country-db (geoip/download-google-country-db)]
      (println "Parsing MaxMind DB ...")
      (geoip/ip-to-country-loc-resolver maxmind-country-zip country-db)))

  (defn public-ip? [ip]
    (nil? (cidr/lookup-reverse private-ip4-trie ip)))

  (defn webapp-req? [url]
    (str/contains? url "/add-webapp-name/"))

  (defn freq-map [ip status public webapp-req]
    { :ip     ip
      :1xx    (if (<= 100 status 199) 1 0)
      :2xx    (if (<= 200 status 299) 1 0)
      :3xx    (if (<= 300 status 399) 1 0)
      :4xx    (if (<= 400 status 499) 1 0)
      :5xx    (if (<= 500 status 599) 1 0)
      :webapp (if webapp-req 1 0)
      :public public
      :tot    1 })

  (defn freq-aggregate [f1 f2]
    { :ip           (:ip f2)
      :1xx          (+ (:1xx f1 0) (:1xx f2 0))
      :2xx          (+ (:2xx f1 0) (:2xx f2 0))
      :3xx          (+ (:3xx f1 0) (:3xx f2 0))
      :4xx          (+ (:4xx f1 0) (:4xx f2 0))
      :5xx          (+ (:5xx f1 0) (:5xx f2 0))
      :tot          (+ (:tot f1 0) (:tot f2 0))
      :webapp       (+ (:webapp f1 0) (:webapp f2 0))
      :webapp       (:public f2)
      :country      (:country f2)
      :country-iso  (:country-iso f2)})

  (defn frequencies-ip [items]
    (reduce (fn [acc i]
              (let [ip (:ip i)]
                (assoc acc ip (freq-aggregate (get acc ip {}) i))))
            {}
            items))

  (defn frequencies-country [items]
    (reduce (fn [acc i]
              (let [country (:country-iso i)]
                (assoc acc country (freq-aggregate (get acc country {}) i))))
            {}
            items))

  (defn parse-ip-logs [log]
    (let [parser (tc-util/default-access-log-entry-parser)
          data   (bytebuf-to-string log :utf-8)]
      (->> (str/split-lines data)
           (map parser)
           (map #(freq-map (:ip %)
                           (or (:status %) 0)
                           (public-ip? (:ip %))
                           (webapp-req? (:url %))))
           (frequencies-ip)
           (vals))))

  (defn parse-log-file [log-file]
    (println "Parsing" log-file "...")
    (if (io/file-ext? log-file "zip")
      (->> (io/unzip-all log-file)
           (vals)
           (map #(parse-ip-logs %)))
      (->> (io/slurp log-file :binary true)
           (parse-ip-logs))))

  (defn parse-log-files [log-files]
    (->> (map parse-log-file log-files)
         (flatten)))

  (defn map-ip-to-location [item ip-loc-resolver]
    (if (:public item)
      (let [data (ip-loc-resolver (:ip item))]
        (merge (dissoc item :ip)
               { :country     (:country-name data)
                 :country-iso (:country-iso data) }))
      (merge (dissoc item :ip)
             { :country     "VPN"
               :country-iso "VPN" } )))

  (defn svg-country-data [item]
    (let [country (:country-iso item)
          s       (str/format "total: %d, _1xx: %d, _2xx: %d, _3xx: %d, _4xx: %d, _5xx: %d, webapp: %d"
                              (:tot item) (:1xx item) (:2xx item)
                              (:3xx item) (:4xx item) (:5xx item)
                              (:webapp item))]
      (if (= country "CH")
        (str/format "%s: { %s, vpn: %d, color: '#2E9444' }" country s (:vpn item 0))
        (str/format "%s: { %s, vpn: 0 }" country s))))

  (defn svg-countries-data [items year]
    { :countries (str/join ", " (map svg-country-data items))
      :year      year })

  (defn create-html-svg-map [items]
    (let [year   2022
          ch     (first (filter #(= (:country-iso %) "CH" ) items))
          vpn    (first (filter #(= (:country-iso %) "VPN") items))
          others (filter #(nil? ((set "CH" "VPN") (:country-iso %))) items)]
      (cond
        (and (nil? ch) (nil? vpn))
          (kira/eval svg-map-tpl (svg-countries-data others year))

        (and (some? ch) (some? vpn))
          (let [ch+ (assoc (freq-aggregate vpn ch) :vpn (:tot vpn 0))]
            (kira/eval svg-map-tpl (svg-countries-data (conj others ch+) year)))

        (some? ch)
          (kira/eval svg-map-tpl (svg-countries-data (conj others ch) year))

        (some? vpn)
          (let [ch+ (assoc vpn :country-iso "CH")]
            (kira/eval svg-map-tpl (svg-countries-data (conj others ch+) year)))

        :else
          (kira/eval svg-map-tpl (svg-countries-data [] year)))))

  (defn process [out-file log-files]
     (println "Processing log files...")
     (->> (map io/file log-files)
          (parse-log-files)                        ;; parse log files -> entries
          (frequencies-ip)                         ;; aggregate by IP address
          (vals)
          (map #(map-ip-to-location % @resolver))  ;; map IP to country
          (frequencies-country)                    ;; aggregate by country
          (vals)
          (create-html-svg-map)                    ;; HTML with SVG map
          (io/spit out-file)))

  (defn download-maxmind-db [lic-key]
    (->> (geoip/download-maxmind-db :country lic-key)
         (io/spit (io/file maxmind-country-zip))))

  (defn lookup-ip [ip] (@resolver ip))

  (defn run [out-file & log-files]
    (process out-file log-files))

  (println """
           Actions:
              [1] (lookup-ip "41.216.186.131")
              [2] (download-maxmind-db "YOUR-MAXMIND-KEY")
              [3] (run "./ip-map.html"
                       "resources/logs/localhost_access_log.2022-12.zip")
              [4] (run "./ip-map.html"
                       "resources/logs/localhost_access_log.2022-12-01.log")
              [5] (apply run "./ip-map.html"
                             (io/list-files-glob "resources/logs/"
                                                 "localhost_access_log.2022-*"))
           """)

  (when-not (macroexpand-on-load?)
    (println)
    (print-warn-box """
                    macroexpand-on-load is not activated. To get a better \
                    performance activate it before loading this script.

                    From the REPL run the command: !macroexpand
                    """))

  (when-not (io/exists-file? maxmind-country-zip)
    (println)
    (print-error-box """
                     The MaxMind country file does not exist!

                     ~{maxmind-country-zip}
                     """))

)
