;; -----------------------------------------------------------------------------
;; Demo Web application with login/logout
;; -----------------------------------------------------------------------------
;;
;; GUI state diagram
;;
;;                     [init]
;;                        |
;;                        |   +--------------------+
;;                        v   v                    |
;;                +---------------+  LOGIN_FAILED  |
;;                | not-logged-in |--------------->+
;;                +---------------+                |
;;                        | LOGIN_OK               |
;;                        v                        |
;;                +---------------+  LOGGED_OUT    |
;;                |   logged-in   |--------------->+
;;                +---------------+                |
;;                        | CHECKOUT_SELECTED      |
;;                        v                        |
;;                +---------------+  LOGGED_OUT    |
;;                | checking-out  |--------------->+
;;                +---------------+
;;
;; State transitions:
;;
;; -----------------+-----------------------------------+-----------------------
;; Event             Transitions                         Action
;; -----------------+-----------------------------------+-----------------------
;; NAVIGATED_TO_APP  [init] -> [not-logged-in]           display login screen
;; LOGIN_FAILED      [not-logged-in] -> [not-logged-in]  display login screen
;; LOGIN_OK          [not-logged-in] -> [logged-in]      display main screen
;; CHECKOUT_SELECTED [logged-in] -> [checking-out]       display checkout screen
;; LOGGED_OUT        [logged-in] -> [not-logged-in]      display login screen
;; LOGGED_OUT        [checking-out] -> [not-logged-in]   display login screen
;; SESSION_TIMEOUT   [*] -> [not-logged-in]              display login screen
;; -----------------+-----------------------------------+-----------------------

(load-module :tomcat ['tomcat :as 'tc])
(load-module :ring)
(load-module :kira)


; ensure the Tomcat libs are on the classpath
(tc/check-required-libs)


;; -----------------------------------------------------------------------------
;; HTML templates
;; -----------------------------------------------------------------------------

;; The HTML templates in this demo are string based to get single file demo app.
;; Alternatively templates can be loaded from classpath or filesystem if
;; required so.

(def tpl-login-screen
  """
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "//www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html xmlns="//www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8">
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="/static/style.css" />
  </head>
  <body>
    <form action="/login" method="post">
      <div class="container">
        <label for="user"><b>Username</b></label>
        <input type="text" placeholder="Enter username" name="user" required>

        <label for="pwd"><b>Password</b></label>
        <input type="password" placeholder="Enter password" name="pwd" required>

        <button type="submit">Login</button>
      </div>
    </form>
    <%(when (== type :failure) %>
    <font color=red>Either user name or password is wrong.</font>
    <%)%>
    <%(when (== type :missing) %>
    <font color=red>Either user name or password is missing.</font>
    <%)%>
  </body>
  </html>
  """)

(def tpl-main-screen
  """
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "//www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html xmlns="//www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8">
    <title>Main</title>
    <link rel="stylesheet" type="text/css" href="/static/style.css" />
  </head>
  <body>
    <h3>Hi <%=(str/escape-html username)%></h3>
    <p>Login successful</p>
    <p>Your Session ID=<%=(str/escape-html session-id)%></p>
    <p/>
    <a href="/checkout">Checkout</a>
    <p/>
    <form action="/logout" method="post">
      <button type="submit">Logout</button>
    </form>
  </body>
  </html>
  """)

(def tpl-checkout-screen
  """
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "//www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html xmlns="//www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8">
    <title>Checkout</title>
    <link rel="stylesheet" type="text/css" href="/static/style.css" />
  </head>
  <body>
    <h3>Hi <%=(str/escape-html username)%></h3>
    <p>Please checkout.</p>
    <p/>
    <form action="/logout" method="post">
      <button type="submit">Logout</button>
    </form>
  </body>
  </html>
  """)

(def style-css
  """
  html, body, button, input {
    font-family: Verdana,sans-serif;
    font-size: 20px;
    line-height: 1.5;
  }

  form {
    // border: 3px solid #f1f1f1;
    width: 400px;
  }

  input[type=text], input[type=password] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    box-sizing: border-box;
  }

  button {
    background-color: #4CAF50;
    color: white;
    padding: 14px 20px;
    margin: 30px 0;
    border: none;
    cursor: pointer;
    width: 100%;
  }

  button:hover {
    opacity: 0.8;
  }

  .container {
    padding: 16px;
  }
  """)


;; -----------------------------------------------------------------------------
;; HTML renderers
;; -----------------------------------------------------------------------------

(def render-login-screen (kira/fn [type] tpl-login-screen))

(def render-checkout-screen (kira/fn [username] tpl-checkout-screen))

(def render-main-screen (kira/fn [username session-id] tpl-main-screen))


;; -----------------------------------------------------------------------------
;; Utils
;; -----------------------------------------------------------------------------

(defn logged-in? [req]
  (some? (ring/session-get-value req ":user")))

(defn login [req user]
  (ring/session-set-value req ":user" user))

(defn logout [req]
  (ring/session-clear req)
  (ring/session-invalidate req))

(def users
   { "1000"  { :id "1000" :firstname "John" :lastname "Doe" }
     "1001"  { :id "1001" :firstname "Ford" :lastname "Prefect" }
     "1002"  { :id "1002" :firstname "Zaphod" :lastname "Beeblebrox" } } )


;; -----------------------------------------------------------------------------
;; Handler
;; -----------------------------------------------------------------------------

(defn do-logout-handler [request]
  (logout request)
  (ring/redirect request "/login"))

(defn do-login-handler [request]
  (let [user (ring/get-request-parameter request "user")
        pwd (ring/get-request-parameter request "pwd")]
    (if (or (empty? user) (empty? pwd))
      (do
        (ring/session-clear request)
        { :status 200
          :headers { "Content-Type" "text/html; charset=utf-8" }
          :body (render-login-screen :missing) })
      (do
        (login request user)
        (ring/redirect request "/main")))))

(defn login-handler [request]
  (if (logged-in? request)
    (ring/redirect request "/main")
    { :status 200
      :headers { "Content-Type" "text/html; charset=utf-8" }
      :body (render-login-screen :ok)}))

(defn main-handler [request]
  { :status 200
    :headers { "Content-Type" "text/html; charset=utf-8" }
    :body (render-main-screen
            (ring/session-get-value request ":user")
            (ring/session-id request))})

(defn rest-user-handler [request]
  (let [user-id (-> request :parameters :id)
        user (get users user-id)]
    (if user
      { :status 200
        :headers { "Content-Type" "application/json; charset=utf-8" }
        :body (json/write-str user) }
      { :status 404
        :headers { "Content-Type" "application/json; charset=utf-8" }
        :body """{ "error": "user not found", "id": "~{user-id}"}""" })
  ))

(defn checkout-handler [request]
  { :status 200
    :headers { "Content-Type" "text/html; charset=utf-8" }
    :body (render-checkout-screen
            (ring/session-get-value request ":user")) })

(defn style-css-handler [request]
  { :status 200
    :headers { "Content-Type" "text/css; charset=utf-8" }
    :body style-css })

(defn not-found-handler [request]
  (ring/not-found-response ))


;; -----------------------------------------------------------------------------
;; Filter
;; -----------------------------------------------------------------------------

(defn logged-in-filter [handler]
  (fn [req]
    (if (not (logged-in? req))
      (ring/redirect req "/login")
      (handler req))))


;; -----------------------------------------------------------------------------
;; Main
;; -----------------------------------------------------------------------------

(def routes [[:get  "/**"                (logged-in-filter main-handler)     ]
             [:get  "/login"             login-handler                       ]
             [:post "/login"             do-login-handler                    ]
             [:get  "/checkout"          (logged-in-filter checkout-handler) ]
             [:post "/logout"            do-logout-handler                   ]
             [:get  "/rest"              not-found-handler                   ]
             [:get  "/rest/**"           not-found-handler                   ]
             [:get  "/rest/users/:id"    rest-user-handler                   ]
             [:get  "/static/style.css"  style-css-handler                   ]
             [:get  "/favicon.ico"       not-found-handler                   ]])

(defn start []
  (tc/start
    (ring/create-servlet (-> (ring/match-routes routes)  ; >--+
                                                         ;    |
                             (ring/mw-dump-response)     ; ^  |
                             (ring/mw-dump-request)      ; |  |
                             (ring/mw-request-counter)   ; |  |
                             (ring/mw-add-session 3600)  ; |  |
                             (ring/mw-print-uri)         ; |  |
                             (ring/mw-debug :on)))       ; +--+
    {:await? false}))

(defn stop []
  (tc/shutdown server))


;; start Tomcat
(def server (start))

(println "Tomcat started.")
(println "Open a browser:      (sh/open \"http://localhost:8080\")")
(println "Stop it by calling:  (stop)")
