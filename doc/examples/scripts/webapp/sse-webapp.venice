;; -----------------------------------------------------------------------------
;; Demo Server-Side-Events Service
;; -----------------------------------------------------------------------------
;;

(load-module :tomcat ['tomcat :as 'tc])
(load-module :ring)
(load-module :server-side-events ['server-side-events :as 'sse])

(import :java.io.IOException)


; ensure the Tomcat libs are on the classpath
(tc/check-required-libs)



;; -----------------------------------------------------------------------------
;; Event Producer
;; -----------------------------------------------------------------------------

(defn event-producer [queue stop]
  (let [id-counter (atom 1000)]
    (println "Event producer running.")
    (thread #(loop []
               (if @stop 
                 (println "Event producer stopped.")
                 (let [id (str (swap! id-counter inc))]
                   (sleep 2000)
                   (println "Adding event " id)
                   (put! queue { :id    id 
                                 :event "demo" 
                                 :data  ["Counter ~{id}"] })
                   (recur)))))))



;; -----------------------------------------------------------------------------
;; Ring handler (publishes the events to the client)
;; -----------------------------------------------------------------------------

(defn events-demo [queue request]
  (let [stop-events     (atom false)
        async_request   (:async-request request)   ;; HttpServletRequest
        async_response  (:async-response request)  ;; HttpServletResponse
        os              (. async_response :getOutputStream)
        pr              (io/wrap-os-with-print-writer os :utf-8)]

    (. async_response :setContentType       "text/event-stream")
    (. async_response :setCharacterEncoding "UTF-8")

    ;; start the event producer
    (event-producer queue stop-events)

    (try
      (loop []
        (let [event       (take! queue)
              sse-event   (sse/render event)]
          (println "Publishing event: " (:id event))
          (print pr sse-event)
          (flush pr)
          (recur)))
      (catch :Exception e 
        (println "Client closed connection")))
            
    ;; stop the event producer
    (reset! stop-events true)

    (println "Stopped serving events")

    ;; return nil to signal the :ring module to not send any further data
    ;; to the client!
    nil))



;; -----------------------------------------------------------------------------
;; Middleware configuration
;; -----------------------------------------------------------------------------

(def sse-queue (queue))

(def tomcat-opts { :await?    false   ;; do not block - return after start
                   :base-dir  "."
                   :port      8080 })

(def routes [[:get "/events"  (partial events-demo sse-queue)]])


(defn events-servlet []
  (ring/create-servlet (-> (ring/match-routes routes)     ; >--+
                                                          ;    |
                           (ring-mw/mw-dump-response)     ; ^  |
                           (ring-mw/mw-dump-request)      ; |  |
                           (ring-mw/mw-request-counter)   ; |  |
                           (ring-mw/mw-add-session 3600)  ; |  |
                           (ring-mw/mw-print-uri)         ; |  |
                           (ring-mw/mw-debug :on))))      ; +--+

;; start Tomcat
(let [server (tc/start [ [ (events-servlet)
                           { :name          "events-servlet"  
                             :mapping       "/*"
                             :async-support true } ] ]
                       tomcat-opts)]
  (defn stop [] (tc/shutdown server)))



;; GET (demo)
(comment
  ;; run this Http client in another REPL. It kicks off server side streaming
  ;; of events and displays the received events. Stops the connection after
  ;; having received 10 events.
  (do
    (load-module :http-client-j8 ['http-client-j8 :as 'hc])
    (load-module :server-side-events ['server-side-events :as 'sse])

    (let [response  (hc/send :get 
                             "http://localhost:8080/events" 
                             :headers { "Accept"         "text/event-stream" 
                                        "Cache-Control"  "no-cache"
                                        "Connection"     "keep-alive"}
                             :conn-timeout 0
                             :read-timeout 0
                             :debug true)]
      (println "Status:" (:http-status response))
      
      (println "\nConsuming events...\n")
      (let [is (:data-stream response)
            rd (io/wrap-is-with-buffered-reader is :utf-8)]
        ;; read the streamed events from the response
        (loop [event (sse/read-event rd) event-count 1]
          (if event
            (do
              (println "Event: " event)  
              (if (<= event-count 10)
                (recur (sse/read-event rd) (inc event-count))
                (do
                  (println "Stopped after receiving 10 events")
                  (. rd :close))))
            (println "Last event received"))))))
)

