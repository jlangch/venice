;; -----------------------------------------------------------------------------
;; Demo Server-Side-Events Service
;; -----------------------------------------------------------------------------
;;

(load-module :tomcat ['tomcat :as 'tc])
(load-module :ring)
(load-module :server-side-events ['server-side-events :as 'sse])


; ensure the Tomcat libs are on the classpath
(tc/check-required-libs)


;; -----------------------------------------------------------------------------
;; Event Producer
;; -----------------------------------------------------------------------------

(defn event-producer [queue]
  (let [id-counter (atom 1000)]
    (thread #(while true
               (let [id (swap! id-counter inc)]
                 (sleep 2000)
                 (put! queue { :id id 
                               :event "demo" 
                               :data "Counter ~{id}" }))))))



;; -----------------------------------------------------------------------------
;; Ring handler (publishes the events to the client)
;; -----------------------------------------------------------------------------

(defn events-demo [queue request]
  (let [request   (:async-request request)   ;; HttpServletRequest
        response  (:async-response request)  ;; HttpServletResponse
        os        (. response :getOutputStream)
        pr        (io/wrap-os-with-print-writer os :utf-8)]

    (. request :setContentType       "text/event-stream")
    (. request :setCharacterEncoding "UTF-8")
    
    (while true
      (let [event (take! queue)
            sse   (sse/render event)]
        (println "Publishing event: " (:id event))
        (println pr (sse/render event))
        (flush pr)))))



;; -----------------------------------------------------------------------------
;; Middleware configuration
;; -----------------------------------------------------------------------------

(def tomcat-opts { :await?    false   ;; do not block - return after start
                   :base-dir  "."
                   :port      8080 })

(def routes [[:get "/events"  events-demo]])

(defn events-servlet []
  (ring/create-servlet (-> (ring/match-routes routes)     ; >--+
                                                          ;    |
                           (ring-mw/mw-dump-response)     ; ^  |
                           (ring-mw/mw-dump-request)      ; |  |
                           (ring-mw/mw-request-counter)   ; |  |
                           (ring-mw/mw-add-session 3600)  ; |  |
                           (ring-mw/mw-print-uri)         ; |  |
                           (ring-mw/mw-debug :on))))      ; +--+

;; start Tomcat
(let [server (tc/start [ [ (events-servlet)
                           { :name          "events-servlet"  
                             :mapping       "/*"
                             :async-support true } ] ]
                       tomcat-opts)]
  (defn stop [] (tc/shutdown server)))


;; GET (demo)
(comment
  (do
    (load-module :http-client-j8 ['http-client-j8 :as 'hc])

    (let [res  (hc/send :get 
                        "http://localhost:8080/events" 
                        :headers { "Accept" "text/plain" }
                        :debug true)]
      (println "Status:" (:http-status res))
      (println (hc/slurp-string (:data-stream res)))))
)


;; -----------------------------------------------------------------------------

(println "Tomcat started on port ~(:port tomcat-opts).")
(println "Open a browser:      (sh/open \"http://localhost:8080\")")
(println "Stop it by calling:  (stop)")
