;; -----------------------------------------------------------------------------
;; Demo REST Service
;; -----------------------------------------------------------------------------
;;

(load-module :tomcat ['tomcat :as 'tc])
(load-module :ring)


; ensure the Tomcat libs are on the classpath
(tc/check-required-libs)

(def tomcat-opts {:await? false, :base-dir ".", :port 8080})


;; -----------------------------------------------------------------------------
;; ID generator
;; -----------------------------------------------------------------------------

(def id-cnt (atom 999))

(defn gen-id [] (str (swap! id-cnt inc)))


;; -----------------------------------------------------------------------------
;; Employee database
;; -----------------------------------------------------------------------------

(def employees (atom [ { :id (gen-id)  :name "susan"  :role "secretary" }
                       { :id (gen-id)  :name "john"   :role "assistant" }
                       { :id (gen-id)  :name "mary"   :role "team-lead" } ]))


(defn find-employee-by-id [id]
  (first (filter #(= id (:id %)) @employees)))

(defn delete-employee-by-id [id]
  (swap! employees #(filter (fn [e] (not (= id (:id e)))) %)))

(defn add-employee [employee]
  (let [id (coalesce (:id employee) (gen-id))
        e  (assoc (select-keys employee [:name :role]) :id id)]
    (delete-employee-by-id id)
    (swap! employees #(conj % e))
    e))


;; -----------------------------------------------------------------------------
;; Ring handler
;; -----------------------------------------------------------------------------

(defn get-all-employees [request]
  { :status 200
    :headers { "Content-Type" "application/json; charset=utf-8" }
    :body (json/write-str  @employees)})


(defn get-employee [request]
  (let [id       (-> request :parameters :id)
        employee (find-employee-by-id id)]
    (if employee
      { :status 200
        :headers { "Content-Type" "application/json; charset=utf-8" }
        :body (json/write-str employee) }
      { :status 404
        :headers { "Content-Type" "text/plain; charset=utf-8" }
        :body "Employee with the id ~{id} not found!" })))


(defn create-employee [request]
  (let [json?    (ring/json-request? request)
        body     (if json? (json/slurp (:body request) :key-fn keyword) nil)
        employee (if body {:name (:name body), :role (:role body)} nil)]
    (cond
      (not json?) { :status 400
                    :headers { "Content-Type" "text/plain; charset=utf-8" }
                    :body "Not a json request!" }
      :else       { :status 200
                    :headers { "Content-Type" "application/json; charset=utf-8" }
                    :body (json/write-str (add-employee employee)) } )))


(defn update-employee [request]
  (let [id        (-> request :parameters :id)
        employee  (find-employee-by-id id)
        json?     (ring/json-request? request)
        body      (if json? (json/slurp (:body request) :key-fn keyword) nil)
        employee* (if body {:id id, :name (:name body), :role (:role body)} nil)]
    (cond
      (not json?)     { :status 400
                        :headers { "Content-Type" "text/plain; charset=utf-8" }
                        :body "Not a json request!" }
      (nil? employee) { :status 404
                        :headers { "Content-Type" "text/plain; charset=utf-8" }
                        :body "Employee with the id ~{id} not found!" }
      :else           { :status 200
                        :headers { "Content-Type" "application/json; charset=utf-8" }
                        :body (json/write-str (add-employee employee*)) } )))


(defn delete-employee [request]
  (let [id       (-> request :parameters :id)
        employee (find-employee-by-id id)
        _        (when employee (delete-employee-by-id id))]
    (if employee
      { :status 200
        :headers { "Content-Type" "text/plain; charset=utf-8" }
        :body "Employee with the id ~{id} deleted!" }
      { :status 404
        :headers { "Content-Type" "text/plain; charset=utf-8" }
        :body "Employee with the id ~{id} not found!" })))


;; -----------------------------------------------------------------------------
;; Middleware configuration
;; -----------------------------------------------------------------------------

(def routes [[:get    "/employees"      get-all-employees]
             [:get    "/employees/:id"  get-employee]
             [:post   "/employees"      create-employee]
             [:put    "/employees/:id"  update-employee]
             [:delete "/employees/:id"  delete-employee]])

(defn my-servlet []
  (ring/create-servlet (-> (ring/match-routes routes)  ; >--+
                                                       ;    |
                           (ring/mw-dump-response)     ; ^  |
                           (ring/mw-dump-request)      ; |  |
                           (ring/mw-request-counter)   ; |  |
                           (ring/mw-add-session 3600)  ; |  |
                           (ring/mw-print-uri)         ; |  |
                           (ring/mw-debug :on))))      ; +--+

;; start Tomcat
(let [server (tc/start (my-servlet) tomcat-opts)]
  (defn stop [] (tc/shutdown server)))


;; -----------------------------------------------------------------------------
;; Curl commands for testing
;;
;; curl -i -X GET http://localhost:8080/employees
;; curl -i -X GET http://localhost:8080/employees/1000
;; curl -i -X DELETE http://localhost:8080/employees/1000
;; curl -i -X POST -H 'Content-Type: application/json' -d '{"name": "hanna", "role": "secretary"}' http://localhost:8080/employees
;; curl -i -X PUT -H 'Content-Type: application/json' -d '{"id": "1001", "name": "john", "role": "clerk"}' http://localhost:8080/employees/1001
;; -----------------------------------------------------------------------------

;; -----------------------------------------------------------------------------
;; Venice HTTP Client examples
;; -----------------------------------------------------------------------------

;; GET (get)
(comment
  (do
    (load-module :http-client-legacy ['http-client-legacy :as 'hc])

    (let [res      (hc/send :get 
                            "http://localhost:8080/employees" 
                            :headers { "Accept" "application/json, text/plain" }
                            :debug true)
          status   (:http-status res)
          type     (:content-type res)
          encoding (:content-encoding res)]
      (println "Status:" status)
      (if (and (= 200 status) (= "application/json" type))
        (println (hc/slurp-json (:data-stream res) encoding))
        (println (hc/slurp-string (:data-stream res) encoding)))))
)

;; POST (create)
(comment
  (do
    (load-module :http-client-legacy ['http-client-legacy :as 'hc])
    
    (let [res      (hc/send :post 
                            "http://localhost:8080/employees" 
                            :headers {"Accept"       "application/json, text/plain"
                                      "Content-Type" "application/json"}
                            :body (json/write-str { "name" "hanna", 
                                                    "role" "secretary" })
                            :debug true)
          status   (:http-status res)
          type     (:content-type res)
          encoding (:content-encoding res)]
      (println "Status:" status)
      (if (and (= 200 status) (= "application/json" type))
        (println (hc/slurp-json (:data-stream res) encoding))
        (println (hc/slurp-string (:data-stream res) encoding)))))
)

;; PUT (update)
(comment 
  (do
    (load-module :http-client-legacy ['http-client-legacy :as 'hc])
    
    (let [res      (hc/send :put 
                            "http://localhost:8080/employees/1001" 
                            :headers {"Accept"       "application/json, text/plain"
                                      "Content-Type" "application/json"}
                            :body (json/write-str { "id"   "1001", 
                                                    "name" "john", 
                                                    "role" "clerk" })
                            :debug true)
          status   (:http-status res)
          type     (:content-type res)
          encoding (:content-encoding res)]
      (println "Status:" status)
      (if (and (= 200 status) (= "application/json" type))
        (println (hc/slurp-json (:data-stream res) encoding))
        (println (hc/slurp-string (:data-stream res) encoding)))))
)

;; DELETE (delete)
(comment 
  (do
    (load-module :http-client-legacy ['http-client-legacy :as 'hc])
    
    (let [res      (hc/send :delete 
                            "http://localhost:8080/employees/1000" 
                            :headers { "Accept" "text/plain" }
                            :debug true)
          status   (:http-status res)
          type     (:content-type res)
          encoding (:content-encoding res)]
      (println "Status:" status)
      (if (= "text/plain" type)
        (println (hc/slurp-string (:data-stream res) encoding)))))
)
;; -----------------------------------------------------------------------------

(println "Tomcat started on port ~(:port tomcat-opts).")
(println "Open a browser:      (sh/open \"http://localhost:8080\")")
(println "Stop it by calling:  (stop)")
