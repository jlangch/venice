;; -----------------------------------------------------------------------------
;; Demo Async Service
;; -----------------------------------------------------------------------------
;;

(load-module :tomcat ['tomcat :as 'tc])
(load-module :ring)


; ensure the Tomcat libs are on the classpath
(tc/check-required-libs)




;; -----------------------------------------------------------------------------
;; Ring handler
;; -----------------------------------------------------------------------------

(defn async-demo [request async-response-fn async-error-fn]
  (when (nil? (:async request))
    (throw (ex :VncException "Not in async mode!")))

  @(thread (fn []
      (try 
        (let [async     (:async request)
              response  (:response async)
              async-ctx (:context async)
              out      (. response :getWriter())]
          (. response :setContentType "text/plain; charset=utf-8")
          (. response :setStatus 200)
          (sleep 2_000)
          (. out :print "Work completed.")
          (. out :flush)
          (. async-ctx :complete)
          nil))
      (catch e (async-error-fn e)))))



;; -----------------------------------------------------------------------------
;; Middleware configuration
;; -----------------------------------------------------------------------------

(def tomcat-opts { :await?    false   ;; do not block - return after start
                   :base-dir  "."
                   :port      8080 })

(def routes [[:get "/demo"  async-demo]])

(defn async-servlet []
  (ring/create-servlet (-> (ring/match-routes routes)     ; >--+
                                                          ;    |
                           (ring-mw/mw-dump-response)     ; ^  |
                           (ring-mw/mw-dump-request)      ; |  |
                           (ring-mw/mw-request-counter)   ; |  |
                           (ring-mw/mw-add-session 3600)  ; |  |
                           (ring-mw/mw-print-uri)         ; |  |
                           (ring-mw/mw-debug :on))))      ; +--+

;; start Tomcat
(let [server (tc/start [ [ (async-servlet)
                           { :name          "async-servlet"  
                             :mapping       "/demo"
                             :async-support true} ] ]
                       tomcat-opts)]
  (defn stop [] (tc/shutdown server)))


;; GET (get)
(comment
  (do
    (load-module :http-client-j8 ['http-client-j8 :as 'hc])

    (let [res  (hc/send :get 
                        "http://localhost:8080/demo" 
                        :headers { "Accept" "text/plain" }
                        :debug true)]
      (println "Status:" (:http-status res))
      (println (hc/slurp-string (:data-stream res)))))
)


;; -----------------------------------------------------------------------------

(println "Tomcat started on port ~(:port tomcat-opts).")
(println "Open a browser:      (sh/open \"http://localhost:8080\")")
(println "Stop it by calling:  (stop)")
