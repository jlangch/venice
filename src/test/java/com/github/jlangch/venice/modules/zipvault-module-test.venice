;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; DOCKER unit test


(do
  (load-module :zipvault)
  (load-module :test)

  (ns zipvault-test)


  (test/deftest test-extract-file-data []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))


  (test/deftest test-extract-file []
    (let [dir (io/tmp-dir)
          out (io/file dir "a.txt")
          zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")

      (io/touch-file out)  
      (io/delete-file-on-exit out)

      (zipvault/extract-file zip "123" "a.txt" (io/file-path dir))

      (assert-eq "abc" (io/slurp out :binary false))))


  (test/deftest test-extract-all []
    (let [dir (io/file (io/tmp-dir) "zipvault")
          zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")

      (when (io/exists-dir? dir)
        (println "Pruning " dir)
        (io/delete-file-tree dir))

      (io/mkdir dir)
      (io/delete-file-on-exit dir)

      (zipvault/extract-all zip "123" (io/file-path dir))

      (assert-eq "abc" (io/slurp (io/file dir "a.txt") :binary false))
      (assert-eq "def" (io/slurp (io/file dir "b.txt") :binary false))))


  (test/deftest test-encryptedQ []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")
      
      (assert-eq true (zipvault/encrypted? zip))))


  (test/deftest test-valid-zip-fileQ []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")
      
      (assert-eq true (zipvault/valid-zip-file? zip))))


  ;; run tests
  (test/run-tests 'zipvault-test))
