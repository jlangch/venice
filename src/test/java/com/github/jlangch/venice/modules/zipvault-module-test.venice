;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ZipVault unit test


(do
  (load-module :zipvault)
  (load-module :test)

  (ns zipvault-test)

  ;; ---------------------------------------------------------------------------
  ;; zip
  ;; ---------------------------------------------------------------------------

  (test/deftest test-zip-data-empty []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" nil)

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "" data))))

  (test/deftest test-zip-data-string []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc")

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-zip-data-bytebuf []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" (bytebuf "abc"))

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-zip-data-file-1 []
    (let [zip  (io/temp-file "vault-", ".zip")
          file (io/temp-file "data-", ".txt")]
      (io/spit file "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit file)
      (zipvault/zip zip "123" "a.txt" file)

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-zip-data-file-2 []
    (let [zip        (io/temp-file "vault-", ".zip")
          file       (io/file (io/tmp-dir) "a.txt")]
      (io/spit file "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit file)
      (zipvault/zip zip "123" file file)

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-zip-data-in-stream []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" (io/string-in-stream "abc"))

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-zip-data-out-stream []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" 
                              (fn [os] 
                                (let [wr (io/wrap-os-with-buffered-writer os)]
                                  (print wr "abc")
                                  (flush wr))))

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))


  ;; ---------------------------------------------------------------------------
  ;; entries
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-entries []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)

      (zipvault/zip zip
                    "pwd"
                    "a.txt"     "abc"
                    "b.txt"     "def"
                    "xx/"       nil
                    "yy/c.txt"  "ghi")

      (let [entries (zipvault/entries zip "pwd")
            e1      (first entries)
            e2      (second entries)
            e3      (third entries)
            e4      (fourth entries)]
        (assert-eq 4 (count entries))

        (assert-eq "a.txt" (:file-name e1))
        (assert-eq 33 (:compressed-size e1))
        (assert-eq 3 (:uncompressed-size e1))
        (assert-eq true (:encrypted? e1))
        (assert-eq false (:directory? e1))

        (assert-eq "b.txt" (:file-name e2))
        (assert-eq 33 (:compressed-size e2))
        (assert-eq 3 (:uncompressed-size e2))
        (assert-eq true (:encrypted? e2))
        (assert-eq false (:directory? e2))

        (assert-eq "xx/" (:file-name e3))
        (assert-eq 0 (:compressed-size e3))
        (assert-eq 0 (:uncompressed-size e3))
        (assert-eq false (:encrypted? e3))
        (assert-eq true (:directory? e3))

        (assert-eq "yy/c.txt" (:file-name e4))
        (assert-eq 33 (:compressed-size e4))
        (assert-eq 3 (:uncompressed-size e4))
        (assert-eq true (:encrypted? e4))
        (assert-eq false (:directory? e4)))))


  ;; ---------------------------------------------------------------------------
  ;; add-file
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-add-file-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp   (io/file (io/tmp-dir) "a.txt")]
      (io/spit tmp "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp)

      (zipvault/zip zip "pwd")
      (zipvault/add-file zip "pwd" tmp)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-add-file-many-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp-1 (io/file (io/tmp-dir) "a1.txt")
          tmp-2 (io/file (io/tmp-dir) "a2.txt")]
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)

      (zipvault/zip zip "pwd")
      (zipvault/add-file zip "pwd" tmp-1)
      (zipvault/add-file zip "pwd" tmp-2)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))
  
  (test/deftest test-add-file-custom-path-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp   (io/file (io/tmp-dir) "a.txt")]
      (io/spit tmp "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp)

      (zipvault/zip zip "pwd")
      (zipvault/add-file zip "pwd" "test/aaa.txt" tmp)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/aaa.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-add-file-many-custom-path-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp-1 (io/file (io/tmp-dir) "a1.txt")
          tmp-2 (io/file (io/tmp-dir) "a2.txt")]
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)

      (zipvault/zip zip "pwd")
      (zipvault/add-file zip "pwd" "test/aaa.txt" tmp-1)
      (zipvault/add-file zip "pwd" "test/bbb.txt" tmp-2)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/aaa.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/bbb.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))


  ;; ---------------------------------------------------------------------------
  ;; add-files
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-add-files-one-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp   (io/file (io/tmp-dir) "a.txt")]
      (io/spit tmp "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp)

      (zipvault/zip zip "pwd")
      (zipvault/add-files zip "pwd" nil tmp)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-add-files-one-with-root-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp   (io/file (io/tmp-dir) "a.txt")]
      (io/spit tmp "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp)

      (zipvault/zip zip "pwd")
      (zipvault/add-files zip "pwd" "test" tmp)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))

  (test/deftest test-add-files-one-to-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp   (io/file (io/tmp-dir) "a.txt")]
      (io/spit tmp "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp)

      (zipvault/zip zip "pwd" "z.txt" "zzz")
      (zipvault/add-files zip "pwd" nil tmp)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "z.txt")
                     (bytebuf-to-string))]
        (assert-eq "zzz" data))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))
 
  (test/deftest test-add-files-many-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp-1 (io/file (io/tmp-dir) "a1.txt")
          tmp-2 (io/file (io/tmp-dir) "a2.txt")]
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)

      (zipvault/zip zip "pwd")
      (zipvault/add-files zip "pwd" nil tmp-1 tmp-2)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))
 
  (test/deftest test-add-files-with-root-many-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp-1 (io/file (io/tmp-dir) "a1.txt")
          tmp-2 (io/file (io/tmp-dir) "a2.txt")]
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)

      (zipvault/zip zip "pwd")
      (zipvault/add-files zip "pwd" "test/" tmp-1 tmp-2)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))
   
  (test/deftest test-add-files-many-to-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp-1 (io/file (io/tmp-dir) "a1.txt")
          tmp-2 (io/file (io/tmp-dir) "a2.txt")]
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)

      (zipvault/zip zip "pwd" "z.txt" "zzz")
      (zipvault/add-files zip "pwd" nil tmp-1 tmp-2)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "z.txt")
                     (bytebuf-to-string))]
        (assert-eq "zzz" data))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))


  ;; ---------------------------------------------------------------------------
  ;; add-folder (exclude-root-folder)
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-add-folder-exclude-root-to-empty-zip
    (let [zip        (io/temp-file "vault-", ".zip")
          tmp-folder (io/file (io/tmp-dir) "ziptest")
          tmp-1      (io/file tmp-folder "a1.txt")
          tmp-2      (io/file tmp-folder "a2.txt")]
      (when (io/exists-dir? tmp-folder)
        (println "Pruning " tmp-folder)
        (io/delete-file-tree tmp-folder))

      (io/mkdir tmp-folder)
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)
      (io/delete-file-on-exit tmp-folder)

      (zipvault/zip zip "pwd")
      (zipvault/add-folder zip "pwd" tmp-folder false)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))

  (test/deftest test-add-folder-with-zip-root-exclude-root-to-empty-zip
    (let [zip        (io/temp-file "vault-", ".zip")
          tmp-folder (io/file (io/tmp-dir) "ziptest")
          tmp-1      (io/file tmp-folder "a1.txt")
          tmp-2      (io/file tmp-folder "a2.txt")]
      (when (io/exists-dir? tmp-folder)
        (println "Pruning " tmp-folder)
        (io/delete-file-tree tmp-folder))

      (io/mkdir tmp-folder)
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)
      (io/delete-file-on-exit tmp-folder)

      (zipvault/zip zip "pwd")
      (zipvault/add-folder zip "pwd" tmp-folder "test/" false nil)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "test/a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))

  (test/deftest test-add-folder-exclude-root-to-zip
    (let [zip        (io/temp-file "vault-", ".zip")
          tmp-folder (io/file (io/tmp-dir) "ziptest")
          tmp-1      (io/file tmp-folder "a1.txt")
          tmp-2      (io/file tmp-folder "a2.txt")]
      (when (io/exists-dir? tmp-folder)
        (println "Pruning " tmp-folder)
        (io/delete-file-tree tmp-folder))

      (io/mkdir tmp-folder)
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)
      (io/delete-file-on-exit tmp-folder)

      (zipvault/zip zip "pwd" "z.txt" "zzz")
      (zipvault/add-folder zip "pwd" tmp-folder false)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "z.txt")
                     (bytebuf-to-string))]
        (assert-eq "zzz" data))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))


  ;; ---------------------------------------------------------------------------
  ;; add-folder (include-root-folder)
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-add-folder-include-root-to-empty-zip
    (let [zip        (io/temp-file "vault-", ".zip")
          tmp-folder (io/file (io/tmp-dir) "ziptest")
          tmp-1      (io/file tmp-folder "a1.txt")
          tmp-2      (io/file tmp-folder "a2.txt")]
      (when (io/exists-dir? tmp-folder)
        (println "Pruning " tmp-folder)
        (io/delete-file-tree tmp-folder))

      (io/mkdir tmp-folder)
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)
      (io/delete-file-on-exit tmp-folder)

      (zipvault/zip zip "pwd")
      (zipvault/add-folder zip "pwd" tmp-folder true)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "ziptest/a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "ziptest/a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))

  (test/deftest test-add-folder-include-root-to-zip
    (let [zip        (io/temp-file "vault-", ".zip")
          tmp-folder (io/file (io/tmp-dir) "ziptest")
          tmp-1      (io/file tmp-folder "a1.txt")
          tmp-2      (io/file tmp-folder "a2.txt")]
      (when (io/exists-dir? tmp-folder)
        (println "Pruning " tmp-folder)
        (io/delete-file-tree tmp-folder))

      (io/mkdir tmp-folder)
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-1)
      (io/delete-file-on-exit tmp-2)
      (io/delete-file-on-exit tmp-folder)

      (zipvault/zip zip "pwd" "z.txt" "zzz")
      (zipvault/add-folder zip "pwd" tmp-folder true)

      (let [data (-> (zipvault/extract-file-data zip "pwd" "z.txt")
                     (bytebuf-to-string))]
        (assert-eq "zzz" data))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "ziptest/a1.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))
        
      (let [data (-> (zipvault/extract-file-data zip "pwd" "ziptest/a2.txt")
                     (bytebuf-to-string))]
        (assert-eq "bcd" data))))

  (test/deftest test-add-folder-exclude-filter
    (let [zip        (io/temp-file "vault-", ".zip")
          tmp-folder (io/file (io/tmp-dir) "ziptest")
          tmp-1      (io/file tmp-folder "a.txt")
          tmp-2      (io/file tmp-folder "b.txt")
          tmp-3      (io/file tmp-folder "c.log")]
      (when (io/exists-dir? tmp-folder)
        (println "Pruning " tmp-folder)
        (io/delete-file-tree tmp-folder))

      (io/mkdir tmp-folder)
      (io/spit tmp-1 "abc")
      (io/spit tmp-2 "bcd")
      (io/spit tmp-3 "cde")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp-folder)

      (zipvault/zip zip "pwd")
      (zipvault/add-folder zip "pwd" tmp-folder false #(io/file-ext? % "log"))

      (let [entries (->> (zipvault/entries zip "pwd")
                         (map :file-name)
                         (into #{}))]
        (assert-eq 2     (count entries))
        (assert-eq true  (contains? entries "a.txt"))
        (assert-eq true  (contains? entries "b.txt")))))



  ;; ---------------------------------------------------------------------------
  ;; add-stream
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-add-stream-to-empty-zip
    (let [zip   (io/temp-file "vault-", ".zip")]
      (zipvault/zip zip "pwd")
      (zipvault/add-stream zip "pwd" "a.txt" (io/string-in-stream "abc"))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))
   
  (test/deftest test-add-stream-to-zip
    (let [zip   (io/temp-file "vault-", ".zip")
          tmp   (io/file (io/tmp-dir) "a.txt")]
      (io/spit tmp "abc")
      (io/delete-file-on-exit zip)
      (io/delete-file-on-exit tmp)

      (zipvault/zip zip "pwd" "z.txt" "zzz")
      (zipvault/add-stream zip "pwd" "a.txt" (io/string-in-stream "abc"))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "z.txt")
                     (bytebuf-to-string))]
        (assert-eq "zzz" data))

      (let [data (-> (zipvault/extract-file-data zip "pwd" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))


  ;; ---------------------------------------------------------------------------
  ;; extract-file-data
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-extract-file-data []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")

      (let [data (-> (zipvault/extract-file-data zip "123" "a.txt")
                     (bytebuf-to-string))]
        (assert-eq "abc" data))))


  ;; ---------------------------------------------------------------------------
  ;; extract-file
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-extract-file []
    (let [dir (io/tmp-dir)
          out (io/file dir "a.txt")
          zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")

      (io/touch-file out)  
      (io/delete-file-on-exit out)

      (zipvault/extract-file zip "123" "a.txt" (io/file-path dir))

      (assert-eq "abc" (io/slurp out :binary false))))
  
  (test/deftest test-extract-folder []
    (let [dir   (io/file (io/tmp-dir) "zipvault")
          zip   (io/temp-file "vault-", ".zip")
          dest  (io/file dir "dest")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "words/a.txt" "abc" 
                              "words/b.txt" "def"
                              "logs/001.log" "xxx")

      (when (io/exists-dir? dir)
        (println "Pruning " dir)
        (io/delete-file-tree dir))

      (io/mkdir dir)
      (io/delete-file-on-exit dir)

      (zipvault/extract-file zip "123" "words/" (io/file-path dir))

      (assert-eq "abc" (io/slurp (io/file dir "words" "a.txt") :binary false))
      (assert-eq "def" (io/slurp (io/file dir "words" "b.txt") :binary false))
      
      (assert-eq false (io/exists-dir? (io/file dir "logs")))
      (assert-eq false (io/exists-file? (io/file dir "001.log")))))


  ;; ---------------------------------------------------------------------------
  ;; extract-all
  ;; ---------------------------------------------------------------------------
  
  (test/deftest test-extract-all []
    (let [dir (io/file (io/tmp-dir) "zipvault")
          zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")

      (when (io/exists-dir? dir)
        (println "Pruning " dir)
        (io/delete-file-tree dir))

      (io/mkdir dir)
      (io/delete-file-on-exit dir)

      (zipvault/extract-all zip "123" (io/file-path dir))

      (assert-eq "abc" (io/slurp (io/file dir "a.txt") :binary false))
      (assert-eq "def" (io/slurp (io/file dir "b.txt") :binary false))))


  ;; ---------------------------------------------------------------------------
  ;; remove-files
  ;; ---------------------------------------------------------------------------
   
  (test/deftest remove-files-none []
    (let [dir (io/file (io/tmp-dir) "zipvault")
         zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "pwd" "a.txt" "abc" "b.txt" "def" "c.txt" "ghi")

      (zipvault/remove-files zip "pwd")

      (let [entries (->> (zipvault/entries zip "pwd")
                         (map :file-name)
                         (into #{}))]
        (assert-eq 3     (count entries))
        (assert-eq true  (contains? entries "a.txt"))
        (assert-eq true  (contains? entries "b.txt"))
        (assert-eq true  (contains? entries "c.txt")))))
 
  (test/deftest remove-files-one []
    (let [dir (io/file (io/tmp-dir) "zipvault")
         zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "pwd" "a.txt" "abc" "b.txt" "def" "c.txt" "ghi")

      (zipvault/remove-files zip "pwd" "c.txt")

      (let [entries (->> (zipvault/entries zip "pwd")
                         (map :file-name)
                         (into #{}))]
        (assert-eq 2     (count entries))
        (assert-eq true  (contains? entries "a.txt"))
        (assert-eq true  (contains? entries "b.txt"))
        (assert-eq false (contains? entries "c.txt")))))
 
  (test/deftest remove-files-many []
    (let [dir (io/file (io/tmp-dir) "zipvault")
         zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "pwd" "a.txt" "abc" "b.txt" "def" "c.txt" "ghi")

      (zipvault/remove-files zip "pwd" "b.txt" "c.txt")

      (let [entries (->> (zipvault/entries zip "pwd")
                         (map :file-name)
                         (into #{}))]
        (assert-eq 1     (count entries))
        (assert-eq true  (contains? entries "a.txt"))
        (assert-eq false (contains? entries "b.txt"))
        (assert-eq false (contains? entries "c.txt")))))


  ;; ---------------------------------------------------------------------------
  ;; encrypted?
  ;; ---------------------------------------------------------------------------
  
   (test/deftest test-encryptedQ []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")
      
      (assert-eq true (zipvault/encrypted? zip))))


  ;; ---------------------------------------------------------------------------
  ;; valid-zip-file?
  ;; ---------------------------------------------------------------------------
  
   (test/deftest test-valid-zip-fileQ []
    (let [zip (io/temp-file "vault-", ".zip")]
      (io/delete-file-on-exit zip)
      (zipvault/zip zip "123" "a.txt" "abc" "b.txt" "def")
      
      (assert-eq true (zipvault/valid-zip-file? zip))))


  ;; run tests
  (test/run-tests 'zipvault-test))
