;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; TEST framework unit test


;;; Testing :once and :each fixtures
(do
  (load-module :test)

  (ns counter)

  (def cnt-setup (atom 0))
  (def cnt-teardown (atom 0))



  (ns m-test)

  (defn one-time-setup []
    (swap! counter/cnt-setup inc)
    (println "one time setup"))

  (defn one-time-teardown []
    (swap! counter/cnt-teardown inc)
    (println "one time teardown"))

  (defn once-fixture [f]
    (one-time-setup)
    (try
      (f)
      (finally (one-time-teardown))))

  ;; register as a one-time callback
  (test/use-fixtures 'm-test :once once-fixture)


  (defn each-time-setup []
    (swap! counter/cnt-setup inc)
    (println "each time setup"))

  (defn each-time-teardown []
    (swap! counter/cnt-teardown inc)
    (println "each time teardown"))

  (defn each-fixture [f]
    (each-time-setup)
    (try
      (f)
      (finally (each-time-teardown))))

  ;; register as a each-time callback
  (test/use-fixtures 'm-test :each each-fixture)


  (test/deftest test-deftest-fixture-1 []
    (assert-eq 3 (+ 1 2)))

  (test/deftest test-deftest-fixture-2 []
    (assert-eq 3 (+ 1 2)))



  (ns m-result)

  (test/deftest test-counter-result []
    (assert-eq 3 @counter/cnt-setup)
    (assert-eq 3 @counter/cnt-teardown))



  ;; run tests
  (test/run-tests 'm-test)     ;; run test with fixtures
  (test/run-tests 'm-result))  ;; verify setup/teardown counts
