;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; GREP unit test


(do
  (ns parsifal-expr-test)

  (load-module :test)

  (load-classpath-file "com/github/jlangch/venice/modules/parsifal-expr-parser.venice")
  (ns-alias 'ep 'expr-parser)


  (test/deftest test-tokenizer-empty []
    (assert-eq [] (ep/tokenize ""))
    (assert-eq [] (ep/tokenize "  ")))


  (test/deftest test-tokenizer-token []
    (assert-eq [(ep/Token. :op "+" 1 2)]            (ep/tokenize " + "))
    (assert-eq [(ep/Token. :op "-" 1 2)]            (ep/tokenize " - "))
    (assert-eq [(ep/Token. :op "*" 1 2)]            (ep/tokenize " * "))
    (assert-eq [(ep/Token. :op "/" 1 2)]            (ep/tokenize " / "))

    (assert-eq [(ep/Token. :lparen "(" 1 2)]        (ep/tokenize " ( "))
    (assert-eq [(ep/Token. :rparen ")" 1 2)]        (ep/tokenize " ) "))

    (assert-eq [(ep/Token. :int "0" 1 2)]           (ep/tokenize " 0 "))
    (assert-eq [(ep/Token. :int "5" 1 2)]           (ep/tokenize " 5 "))
    (assert-eq [(ep/Token. :int "123" 1 2)]         (ep/tokenize " 123 "))

    (assert-eq [(ep/Token. :float "0.0" 1 2)]       (ep/tokenize " 0.0 "))
    (assert-eq [(ep/Token. :float "0.01234" 1 2)]   (ep/tokenize " 0.01234 "))
    (assert-eq [(ep/Token. :float "250.01234" 1 2)] (ep/tokenize " 250.01234 ")))


  (test/deftest test-tokenizer-expr []
    (assert-eq [(ep/Token. :int "1" 1 2)
                (ep/Token. :op "+" 1 4)
                (ep/Token. :int "2" 1 6)]
               (ep/tokenize " 1 + 2 "))

    (assert-eq [(ep/Token. :int "1" 1 2)
                (ep/Token. :op "-" 1 4)
                (ep/Token. :int "2" 1 6)]
               (ep/tokenize " 1 - 2 "))

    (assert-eq [(ep/Token. :int "1" 1 2)
                (ep/Token. :op "*" 1 4)
                (ep/Token. :int "2" 1 6)]
               (ep/tokenize " 1 * 2 "))

    (assert-eq [(ep/Token. :int "1" 1 2)
                (ep/Token. :op "/" 1 4)
                (ep/Token. :int "2" 1 6)]
               (ep/tokenize " 1 / 2 "))

    (assert-eq [(ep/Token. :lparen "(" 1 2)
                (ep/Token. :int    "1" 1 3)
                (ep/Token. :op     "+" 1 5)
                (ep/Token. :int    "2" 1 7)
                (ep/Token. :rparen ")" 1 8)
                (ep/Token. :op     "*" 1 10)
                (ep/Token. :int    "4" 1 12)
                (ep/Token. :op     "+" 1 14)
                (ep/Token. :int    "1" 1 16)]
               (ep/tokenize " (1 + 2) * 4 + 1 "))

    (assert-eq [(ep/Token. :lparen "(" 1 2)
                (ep/Token. :float  "1.1" 1 3)
                (ep/Token. :op     "+" 1 7)
                (ep/Token. :float  "2.2" 1 9)
                (ep/Token. :rparen ")" 1 12)
                (ep/Token. :op     "*" 1 14)
                (ep/Token. :float  "4.4" 1 16)
                (ep/Token. :op     "+" 1 20)
                (ep/Token. :float  "1.1" 1 22)]
               (ep/tokenize " (1.1 + 2.2) * 4.4 + 1.1 "))

    (assert-eq [(ep/Token. :lparen "(" 1 1)
                (ep/Token. :lparen "(" 1 2)
                (ep/Token. :lparen "(" 1 3)
                (ep/Token. :float  "1.1" 1 4)
                (ep/Token. :op     "+" 1 8)
                (ep/Token. :float  "2.2" 1 10)
                (ep/Token. :rparen ")" 1 13)
                (ep/Token. :op     "*" 1 15)
                (ep/Token. :float  "4.4" 1 17)
                (ep/Token. :rparen ")" 1 20)
                (ep/Token. :op     "+" 1 22)
                (ep/Token. :float  "1.1" 1 24)
                (ep/Token. :rparen ")" 1 27)]
               (ep/tokenize "(((1.1 + 2.2) * 4.4) + 1.1)")))


  (test/deftest test-evaluate-empty []
    (assert-eq nil (ep/evaluate ""))
    (assert-eq nil (ep/evaluate " "))
    (assert-eq nil (ep/evaluate "  ")))


  (test/deftest test-evaluate-to-int []
    (assert-eq 0 (ep/evaluate "0"))
    (assert-eq 0 (ep/evaluate " 0"))
    (assert-eq 0 (ep/evaluate "0 "))
    (assert-eq 0 (ep/evaluate " 0 "))
    (assert-eq 0 (ep/evaluate "-0 "))
    (assert-eq 0 (ep/evaluate " -0 "))

    (assert-eq 1 (ep/evaluate "1"))
    (assert-eq 1 (ep/evaluate " 1"))
    (assert-eq 1 (ep/evaluate "1 "))
    (assert-eq 1 (ep/evaluate " 1 "))
    (assert-eq -1 (ep/evaluate "-1 "))
    (assert-eq -1 (ep/evaluate " -1 "))

    (assert-eq 123 (ep/evaluate "123"))
    (assert-eq 123 (ep/evaluate " 123"))
    (assert-eq 123 (ep/evaluate "123 "))
    (assert-eq 123 (ep/evaluate " 123 "))
    (assert-eq -123 (ep/evaluate "-123 "))
    (assert-eq -123 (ep/evaluate " -123 ")))


  (test/deftest test-evaluate-to-float []
    (assert-eq 0.0 (ep/evaluate "0.0"))
    (assert-eq 0.0 (ep/evaluate " 0.0"))
    (assert-eq 0.0 (ep/evaluate "0.0 "))
    (assert-eq 0.0 (ep/evaluate " 0.0 "))
    (assert-eq 0.0 (ep/evaluate "-0.0 "))
    (assert-eq 0.0 (ep/evaluate " -0.0 "))

    (assert-eq 1.0 (ep/evaluate "1.0"))
    (assert-eq 1.0 (ep/evaluate " 1.0"))
    (assert-eq 1.0 (ep/evaluate "1.0 "))
    (assert-eq 1.0 (ep/evaluate " 1.0 "))
    (assert-eq -1.0 (ep/evaluate "-1.0 "))
    (assert-eq -1.0 (ep/evaluate " -1.0 "))

    (assert-eq 123.45 (ep/evaluate "123.45"))
    (assert-eq 123.45 (ep/evaluate " 123.45"))
    (assert-eq 123.45 (ep/evaluate "123.45 "))
    (assert-eq 123.45 (ep/evaluate " 123.45 "))
    (assert-eq -123.45 (ep/evaluate "-123.45 "))
    (assert-eq -123.45 (ep/evaluate " -123.45 ")))


  (test/deftest test-evaluate-int-expr []
    (assert-eq 0  (ep/evaluate "0 + 0 - 0"))
    (assert-eq 0  (ep/evaluate "0+0-0"))
    (assert-eq 11 (ep/evaluate " 1 + 2 * 4 + 2 - 6 / 3 + 2 "))
    (assert-eq 11 (ep/evaluate " 1+2*4+2-6/3+2")))


  (test/deftest test-evaluate-float-expr []
    (assert-eq 0.0  (ep/evaluate "0.0 + 0.0 - 0.0"))
    (assert-eq 0.0  (ep/evaluate "0.0+0.0-0.0"))
    (assert-eq 12.1 (ep/evaluate " 1.2 + 2.2 * 4.0 + 2 - 6.4 / 3.2 + 2.1 "))
    (assert-eq -5.5 (ep/evaluate " 1.2 + -2.2 * 4.0 + 2 - 6.4 / 3.2 + 2.1 "))
    (assert-eq 12.1 (ep/evaluate "1.2+2.2*4.0+2-6.4/3.2+2.1")))


  (test/deftest test-evaluate-float-int-expr []
    (assert-eq 0.0  (ep/evaluate "0.0 + 0 - 0.0"))
    (assert-eq 3.2  (ep/evaluate "1 + 2.2"))
    (assert-eq 3.2  (ep/evaluate "1.2 + 2"))
    (assert-eq -1.1 (ep/evaluate "1 - 2.1"))
    (assert-eq -0.8 (ep/evaluate "1.2 - 2"))
    (assert-eq 2.2  (ep/evaluate "1 * 2.2"))
    (assert-eq 2.4  (ep/evaluate "1.2 * 2"))
    (assert-eq 5.0  (ep/evaluate "10 / 2.0"))
    (assert-eq 5.0  (ep/evaluate "15.0 / 3")))


  (test/deftest test-evaluate-expr-complex-1 []
    (assert-eq 1     (ep/evaluate "(1)"))
    (assert-eq 1     (ep/evaluate "(+1)"))
    (assert-eq -1    (ep/evaluate "(-1)"))
    (assert-eq 1.1   (ep/evaluate "(1.1)"))
    (assert-eq 1.1   (ep/evaluate "(+1.1)"))
    (assert-eq -1.1  (ep/evaluate "(-1.1)"))

    (assert-eq -1    (ep/evaluate "(-1)"))
    (assert-eq -1    (ep/evaluate "-(1)"))
    (assert-eq 1     (ep/evaluate "-(-1)"))
    (assert-eq -1.1  (ep/evaluate "(-1.1)"))
    (assert-eq -1.1  (ep/evaluate "-(1.1)"))
    (assert-eq 1.1   (ep/evaluate "-(-1.1)"))

    (assert-eq 1     (ep/evaluate "((1))"))
    (assert-eq 1     (ep/evaluate "((+1))"))
    (assert-eq -1    (ep/evaluate "((-1))"))
    (assert-eq 1.1   (ep/evaluate "((1.1))"))
    (assert-eq 1.1   (ep/evaluate "((+1.1))"))
    (assert-eq -1.1  (ep/evaluate "((-1.1))"))

    (assert-eq -1    (ep/evaluate "((-1))"))
    (assert-eq -1    (ep/evaluate "(-(1))"))
    (assert-eq -1    (ep/evaluate "-((1))"))
    (assert-eq 1     (ep/evaluate "-((-1))"))
    (assert-eq -1    (ep/evaluate "-(-(-1))"))
    (assert-eq -1.1  (ep/evaluate "((-1.1))"))
    (assert-eq -1.1  (ep/evaluate "(-(1.1))"))
    (assert-eq -1.1  (ep/evaluate "-((1.1))"))
    (assert-eq 1.1   (ep/evaluate "-((-1.1))"))
    (assert-eq -1.1  (ep/evaluate "-(-(-1.1))")))


  (test/deftest test-evaluate-expr-complex-2 []
    (assert-eq 3     (ep/evaluate "(1 + 2)"))
    (assert-eq -1    (ep/evaluate "(1 + -2)"))
    (assert-eq -3    (ep/evaluate "(-1 + -2)"))
    (assert-eq 1     (ep/evaluate "-(1 + -2)"))
    (assert-eq 21    (ep/evaluate "(1 + 2) * (3 + 4)"))
    (assert-eq 11    (ep/evaluate "1 + 2 * 3 + 4"))
    (assert-eq 11    (ep/evaluate "1 + (2 * 3) + 4"))
    (assert-eq 3     (ep/evaluate "(3 + 6) / (2 + 1)"))
    (assert-eq 7     (ep/evaluate "3 + 6 / 2 + 1"))
    (assert-eq 7     (ep/evaluate "3 + (6 / 2) + 1")))


  (test/deftest test-evaluate-error-1 []
    (assert-throws-with-msg :com.github.jlangch.venice.ParseError
                            #"Unexpected token '99' at line: 1 column: 9"
                            (ep/evaluate "(1 + 2) 99")))

  (test/deftest test-evaluate-error-2 []
    (assert-throws-with-msg :com.github.jlangch.venice.ParseError
                            #"Unexpected token '!!' at line: 1 column: 9"
                            (ep/evaluate "(1 + 2) !!")))

  (test/deftest test-evaluate-error-3 []
    (assert-throws-with-msg :com.github.jlangch.venice.ParseError
                            #"Unexpected end of input, Error at line: 1 column: 9"
                            (ep/evaluate "(1 + 2) +")))

  (test/deftest test-evaluate-error-4 []
    (assert-eq (str "Expected end of input, "
                    "Unexpected token '[:lparen \"(\" (1,1)]', "
                    "Unexpected token '[:unknown \"!!\" (1,4)]', "
                    "Unexpected token '[:lparen \"(\" (1,1)]', "
                    "Error at line: 1 column: 1")
               (try
                 (ep/evaluate "(1 !! 2)")
                 (catch :com.github.jlangch.venice.ParseError e (:message e)))))


  (test/deftest test-evaluate-error-5 []
    (assert-eq (str "Expected end of input, "
                    "Unexpected token '[:lparen \"(\" (1,1)]', "
                    "Unexpected end of input, "
                    "Unexpected token '[:lparen \"(\" (1,1)]', "
                    "Error at line: 1 column: 1")
               (try
                 (ep/evaluate "(1 + 2")
                 (catch :com.github.jlangch.venice.ParseError e (:message e)))))


  (test/deftest test-evaluate-error-6 []
    (assert-eq (str "Unexpected token '[:lparen \"(\" (1,11)]', "
                    "Unexpected end of input, "
                    "Error, "
                    "Unexpected token '[:lparen \"(\" (1,11)]', "
                    "Error at line: 1 column: 9")
               (try
                 (ep/evaluate "(1 + 2) * (1 + ")
                 (catch :com.github.jlangch.venice.ParseError e (:message e)))))



  ;; run tests
  (test/run-tests 'parsifal-expr-test))
