;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; JSON Lines

;;;; See: https://jsonlines.org/


(ns jsonl)


(defn
  ^{ :arglists '("(jsonl/write-str val & options)")
     :doc """
          Writes the val to a JSON lines string.

          Options:

          | :decimal-as-double b | If true emit a decimal as double else as \
                                   string. Defaults to false |
          """
     :examples '(
          "(println (jsonl/write-str {:a 100 :b 200}))"
          "(println (jsonl/write-str [{:a 100 :b 200} {:a 101 :b 201} {:a 102 :b 202}]))" )
     :see-also '("jsonl/spit" "jsonl/read-str") }

  write-str [val & options]

  (if (sequential? val)
    (try-with [sw (io/string-writer)]
      (docoll #(println sw (apply json/write-str % options)) (butlast val))
      (print sw (apply json/write-str (last val) options))
      (flush sw)
      @sw)
    (apply json/write-str val options)))


(defn
  ^{ :arglists '("(jsonl/spit out val & options)")
     :doc """
          Spits the JSON Lines converted val to the output out.

          The out may be a:

           * string file path, e.g: \"/temp/foo.json\"
           * `java.io.File`, e.g: `(io/file \"/temp/foo.json\")`
           * `java.nio.Path`
           * `java.io.OutputStream`
           * `java.io.Writer`

          **Note**: The caller is responsible for closing the in stream/writer!

          Options:

          | :decimal-as-double b | If true emit a decimal as double else as \
                                   string. Defaults to false. |
          | :append true/false   | e.g.: `:append true`, defaults to false |
          | :encoding e          | e.g :encoding :utf-8, defaults to :utf-8 |

          `jsonl/spit` supports load paths. See the `loadpath/paths` doc for a
          description of the *load path* feature.
          """
     :examples '(
          """
          (try-with [wr (io/buffered-writer (io/file "data.jsonl"))]
            (jsonl/spit wr [{:a 100 :b 200} {:a 101 :b 201} {:a 102 :b 202}])
            (flush wr))
          """ )
     :see-also '(
          "jsonl/write-str" "jsonl/slurp") }

  spit [out val & options]

  (let [wr (apply io/buffered-writer out options)]
    (if (sequential? val)
      (do
        (docoll #(println wr (apply json/write-str % options)) (butlast val))
        (print wr (apply json/write-str (last val) options)))
      (print wr (apply json/write-str val) options))
    (flush wr)))


(defn
  ^{ :arglists '("(jsonl/read-str s & options)")
     :doc """
          Reads a JSON line string and returns it as a Venice datatype.

          Options:

          | :key-fn fn   | Single argument function called on JSON property names; \
                           return value will replace the property names in the \
                           output. Default is 'identity', use 'keyword' to get \
                           keyword properties. |
          | :value-fn fn | Function to transform values in JSON objects in \
                           the output. For each JSON property, value-fn is called \
                           with two arguments: the property name (transformed by \
                           key-fn) and the value. The return value of value-fn will \
                           replace the value in the output. The default value-fn \
                           returns the value unchanged. |
          | :decimal b   | If true use BigDecimal for decimal numbers instead of \
                           Double. Default is false. |)
          """
     :examples '(
          """
          (let [json (json/write-str {:a 100 :b 200})]
            (jsonl/read-str json :key-fn keyword))
          """,
          """
          (try-with [sw (io/string-writer)]
            (println sw (json/write-str {:a 100 :b 200}))
            (println sw (json/write-str {:a 101 :b 201}))
            (println sw (json/write-str {:a 102 :b 202}))
            (flush sw)
            (let [json @sw]
              (jsonl/read-str json :key-fn keyword)))
          """)
     :see-also '(
          "jsonl/write-str") }

  read-str [s & options]

  (->> (str/split-lines s)
       (map str/trim-to-nil)
       (filter some?)
       (map #(apply json/read-str % options))))


(defn
  ^{ :arglists '("(jsonl/slurp in & options)")
     :doc """
          Slurps a list of JSON line stringsfrom the input and returns it as a
          list of Venice datatypes.

          in may be a:
           * string file path, e.g: \"/temp/foo.json\"
           * bytebuffer
           * `java.io.File`, e.g: `(io/file \"/temp/foo.json\")`
           * `java.io.InputStream`
           * `java.io.Reader`
           * `java.nio.file.Path`

          **Note**: The caller is responsible for closing the in stream/reader!

          Options:

          | :key-fn fn   | Single argument function called on JSON property names; \
                           return value will replace the property names in the \
                           output. Default is 'identity', use 'keyword' to get \
                           keyword properties. |
          | :value-fn fn | Function to transform values in JSON objects in \
                           the output. For each JSON property, value-fn is called \
                           with two arguments: the property name (transformed by \
                           key-fn) and the value. The return value of value-fn will \
                           replace the value in the output. The default value-fn \
                           returns the value unchanged. |
          | :decimal b   | If true use BigDecimal for decimal numbers instead of \
                           Double. Default is false. |)
          | :encoding e  | e.g :encoding :utf-8, defaults to :utf-8 |

          `jsonl/slurp` supports load paths. See the `loadpath/paths` doc for a
          description of the *load path* feature.
          """
     :examples '(
          """
          (let [file (io/file "data.jsonl")]
            (try-with [wr (io/buffered-writer file)]
              (jsonl/spit wr [{:a 100 :b 200} {:a 101 :b 201} {:a 102 :b 202}])
              (flush wr))
            (try-with [rd (io/buffered-reader file)]
              (jsonl/slurp rd :key-fn keyword)))
          """)
     :see-also '(
          "jsonl/read-str") }

  slurp [in & options]

  (let [rd (apply io/buffered-reader in options)]
    (loop [line (read-line rd) data '()]
      (if (nil? line)
        data
        (let [l (str/trim-to-nil line)
              v (if (nil? l) nil (apply json/read-str l options))
              d (if (nil? v) data (conj data v))]
          (recur (read-line rd) d))))))
