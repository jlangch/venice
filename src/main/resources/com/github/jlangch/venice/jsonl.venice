;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; JSON Lines

;;;; See: https://jsonlines.org/


(ns jsonl)


(defn
  ^{ :arglists '("(jsonl/write-str val & options)")
     :doc """
          Writes the value 'val' to a JSON lines string.

          Any reasonable Venice value like string, integer, long, double, decimal,
          boolean, list, vector, set, or map can be passed. Sequences like
          list or vector are converted to multiple JSON lines, one line for
          each value in the sequence. All other types are converted to a single
          JSON line.

          Options:

          | :decimal-as-double b | If true emit a decimal as double else as \
                                   string. Defaults to false |
          """
     :examples '(
          """
          (do
            (load-module :jsonl)
            (println (jsonl/write-str {:a 100 :b 200})))
          """,
          """
          (do
            (load-module :jsonl)
            (println (jsonl/write-str [{:a 100 :b 200}
                                       {:a 101 :b 201}
                                       {:a 102 :b 202}])))
          """ )
     :see-also '("jsonl/spit" "jsonl/read-str")
     :spec { :options { :decimal-as-double [:optional #(boolean? %)] } } }

  write-str [val & options]

  (if (sequential? val)
    (try-with [sw (io/string-writer)]
      (docoll #(println sw (apply json/write-str % options)) (butlast val))
      (print sw (apply json/write-str (last val) options))
      (flush sw)
      @sw)
    (apply json/write-str val options)))


(defn
  ^{ :arglists '("(jsonl/spit out val & options)")
     :doc """
          Spits the JSON Lines converted value 'val' to the output 'out'.

          The 'out' may be a:

           * `java.io.File`, e.g: `(io/file \"/temp/foo.json\")`
           * `java.nio.Path`
           * `java.io.OutputStream`
           * `java.io.Writer`

          **Note**: The caller is responsible for closing the out stream/writer!

          Any reasonable Venice value like string, integer, long, double, decimal,
          boolean, list, vector, set, or map can be passed. Sequences like
          list or vector are converted to multiple JSON lines, one line for
          each value in the sequence. All other types are converted to a single
          JSON line.

          Options:

          | :decimal-as-double b | If true emit a decimal as double else as \
                                   string. Defaults to false. |
          | :append true/false   | e.g.: `:append true`, defaults to false |
          | :encoding e          | e.g :encoding :utf-8, defaults to :utf-8 |

          `jsonl/spit` supports load paths. See the `loadpath/paths` doc for a
          description of the *load path* feature.
          """
     :examples '(
          """
          (do
            (load-module :jsonl)
            (let [file (io/temp-file "data-" ".jsonl")]
              (io/delete-file-on-exit file)
              (try-with [wr (io/buffered-writer file)]
                (jsonl/spit wr [{:a 100 :b 200} {:a 101 :b 201} {:a 102 :b 202}])
                (flush wr))
              ;; print the json lines data
              (println (io/slurp file :encoding :utf-8))))
          """,
          """
          ;; spit a list of json lines (linefeeds are added implicitely )
          (do
            (load-module :jsonl)
            (let [file (io/temp-file "data-" ".jsonl")]
              (io/delete-file-on-exit file)
              (try-with [wr (io/buffered-writer file)]
                (jsonl/spit wr [{"a" 100, "b" 200}
                                {"a" 101, "b" 201}
                                {"a" 102, "b" 202}])
                (flush wr))
                ;; print the json lines data
                (println (io/slurp file :encoding :utf-8))))
          """,
          """
          ;; spit a list of json lines line by line (linefeeds must be added exlicitely)
          (do
            (load-module :jsonl)
            (let [file (io/temp-file "data-" ".jsonl")]
              (io/delete-file-on-exit file)
              (try-with [wr (io/buffered-writer file)]
                (jsonl/spit wr {"a" 100, "b" 200})
                (println wr)
                (jsonl/spit wr {"a" 101, "b" 201})
                (println wr)
                (jsonl/spit wr {"a" 102, "b" 202})
                (flush wr))
              ;; print the json lines data
              (println (io/slurp file :encoding :utf-8))))
          """)
     :see-also '(
          "jsonl/write-str" "jsonl/slurp")
     :spec { :options { :decimal-as-double [:optional #(boolean? %)]
                        :new-line          [:optional #(boolean? %)]
                        :append            [:optional #(boolean? %)]
                        :encoding          [:optional #(keyword? %)] } } }

  spit [out val & options]

  { :pre [(or (io/file? out)
              (instance-of? :java.nio.file.Path out)
              (instance-of? :java.io.OutputStream out)
              (instance-of? :java.io.Writer out))] }

  (let [wr (apply io/buffered-writer out options)
        last-val     (if (sequential? val) (last val) val)
        butlast-vals (if (sequential? val) (butlast val) nil)]
    (when-not (nil? butlast-vals)
      (docoll #(io/print-line wr (apply json/write-str % options)) butlast-vals))
    (when-not (nil? last-val)
      (io/print wr (apply json/write-str last-val options)))
    (flush wr)))


(defn
  ^{ :arglists '("(jsonl/spitln out val & options)")
     :doc """
          Spits the JSON Lines converted value 'val' to the output 'out' and
          adds a new line after the last emitted line. 

          This function is useful when lines are spitted to a stream/writer line 
          by line. 

          The 'out' may be a:

           * `java.io.File`, e.g: `(io/file \"/temp/foo.json\")`
           * `java.nio.Path`
           * `java.io.OutputStream`
           * `java.io.Writer`

          **Note**: The caller is responsible for closing the out stream/writer!

          Any reasonable Venice value like string, integer, long, double, decimal,
          boolean, list, vector, set, or map can be passed. Sequences like
          list or vector are converted to multiple JSON lines, one line for
          each value in the sequence. All other types are converted to a single
          JSON line.

          Options:

          | :decimal-as-double b | If true emit a decimal as double else as \
                                   string. Defaults to false. |
          | :append true/false   | e.g.: `:append true`, defaults to false |
          | :encoding e          | e.g :encoding :utf-8, defaults to :utf-8 |

          `jsonl/spitln` supports load paths. See the `loadpath/paths` doc for a
          description of the *load path* feature.
          """
     :examples '(
          """
          ;; spit a list of json lines line by line
          (do
            (load-module :jsonl)
            (let [file (io/temp-file "data-" ".jsonl")]
              (io/delete-file-on-exit file)
              (try-with [wr (io/buffered-writer file)]
                (jsonl/spitln wr {"a" 100, "b" 200})
                (jsonl/spitln wr {"a" 101, "b" 201})
                (jsonl/spit wr {"a" 102, "b" 202})     ;; last line no LF
                (flush wr))
              ;; print the json lines from the written file
              (println (io/slurp file :encoding :utf-8))))
          """)
     :see-also '(
          "jsonl/write-str" "jsonl/slurp")
     :spec { :options { :decimal-as-double [:optional #(boolean? %)]
                        :append            [:optional #(boolean? %)]
                        :encoding          [:optional #(keyword? %)] } } }

  spitln [out val & options]

  { :pre [(or (io/file? out)
              (instance-of? :java.nio.file.Path out)
              (instance-of? :java.io.OutputStream out)
              (instance-of? :java.io.Writer out))] }

  (let [wr           (apply io/buffered-writer out options)
        last-val     (if (sequential? val) (last val) val)
        butlast-vals (if (sequential? val) (butlast val) nil)]
    (when-not (nil? butlast-vals)
      (docoll #(io/print-line wr (apply json/write-str % options)) butlast-vals))
    (when-not (nil? last-val)
      (io/print wr (apply json/write-str last-val options)))
    (println wr)
    (flush wr)))
  

(defn
  ^{ :arglists '("(jsonl/read-str s & options)")
     :doc """
          Reads a JSON line string 's' and returns it as a Venice data type.

          Options:

          | :key-fn fn   | Single argument function called on JSON property names; \
                           return value will replace the property names in the \
                           output. Default is 'identity', use 'keyword' to get \
                           keyword properties. |
          | :value-fn fn | Function to transform values in JSON objects in \
                           the output. For each JSON property, value-fn is called \
                           with two arguments: the property name (transformed by \
                           key-fn) and the value. The return value of value-fn will \
                           replace the value in the output. The default value-fn \
                           returns the value unchanged. |
          | :decimal b   | If true use BigDecimal for decimal numbers instead of \
                           Double. Default is false. |
          """
     :examples '(
          """
          (do
            (load-module :jsonl)
            (let [json (jsonl/write-str {:a 100 :b 200})]
              (jsonl/read-str json :key-fn keyword)))
          """,
          """
          (do
            (load-module :jsonl)
            (let [json (jsonl/write-str [{:a 100 :b 200} {:a 100 :b 200}])]
              (jsonl/read-str json :key-fn keyword)))
          """,
          """
          (do
            (load-module :jsonl)
            (try-with [sw (io/string-writer)]
              (println sw (jsonl/write-str {:a 100 :b 200}))
              (println sw (jsonl/write-str {:a 101 :b 201}))
              (println sw (jsonl/write-str {:a 102 :b 202}))
              (flush sw)
              (let [json @sw]
                (jsonl/read-str json :key-fn keyword))))
          """)
     :see-also '(
          "jsonl/write-str")
     :spec { :options { :key-fn   [:optional #(fn? %)]
                        :value-fn [:optional #(fn? %)]
                        :decimal  [:optional #(boolean? %)] } } }

  read-str [s & options]

  { :pre [(or (nil? s) (string? s))] }

  (->> (str/split-lines s)
       (map str/trim-to-nil)
       (filter some?)
       (map #(apply json/read-str % options))))


(defn
  ^{ :arglists '("(jsonl/slurp in & options)")
     :doc """
          Slurps a list of JSON line strings from the input 'in' and returns it
          as a list of Venice data types.

          'in' may be a:
           * string
           * bytebuf
           * `java.io.File`, e.g: `(io/file \"/temp/foo.json\")`
           * `java.nio.file.Path`
           * `java.io.InputStream`
           * `java.io.Reader`

          **Note**: The caller is responsible for closing the in stream/reader!

          Options:

          | :key-fn fn    | Single argument function called on JSON property names; \
                            return value will replace the property names in the \
                            output. Default is 'identity', use 'keyword' to get \
                            keyword properties. |
          | :value-fn fn  | Function to transform values in JSON objects in \
                            the output. For each JSON property, value-fn is called \
                            with two arguments: the property name (transformed by \
                            key-fn) and the value. The return value of value-fn will \
                            replace the value in the output. The default value-fn \
                            returns the value unchanged. |
          | :decimal b    | If true use BigDecimal for decimal numbers instead of \
                            Double. Default is false. |
          | :filter-fn fn | Single argument function called on every read value \
                            from a JSON line. If it returns true the value will \
                            be kept otherwise it will be skipped. The filter is \
                            applied after the 'key-fn' and the 'value-fn' have \
                            been applied to the line data value. |
          | :encoding e   | e.g :encoding :utf-8, defaults to :utf-8 |

          `jsonl/slurp` supports load paths. See the `loadpath/paths` doc for a
          description of the *load path* feature.
          """
     :examples '(
          """
          (do
            (load-module :jsonl)
            (let [file (io/temp-file "data-" ".jsonl")]
              (io/delete-file-on-exit file)
              (try-with [wr (io/buffered-writer file)]
                (jsonl/spit wr [{:a 100 :b 200} {:a 101 :b 201} {:a 102 :b 202}])
                (flush wr))
              (try-with [rd (io/buffered-reader file)]
                (jsonl/slurp rd :key-fn keyword))))
          """,
          """
          ;; slurp JSON Lines applying mapping functions and a filter on the lines
          (do
            (load-module :jsonl)
            (let [file (io/temp-file "data-" ".jsonl")
                  now  (time/local-date-time)]
              (io/delete-file-on-exit file)
              (try-with [wr (io/buffered-writer file)]
                (jsonl/spit wr [{:a 100 :b (time/plus now :days 1) :c 10.12M}
                                {:a 101 :b (time/plus now :days 2) :c 20.12M}
                                {:a 100 :b (time/plus now :days 3) :c 30.12M}])
                (flush wr))
              (try-with [rd (io/buffered-reader file)]
                (jsonl/slurp rd :key-fn keyword
                                :value-fn (fn [k v] 
                                            (case k 
                                              :b (time/local-date-time-parse v :iso)
                                              :c (decimal v) 
                                              v))
                                :filter-fn #(= 100 (:a %))))))
          """)
     :see-also '(
          "jsonl/read-str", "jsonl/lazy-seq-slurper")
     :spec { :options { :key-fn     [:optional #(fn? %)]
                        :value-fn   [:optional #(fn? %)]
                        :decimal    [:optional #(boolean? %)]
                        :filter-fn  [:optional #(fn? %)]
                        :encoding   [:optional #(keyword? %)] } } }

  slurp [in & options]

  { :pre [(or (string? in)
              (bytebuf? in)
              (io/file? in)
              (instance-of? :java.nio.file.Path in)
              (instance-of? :java.io.InputStream in)
              (instance-of? :java.io.Reader in))] }

  (let [opts       (apply hash-map options)
        filter-fn  (:filter-fn opts (constantly true))
        rd         (apply io/buffered-reader in options)]
    (loop [line (read-line rd) data '()]
      (if (nil? line)
        data
        (let [v (apply json/read-str (str/trim-to-nil line) options)
              v (if (filter-fn v) v nil)]
          (recur (read-line rd) (if (nil? v) data (conj data v))))))))


  (defn
    ^{ :arglists '("(jsonl/lazy-seq-slurper in & options)")
       :doc """
            Returns a lazy sequence of the parsed JSON line strings from the
            input 'in'.

            'in' may be a:
             * `java.io.InputStream`
             * `java.io.Reader`

            **Note**: The caller is responsible for closing the in stream/reader!

            Options:

            | :key-fn fn    | Single argument function called on JSON property names; \
                              return value will replace the property names in the \
                              output. Default is 'identity', use 'keyword' to get \
                              keyword properties. |
            | :value-fn fn  | Function to transform values in JSON objects in \
                              the output. For each JSON property, value-fn is called \
                              with two arguments: the property name (transformed by \
                              key-fn) and the value. The return value of value-fn will \
                              replace the value in the output. The default value-fn \
                              returns the value unchanged. |
            | :decimal b    | If true use BigDecimal for decimal numbers instead of \
                              Double. Default is false. |
            | :filter-fn fn | Single argument function called on every read value \
                              from a JSON line. If it returns true the value will \
                              be kept otherwise it will be skipped |
            | :encoding e   | e.g :encoding :utf-8, defaults to :utf-8 |

            `jsonl/lazy-seq-slurper` supports load paths. See the `loadpath/paths`
            doc for a description of the *load path* feature.
            """
       :examples '(
            """
            ;; use a lazy sequence to read the JSON lines data
            (do
              (load-module :jsonl)
              (let [file (io/temp-file "data-" ".jsonl")]
                (io/delete-file-on-exit file)
                (try-with [wr (io/buffered-writer file)]
                  (jsonl/spit wr [{:a 100 :b 200} {:a 101 :b 201} {:a 102 :b 202}])
                  (flush wr))
                (try-with [rd (io/buffered-reader file)]
                  (let [slurper (jsonl/lazy-seq-slurper rd :key-fn keyword)]
                    ;; realize the lazy sequence
                    (doall slurper)))))
              """,
            """
            ;; use a transducer to efficiently map and filter the JSON lines data
            (do
              (load-module :jsonl)

              (defn test-data []
                (try-with [sw (io/string-writer)]
                  (println sw (json/write-str {:a 100 :b 200 :c 300}))
                  (println sw (json/write-str {:a 101 :b 201 :c 301}))
                  (println sw (json/write-str {:a 100 :b 202 :c 302}))
                  (flush sw)
                  @sw))

              (def xform (comp (map #(dissoc % :c))
                               (map #(update % :b (fn [x] (+ x 5))))
                               (filter #(= 100 (:a %)))))

              (let [json (test-data)]
                (try-with [rd (io/buffered-reader json)]
                  (let [slurper (jsonl/lazy-seq-slurper rd :key-fn keyword)]
                    ;; transduce the lazy sequence
                    (pr-str (transduce xform conj slurper))))))
            """)
       :see-also '(
            "jsonl/slurp", "jsonl/read-str")
       :spec { :options { :key-fn     [:optional #(fn? %)]
                          :value-fn   [:optional #(fn? %)]
                          :decimal    [:optional #(boolean? %)]
                          :filter-fn  [:optional #(fn? %)]
                          :encoding   [:optional #(keyword? %)] } } }

  lazy-seq-slurper [in & options]

  { :pre [(or (instance-of? :java.io.InputStream in)
              (instance-of? :java.io.Reader in))] }

  (let [opts       (apply hash-map options)
        filter-fn  (:filter-fn opts (constantly true))
        rd         (apply io/buffered-reader in options)
        slurp-fn   (fn []
                     (loop [line (read-line rd)]
                       (if (nil? line)
                          nil
                          (let [v (apply json/read-str (str/trim-to-nil line) options)
                                v (if (filter-fn v) v nil)]
                            (if (nil? line) (recur (read-line rd)) v)))))]
    (lazy-seq slurp-fn)))
