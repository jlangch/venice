;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice benchmarking


(ns benchmark)

(load-module :xchart)

(defn remove-outliers [samples low high]
  (filter #(and (>= %1 low) (<= %1 high)) samples))


(defn chart-vert-line [name x y-max]
  { name { :x [x x]
           :y [0 y-max]
           :style { :render-style :line
                    :marker-type :none }}})


(defn create-chart [data median outlier-low outlier-high params]
  (let [y-max (apply max (:y data))
        median-line (chart-vert-line "median" median y-max)
        outlier-low-line (chart-vert-line "outlier low" outlier-low y-max)
        outlier-high-line (chart-vert-line "outlier high" outlier-high y-max)
        cdata { "samples" data }
        cdata (if median (merge cdata median-line) cdata)
        cdata (if outlier-low (merge cdata outlier-low-line) cdata)
        cdata (if outlier-high (merge cdata outlier-high-line) cdata)]
    (xchart/write-to-file
      (xchart/xy-chart
        cdata
        { :title (:title params)
          :render-style :line   ; :step
          :x-axis { :title (:x-axis-title params)
                    :decimal-pattern (:x-axis-decimal-pattern params)
                    :tick-mark-spacing-hint 10
                    :logarithmic? (:x-axis-logarithmic? params false) }
          :y-axis { :title (:y-axis-title params)
                    :decimal-pattern "#0"
                    :logarithmic? (:y-axis-logarithmic? params false) }
          :theme :xchart } )
      :png ; write as PNG
      300  ; render with 300 dpi
      (io/file "benchmark.png"))))


(defn chart [stats steps median? outlier?]
  (let [samples  (:samples stats)
        sorted   (sort samples)
        min      (first sorted)
        max      (last sorted)
        diff     (- max min)
        step-width (/ diff steps)
        quantize (fn [x] (-> x (- min) (/ step-width) (floor) (* step-width) (+ min) (long)))
        data     (reduce
                   (fn [m x] (let [n (quantize x)]
                                (assoc m n (inc (get m n 0)))))
                   (sorted-map)
                   samples)
        x-scale  (cond (< min 1000) 1.0
                       (< min 1000000) 1000.0
                       (< min 1000000000) 1000000.0
                       :else 1000000000.0)
        x-unit   (cond (< min 1000) "ns"
                       (< min 1000000) "Âµs"
                       (< min 1000000000) "ms"
                       :else "s")
        x-format (cond (< min 1000) "#0" :else "#0.00")]
     (printf "Quantization step width: %s (%d steps)%n"
             (format-nano-time step-width)
             steps)
     (create-chart
       { :x (map #(/ %1 x-scale) (keys data))
         :y (vals data) }
       (if median? (/ (:median stats) x-scale) nil)
       (if outlier? (/ (:outlier-low stats) x-scale) nil)
       (if outlier? (/ (:outlier-high stats) x-scale) nil)
       { :title (str "Benchmark (" (count samples) " samples)")
         :x-axis-title x-unit
         :y-axis-title "#"
         :x-axis-decimal-pattern x-format } )
     (println "Saved chart to 'benchmark.png'.")))


(defn stats [samples]
  (let [q   (math/quartiles samples)
        q1  (first q)
        q2  (second q)
        q3  (third q)
        iqr (- q3 q1)
        outlier-low     (- q1 (long (* 3 iqr)))
        outlier-high    (+ q3 (long (* 3 iqr)))
        cleaned-samples (remove-outliers samples outlier-low outlier-high)]
     { :samples samples
       :q1 q1
       :q2 q2
       :q3 q3
       :median q2
       :iqr iqr
       :outlier-low outlier-low
       :outlier-high outlier-high
       :lower-quantile (math/quantile 0.025 samples)
       :higher-quantile (math/quantile 0.975 samples)
       :outliers-cnt (- (count samples) (count cleaned-samples))
       :standard-deviation (math/standard-deviation :sample cleaned-samples) }))


(defn print-stats [stats]
  (let [samples    (count (:samples stats))
        mean       (format-nano-time (:q2 stats))
        std-dev    (format-nano-time (:standard-deviation stats))
        l-quartile (format-nano-time (:q1 stats))
        u-quartile (format-nano-time (:q3 stats))
        l-quantile (format-nano-time (:lower-quantile stats))
        u-quantile (format-nano-time (:higher-quantile stats))
        outliers   (:outliers-cnt stats)
        l-outliers (format-nano-time (max 0 (:outlier-low stats)))
        u-outliers (format-nano-time (:outlier-high stats))]

    (printf "                      Samples : %10d%n" samples)
    (printf "          Execution time mean : %10s%n" mean)
    (printf " Execution time std-deviation : %10s%n" std-dev)
    (printf "Execution time lower quartile : %10s (25%%)%n" l-quartile)
    (printf "Execution time upper quartile : %10s (75%%)%n" u-quartile)
    (printf "Execution time lower quantile : %10s (2.5%%)%n" l-quantile)
    (printf "Execution time upper quantile : %10s (97.5%%)%n" u-quantile)
    (printf "                 Outliers low : %10s%n" l-outliers)
    (printf "                Outliers high : %10s%n" u-outliers)
    (printf "                     Outliers : %10d%n" outliers)))


(defmacro
   ^{ :arglists '("(benchmark expr warmup-iterations iterations & options)")
      :doc """
           Benchmarks the given expression.

           *Note:* All macros in the expression are expanded before running
           running the benchmark phases.

           Runs the benchmark in 4 phases:

              1. Run the expression in a warm-up phase to allow the
                 JIT compiler to do optimizations
              2. Run the garbage collector to isolate timings from
                 GC state prior to testing
              3. Runs the expression benchmark
              4. Analyzes and prints the benchmark statistics

           Options:

            | :chart b   | If true generates a chart and saves it to 'benchmark.png'. Defaults to false. |
            | :steps n   | the number of steps for the quantization, defaults to 100 |
            | :median b  | show the median value in the chart {true/false}, defaults to false |
            | :outlier b | show the outlier range in the chart {true/false}, defaults to false |
            | :gc n      | the number of GC runs |
           """
      :examples '(
        """
        (do
          (load-module :benchmark ['benchmark :as 'b])

          (b/benchmark (+ 1 2) 120000 10000)

          (b/benchmark (+ 1 2) 120000 10000 :chart true :median true)

          (b/benchmark (+ 1 2) 120000 10000 :chart true :outlier true)

          (b/benchmark (+ 1 2) 120000 10000 :chart true :steps 100))
        """) }

   benchmark/benchmark [expr warmup-iterations iterations & options]

   (let [opts       (apply hash-map options)
         chart?     (:chart opts false)
         median?    (:median opts false)
         outlier?   (:outlier opts false)
         steps      (:steps opts 100)
         gc-runs    (:gc opts 2)
         status-fn  (fn [s] (println s))]
     `(do
        (let [samples# (dobench ~warmup-iterations ~gc-runs ~iterations ~expr ~status-fn)
              _        (println "Analyzing...")
              stats#   (benchmark/stats samples#)]
          (benchmark/print-stats stats#)
          (when ~chart?
            (println "Generating chart...")
            (benchmark/chart stats# ~steps ~median? ~outlier?))))))
