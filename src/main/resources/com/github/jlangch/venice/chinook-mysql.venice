;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Chinook database data set for MySQL

;;;; See:  https://github.com/lerocha/chinook-database



(ns chinook-mysql)

(load-module :jdbc-core ['jdbc-core :as 'jdbc])
(load-module :jdbc-mysql ['jdbc-mysql :as 'jdbp])



(defonce data "https://github.com/lerocha/chinook-database/blob/master/ChinookDatabase/DataSources/Chinook_MySql_AutoIncrementPKs.sql")

(defonce data-model "https://github.com/lerocha/chinook-database/tree/master#data-model")

(defonce database "Chinook_AutoIncrement")


(defn 
  ^{ :arglists '(
          "(show-data-model)" )
     :doc """
          Opens a browser to show the 
          [Chinook data model](https://github.com/lerocha/chinook-database/tree/master#data-model) 
          """
     :examples '(
          """
          (do
            (load-module :chinook-mysql ['chinook-mysql :as 'chinook])
            (chinook/show-data-model))
          """)
     :see-also '(
          "chinook-mysql/show-data"
          "chinook-mysql/download-data"
          "chinook-mysql/load-data" ) }

  show-data-model []

  (sh/open data-model))


(defn 
  ^{ :arglists '(
          "(show-data)" )
     :doc """
          Opens a browser to show the 
          [Chinook data](https://raw.githubusercontent.com/lerocha/chinook-database/master/ChinookDatabase/DataSources/Chinook_MySql_AutoIncrementPKs.sql) 
          """
     :examples '(
          """
          (do
            (load-module :chinook-mysql ['chinook-mysql :as 'chinook])
            (chinook/show-data))
          """)
     :see-also '(
          "chinook-mysql/show-data-model"
          "chinook-mysql/download-data"
          "chinook-mysql/load-data" ) }

  show-data []

  (sh/open data))


(defn 
  ^{ :arglists '(
          "(download-data)" )
     :doc """
          Download the Chinook dataset for mysql. 

          The data set is downloaded from [GitHub/lerocha](https://github.com/lerocha/chinook-database)  

          The data set is published under the 
          [License](https://github.com/lerocha/chinook-database/blob/master/LICENSE.md)        
          """
     :examples '(
          """
          (do
            (load-module :chinook-mysql ['chinook-mysql :as 'chinook])
            (chinook/download-data))
          """)
     :see-also '(
          "chinook-mysql/show-data-model"
          "chinook-mysql/load-data" ) }

  download-data []

  (io/download data :binary false :encoding :utf-8))


(defn 
  ^{ :arglists '(
          "(load-data)" )
     :doc """
          Load the Chinook dataset to a mysql database. 

          The data set is loaded from [GitHub/lerocha](https://github.com/lerocha/chinook-database)

          [Data Model](https://github.com/lerocha/chinook-database/tree/master#data-model) 
          published under the 
          [License](https://github.com/lerocha/chinook-database/blob/master/LICENSE.md)

          The Chinook sample database has 11 tables as follows:

          | [![width: 15%]] | [![width: 85%]] |
          | Employees       | stores employee data such as id, last name, first name, \
                              etc. It also has a field named ReportsTo to specify who \
                              reports to whom |
          | Customers       | stores customer data |
          | Invoices        | stores invoice header data |
          | InvoiceItems    | stores the invoice line items data |
          | Artists         | stores artist data. It is a simple table that contains \
                              the id and name |
          | Albums          | stores data about a list of tracks. Each album \
                              belongs to one artist. However, one artist may have \
                              multiple albums |
          | MediaTypes      | stores media types such as MPEG audio and AAC \
                              audio files |
          | Genres          | stores music types such as rock, jazz, metal, etc. |
          | Tracks          | stores the data of songs. Each track belongs to one \
                              album |
          | Playlists       | stores data about playlists. Each playlist contains \
                              a list of tracks. Each track may belong to multiple \
                              playlists. The relationship between the playlists and \
                              tracks tables is many-to-many. The playlist_track \
                              table is used to reflect this relationship |
          | PlaylistTrack   | reflect the many-to-many relationship between playlist \
                              and tracks |

          Start the mysql docker container:

          ```
          (do
            (load-module :jdbc-mysql ['jdbc-mysql :as 'jdbp])
            (jdbp/start "mysql" "8.3.0" 3306 "./mysql-storage" "mysql" "mysql"))
          ```

          *Note: The storage directory (e.g. "./mysql-storage") must exist!*
          """
     :examples '(
          """
          (do
            (load-module :chinook-mysql ['chinook-mysql :as 'chinook])
            (chinook/load-data "localhost" 3306 "mysql" "mysql"))
          """,
          """
          (do
            (load-module :chinook-mysql ['chinook-mysql :as 'chinook])
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-mysql ['jdbc-mysql :as 'jdbm])
           
            (try-with [conn (jdbm/create-connection "localhost" 
                                                    3306 
                                                    chinook/database 
                                                    "mysql" 
                                                    "mysql")]
              (-> (jdbc/execute-query conn "SELECT * FROM album WHERE title LIKE '%Mozart%'")
                  (jdbc/print-query-result))))
          """)
     :see-also '(
          "chinook-mysql/show-data-model"
          "chinook-mysql/download-data" ) }

  load-data [host port user password]

  (println "Downloading data from \"https://github.com/lerocha/chinook-database\"...")
  (let [sql (download-data)]
    (println "Download finished.")

    ;; load the data
    (try-with [conn (jdbm/create-connection host port database user password)
               st   (jdbc/create-statement conn)]
      (jdbc/execute st sql)
      (println "Data loaded into new database."))))


