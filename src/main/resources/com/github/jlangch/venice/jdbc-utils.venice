;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; JDBC Utilities
;;;;
;;;; See: 
;;;; https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html


(ns jdbc-utils)


(import :java.sql.DriverManager)
(import :java.sql.Statement)

(import :java.util.Properties)



;; -----------------------------------------------------------------------------
;; PostgreSQL connections
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(jdbc-utils/create-postgresql-connection user password)"
          "(jdbc-utils/create-postgresql-connection host port user password)"
          "(jdbc-utils/create-postgresql-connection host port database user password)"
          "(jdbc-utils/create-postgresql-connection host port database user password properties)" )
     :doc """
          Creates a PostgreSQL connection. 
        
          Arguments:

          | [![width: 15%]] | [![width: 85%]] |
          | user        | A mandatory ser name |
          | password    | A mandatory password |
          | host        | An optional host. Defaults to "localhost" |
          | port        | An optional port. Defaults to 5432 |
          | database    | A mandatory database name |
          | properties  | Optional properties (a map). Â¶\
                          E.g.: { "ssl" "true", "options" "-c statement_timeout=90000" } |
          """
     :examples '(
          """
          (do
            (load-module :jdbc-utils ['jdbc-utils :as 'ju])
           
            (try-with [conn (ju/create-postgresql-connection "pg" "pg" "test")
                       st   (. conn :createStatement)
                       rs   (. st :executeQuery "SELECT * FROM mytable WHERE columnfoo = 500")]
              (loop []
                (when (. rs :next) (println (. rs :getString 1))))))
          """) }

  create-postgresql-connection 

  ([user password]
    (assert (string? user))
    (assert (string? password))
    (let [url "jdbc:postgresql:/"]
      (. :DriverManager :getConnection url user (or password ""))))

  ([host port user password]
    (assert (string? host))
    (assert (or (int? port) (long? port)))
    (assert (string? user))
    (assert (string? password))
    (let [url "jdbc:postgresql://~{host}:~(long port)/"]
      (. :DriverManager :getConnection url user (or password ""))))

  ([host port database user password]
    (assert (string? host))
    (assert (or (int? port) (long? port)))
    (assert (string? database))
    (assert (string? user))
    (assert (string? password))
    (let [url "jdbc:postgresql://~{host}:~(long port)/~{database}"]
      (. :DriverManager :getConnection url user (or password ""))))

  ([host port database user password properties]
    (assert (string? host))
    (assert (or (int? port) (long? port)))
    (assert (string? database))
    (assert (string? user))
    (assert (string? password))
    (assert (map? properties))
    (assert (every? string? (keys properties)))
    (assert (every? string? (vals properties)))
    (let [url "jdbc:postgresql://~{host}:~(long port)/~{database}"
          props  (. :Properties :new)]
      (. props :setProperty "user" user)
      (. props :setProperty "password" (or password ""))
      (doseq [[n v] (seq properties)] (. props :setProperty n v))
      (. :DriverManager :getConnection url props))))

 



;; -----------------------------------------------------------------------------
;; Simple JDBC helpers (Venice does not have a JDBC yet)
;; -----------------------------------------------------------------------------

(defn create-statement [conn]
   (. conn :createStatement))


(defn execute [stmt sql]
  (. stmt :execute sql))


(defn execute-query [stmt sql]
  (let [rs         (. stmt :executeQuery sql)
        meta-data  (. rs :getMetaData)
        col-count  (. meta-data :getColumnCount)]
    (loop [rs rs, rows []]
      (if (. rs :next)
        (recur rs (conj rows (row-names rs col-count)))
        { :names row-names, :rows rows}))))
 

(defn execute-update [stmt sql]
  (. stmt :execute sql))


(defn row-names [rs]
  (let [rs         (. stmt :executeQuery sql)
        meta-data  (. rs :getMetaData)
        col-count  (. meta-data :getColumnCount)]
  (loop [names [], col 0]
    (if (< count col-count)
      (let [name (. meta-data :getColumnName col)]
        (recur (conj names name) (inc col)))
        names))))


(defn row-values [rs col-count]
  (loop [row [], col 0]
    (if (< count col-count)
      (let [val (map-value (. rs :getObject col))]  
        (recur (conj row val) (inc col)))
        row)))


(defn- map-value [val]
  (cond 
     (sql-date? val)  (. val :toLocalDateTime)
     :else            val))


(defn- sql-date? [val]
  (instance-of? :java.sql.Date val))




;; -----------------------------------------------------------------------------
;; Test
;; -----------------------------------------------------------------------------

(defn test []
  (let [url "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE"]
    (println "Testing: " url)
    (try-with [conn (create-connection url "sa" "")
              stmt (create-statement conn)]
      (println "Opened database connection.")
      (execute stmt "CREATE TABLE IF NOT EXISTS TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))")
      (execute stmt "INSERT INTO TEST VALUES(1, 'Hello')")
      (println "Data inserted."))))


