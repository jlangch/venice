;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice component module


(ns component)


(defprotocol
  ^{ :doc """
          Defines a protocol for components.

          Definition:

          ```
          (defprotocol Component
            (start [component] component)
            (stop [component] component))
          ```

          Function `start`:¶
          Begins operation of this component. Synchronous, does not return
          until the component is started. Returns an updated version of this
          component.

          Function `stop`:¶
          Ceases operation of this component. Synchronous, does not return
          until the component is stopped. Returns an updated version of this
          component.
          """ }

  Component

  (start [component] component)
  (stop [component] component))


(deftype :system [name         :string
                  components   :map
                  dependencies :dag/dag]
  Component
    (start [system] (start-system system))
    (stop [system] (stop-system system)))


(deftype :component-info [id          :keyword
                          system-name :string
                          components  :map]
  component/Component
    (start [this] this)
    (stop [this] this))


(deftype :component-ex [message       :string
                        reason        :keyword
                        component-key :any
                        system        :system
                        cause         :com.github.jlangch.venice.VncException?])


(defn
  ^{ :arglists '("(system-map name keyval*)")
     :doc """
          Returns a system constructed of components given as key/value pairs.
          The 'key' is a `keyword` (the component's id) referencing the component
          given as 'value'.¶
          The system has default implementations of the Lifecycle 'start' and
          'stop' methods which recursively starts/stops all components in the
          system.

          Note:¶
          `system-map` just creates a raw system without any dependencies
          between the components. Use `system-using` after creating the system
          map to establish the dependencies.
          """
     :examples '(
          """
          (do
            (load-module :component ['component :as 'c])

            (deftype :server [port :long]
               c/Component
                 (start [this] (println "server started") this)
                 (stop [this] (println "server stopped") this))

            (deftype :database [user       :string
                                password   :string]
               c/Component
                 (start [this] (println "database started") this)
                 (stop [this] (println "database stopped") this))

            (c/system-map
              "test"
              :server (server. 4600)
              :store (database. "foo" "123"))

            nil)
          """ )
     :see-also '( "component/system-using" ) }

  system-map [name & keyvals]

  (when-not (even? (count keyvals))
    (throw (ex :VncException
               """
               Function 'component/system' requires an even number of component
               keyvals!
               """)))
  (system. name (apply ordered-map keyvals) (dag/dag)))


(defn
  ^{ :arglists '("(system-using system dependency-map)")
     :doc """
          Associates a component dependency graph with the 'system' that has
          been created through a call to `system-map`.
          'dependency-map' is a map of keys to maps or vectors specifying the
          the dependencies of the component at that key in the system.

          Throws an exception if a component dependency circle is detected.

          The system is started and stopped calling the lifecycle `start` or
          `stop` method on the system component.

          Upon succesfully starting a component the flag {:started true} is
          added to the component's meta data. It's up to the components
          lifecycle `start` method to decide what to do with multiple start
          requests. The lifecycle `start` method can for instance simply return
          the unaltered component if it has already been started.

          Upon succesfully stopping a component the flag {:started false} is
          added to the component's meta data. It's up to the components
          lifecycle `stop` method to decide what to do with multiple stop
          requests. The lifecycle `stop` method can for instance simply return
          the unaltered component if it has not been started or has already been
          stopped.
          """
     :examples '(
          """
          (do
            (load-module :component ['component :as 'c])

            (deftype :server [port :long]
               c/Component
                 (start [this]
                   (let [store1 (-> (c/dep this :store1) :name)
                         store2 (-> (c/dep this :store2) :name)]
                     (println "server started. using the stores" store1 "," store2))
                   this)
                 (stop [this]
                   (println "server stopped")
                   this))

            (deftype :database [name       :string
                                user       :string
                                password   :string]
               c/Component
                 (start [this]
                   (println "database" (:name this) "started")
                   this)
                 (stop [this]
                   (println "database" (:name this) "stopped")
                   this))

            (defn create-system []
              (-> (c/system-map
                    "test"
                    :server (server. 4600)
                    :store1 (database. "store1" "foo" "123")
                    :store2 (database. "store2" "foo" "123"))
                  (c/system-using {:server [:store1 :store2]})))

            (defn start []
              (-> (create-system)
                  (c/start)))

            (let [system (start)
                  server (-> system :components :server)]
              ; access server component
              (println "Accessing the system...")
              (c/stop system))

            nil)
          """ )
     :see-also '( "component/system-map" ) }

  system-using [system dependency-map]

  (let [deps (reduce-kv (fn [dag_ k v]
                          (if (or (empty? v) (nil? v))
                            (dag/add-nodes dag_ k)
                            (->> (interleave (repeat k) v)
                                 (partition 2)
                                 (apply dag/add-edges dag_))))
                        (dag/dag)
                        dependency-map)]
    (assoc system :dependencies deps)))


(defn
  ^{ :arglists '("(started? c)")
     :doc """
          Returns `true` if the component 'c' is marked as being started else
          `false`.
          """ }

  started? [c]

  (:started (meta c) false))


(defn
  ^{ :arglists '("(stopped? c)")
     :doc """
          Returns `true` if the component 'c' is marked as being stopped else
          `false`.
          """ }

  stopped? [c]

  (not (started? c)))


(defn
  ^{ :arglists '("(deps c)")
     :doc """
          Returns the dependencies of the component 'c' or `nil` if there aren't
          any dependencies.
          """
     :examples '(
          """
          (do
            (load-module :component ['component :as 'c])

            (deftype :server []
               c/Component
                 (start [this] (println "Dependencies: " (c/deps this)) this)
                 (stop [this] this))

            (deftype :database []
               c/Component
                 (start [this] this)
                 (stop [this] this))

            (defn create-system []
              (-> (c/system-map
                    "test"
                    :server (server. )
                    :store (database. ))
                  (c/system-using {:server [:store]})))

            (-> (create-system)
                (c/start)
                (c/stop))

            nil)
          """)
     :see-also '("component/dep", "component/id")}

  deps [c]

  (if (= (type c) :component/system)
    (get c :components)
    (get (meta c) :dependencies)))


(defn
  ^{ :arglists '("(dep c k)")
     :doc """
          Returns a dependency given by its key 'k' from the component 'c'
          dependencies.
          """
     :examples '(
          """
          (do
            (load-module :component ['component :as 'c])

            (deftype :server []
               c/Component
                 (start [this] (println "Store: " (c/dep this :store)) this)
                 (stop [this] this))

            (deftype :database []
               c/Component
                 (start [this] this)
                 (stop [this] this))

            (defn create-system []
              (-> (c/system-map
                    "test"
                    :server (server. )
                    :store (database. ))
                  (c/system-using {:server [:store]})))

            (-> (create-system)
                (c/start)
                (c/stop))

            nil)
          """)
     :see-also '("component/deps", "component/id")}

  dep [c k]

  (get (deps c) k))


(defn
  ^{ :arglists '("(id c)")
     :doc "Returns id of the component 'c'."
     :examples '(
          """
          (do
            (load-module :component ['component :as 'c])

            (deftype :server []
               c/Component
                 (start [this] (println "ID: " (c/id this)) this)
                 (stop [this] this))

            (defn create-system []
              (-> (c/system-map
                    "test"
                    :server (server. ))
                  (c/system-using {:server []})))

            (-> (create-system)
                (c/start)
                (c/stop))

            nil)
          """)
     :see-also '("component/dep", "component/deps")}

  id [c]

  (get (dep c :component-info) :id))


(defn-
  ^{ :arglists '("(start-system system)")
     :doc """
          Recursively starts the components in the system in dependency order.
          """ }

  start-system [system]

  (let [graph      (:dependencies system)
        components (:components system)]
    (->> (reduce (fn [components key]
                   (assoc components
                          key
                          (let [dep-keys (dag/direct-children graph key)]
                            (-> (get-component components key system)
                                (add-missing-status)
                                (add-component-dependencies
                                    (get-component-dependency-map key
                                                                  system
                                                                  components
                                                                  dep-keys))
                                (start-component system key)))))
                 components
                 (reverse (dag/topological-sort graph)))
         (assoc system :components))))


(defn-
  ^{ :arglists '("(stop-system system)")
     :doc """
          Recursively stops the components in the system in dependency order.
          """ }

  stop-system [system]

  (let [graph      (:dependencies system)
        components (:components system)]
    (->> (reduce (fn [components key]
                   (assoc components key
                          (-> (get-component components key system)
                              (stop-component system key)
                              (remove-component-dependencies))))
                 components
                 (dag/topological-sort graph))
         (assoc system :components))))


(defn- get-component-dependency-map [key system components dep-keys]
  (assoc (zipmap dep-keys
                 (map #(get-dependency components % system) dep-keys))
         :component-info
         (component-info. key (:name system) {})))


(defn- get-dependency [components key system]
 (let [component (get components key :not-found)]
   (when (nil? component)
     (throw (ex :VncException
                """
                Component ~{key} was nil in system '~(:name system)'; maybe
                it returned nil from start or stop!
                """)))
   (when (= :not-found component)
     (throw (ex :VncException
                "Missing dependency ~{key} in system '~(:name system)'!")))
   component))


(defn- get-component [components key system]
  (let [component (get components key :not-found)]
    (when (nil? component)
      (throw (ex :VncException
                 """
                 Component ~{key} was nil in system '~(:name system)'; maybe
                 it returned nil from start or stop!
                 """)))
    (when (= :not-found component)
      (throw (ex :VncException
                 "Missing component ~{key} in system '~(:name system)'!")))
    component))


(defn- start-component [component system key]
  (try
    (if (extends? (type component) Component)
      (-> (start component) (mark-as-started))
      (mark-as-started component))
    (catch :VncException e
           (throw (ex :VncException
                      "Failed to start component ~{key} in system '~(:name system)'!"
                      e)))))


(defn- stop-component [component system key]
  (try
    (if (extends? (type component) Component)
      (-> (stop component) (mark-as-stopped))
      (mark-as-stopped component))
    (catch :VncException e
           (throw (ex :VncException
                      "Failed to stop component ~{key} in system '~(:name system)'!"
                      e)))))


(defn- add-component-dependencies [component dependency-map]
  (vary-meta component assoc :dependencies dependency-map))


(defn- remove-component-dependencies [component]
  (vary-meta component dissoc :dependencies))


(defn- mark-as-started [component]
  (vary-meta component assoc :started true))


(defn- mark-as-stopped [component]
  (vary-meta component assoc :started false))


(defn- add-missing-status [component]
  (if (nil? (:started (meta component)))
    (mark-as-stopped component)
    component))
