;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Tomcat

;;;; start an embedded Tomcat server:
;;;;   (load-module :tomcat ['tomcat :as 'tc])
;;;;   (tc/start (tc/hello-world-servlet) {:await? false})
;;;;

;;;; Install Tomcat 3rd party libraries:
;;;;
;;;;   (load-module :tomcat-install)
;;;;   (tomcat-install/install :dir (repl/libs-dir) :silent false)


(ns tomcat)


(import :com.github.jlangch.venice.util.servlet.IVeniceServlet
        :com.github.jlangch.venice.util.servlet.VeniceServlet
        :jakarta.servlet.MultipartConfigElement
        :org.apache.catalina.startup.Tomcat
        :org.apache.catalina.core.JreMemoryLeakPreventionListener
        :org.apache.catalina.core.StandardThreadExecutor
        :org.apache.catalina.connector.Connector
        :org.apache.catalina.LifecycleException
        :org.apache.catalina.Server.Service
        :org.apache.coyote.AbstractProtocol
        :org.apache.coyote.http11.Http11NioProtocol
        :org.apache.tomcat.util.net.SSLHostConfig)


(defonce default-http-port 8080)
(defonce default-https-port 8443)
(defonce default-base-dir ".")
(defonce default-context-path "") ; root
(defonce default-context-doc-base ".")
(defonce http-connector "org.apache.coyote.http11.Http11NioProtocol")
(defonce session-id "JSESSIONID")


(def https-ciphers
  (str "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:"
       "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:"
       "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:"
       "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"))


;; ---------------------------------------------------------------------------
;; check Tomcat libs are available
;; ---------------------------------------------------------------------------

(defn check-required-libs []
  (when-not (exists-class? :org.apache.catalina.startup.Tomcat)
    (throw (ex :VncException
               """
               The Tomcat libraries are not on the classpath!

               required Tomcat 10.0.x (Java 8):
                 tomcat-embed-core-10.0.27.jar
                 jakarta.annotation-api:2.1.1.jar

               required Tomcat 10.1.x (Java 11+):
                 tomcat-embed-core-10.1.1.jar
                 jakarta.annotation-api:2.1.1.jar
               """))))


;; ---------------------------------------------------------------------------
;; Tomcat functions
;; ---------------------------------------------------------------------------

(defn- create-executor [options]
  (let [executor (. :StandardThreadExecutor :new)]
    (doto executor
      (. :setName (:executor-name options "tc-executor"))
      (. :setNamePrefix (str (:executor-name options "tc-executor") "-"))
      (. :setMaxThreads (:max-threads options 200))
      (. :setMinSpareThreads (:min-spare-threads options 25))
      (. :setMaxIdleTime (:max-idle-time options 60000)))))


(defn- create-ssl-host-config [options]
  (let [ssl-host-config (. :SSLHostConfig :new)]
    (doto ssl-host-config
      (. :setHostName (:tls-hostname options "_default_"))
      (. :setCertificateKeystoreFile (:keystore options nil))
      (. :setCertificateKeystorePassword (:key-password options nil))
      (. :setCiphers (:tls-ciphers options tomcat/https-ciphers))
      (. :setSslProtocol (:tls-protocol options "TLSv1.2")))
    ssl-host-config))


(defmacro create-executored-connector [connector-generator executor options]
  `(let [connector# (~connector-generator ~options)]
     (. (. connector# :getProtocolHandler) :setExecutor ~executor)
     connector#))


(defn- create-http-connector [options]
  (let [connector (. :Connector :new tomcat/http-connector)]
    (. connector :setPort (:port options tomcat/default-http-port))
    (. connector :setMaxPostSize (:max-post-size options 2097152))
    (when (:https? options false)
      (. connector :setRedirectPort (:https-port options tomcat/default-https-port)))
    connector))


(defn- create-https-connector [options]
  (let [connector (. :Connector :new tomcat/http-connector)
        ssl-config (tomcat/create-ssl-host-config options)
        protocol-handler (. connector :getProtocolHandler)]
    (doto connector
      (. :setScheme "https")
      (. :setSecure true)
      (. :addSslHostConfig ssl-config)
      (. :setPort (:https-port options tomcat/default-https-port)))
    (. protocol-handler :setSSLEnabled  true)
    connector))


(defmacro create-executored-connectors [body service options]
  `(let [executor# (tomcat/create-executor ~options)]
     (. ~service :addExecutor executor#)
     (~body ~service ~options executor#)
     ~service))


(defmacro create-connector-fn [create-fn service options & executor]
  `(. ~service :addConnector
               (if (:executor? ~options true)
                 (tomcat/create-executored-connector ~create-fn
                                                     (first ~@executor)
                                                     ~options)
                 (~create-fn ~options))))


(defn- create-connector [service options & executor]
  (when (:http? options true)
    (tomcat/create-connector-fn tomcat/create-http-connector service options executor))
  (when (:https? options false)
    (tomcat/create-connector-fn tomcat/create-https-connector service options executor))
  service)


(defn- create-server [options]
  (let [base-dir      (io/file-canonical (:base-dir options tomcat/default-base-dir))
        resources-dir (io/file base-dir "resources") ]
    (when-not (io/exists-dir? base-dir)
      (throw (ex :VncException
                 """
                 The Tomcat's configured base directory ~{base-dir} does not \
                 exist! Please create it before starting the Tomcat server.
                 """)))
    (when-not (io/exists-dir? resources-dir)
      (io/mkdir resources-dir))

    (println "Tomcat uses the base directory: ~{base-dir}")
    (println "            ... work directory: ~{base-dir}/work")
    (println "            ... app base directory: ~{resources-dir}")

    (let [tomcat  (doto (. :Tomcat :new)
                        (. :setBaseDir (io/file-path base-dir)))
          service (. tomcat :getService)]
      (if (:executor? options true)
        (tomcat/create-executored-connectors tomcat/create-connector service options)
        (tomcat/create-connector service options))
      (. (. tomcat :getServer) :addLifecycleListener (. :JreMemoryLeakPreventionListener :new))
      (. (. tomcat :getHost) :setAppBase  "resources")
    tomcat)))


(defn- create-multipart-config [file-upload-opts]
  (let [location (:location file-upload-opts)]
    (when (nil? location)
      (throw (ex :VncException
                 "The file upload directory has not been configured for the multi-part servlet!")))
    (when-not (io/exists-dir? location)
      (throw (ex :VncException
                 "The file upload directory ~{location} does not exist!")))
    (. :MultipartConfigElement :new
                               location
                               (long (:max-file-size file-upload-opts -1))
                               (long (:max-request-size file-upload-opts -1))
                               (int (:file-size-threshold file-upload-opts 0I)))))


(defn- add-servlet [server context ctx-path
                    servlet servlet-name servlet-mapping]
  (. server :addServlet ctx-path servlet-name servlet)
  (. context :addServletMappingDecoded servlet-mapping servlet-name))


(defn- add-fileupload-servlet [server context ctx-path
                               servlet servlet-name servlet-mapping
                               upload-opts]
  (let [wrapper (. server :addServlet ctx-path servlet-name servlet)]
    (. wrapper :setMultipartConfigElement (create-multipart-config upload-opts)))
  (. context :addServletMappingDecoded servlet-mapping servlet-name))


(defn process-upload-files [req upload-dir]
  ;; see https://github.com/jakartaee/servlet/blob/master/api/src/main/java/jakarta/servlet/http/Part.java
  (when-not (io/exists-dir? upload-dir)
    (throw (ex :VncException
               "The file upload directory ~{upload-dir} does not exist! ")))

  ;; loop through all :jakarta.servlet.http.Part parts of a HTTP request
  (loop [parts (. req :getParts)]
    (if-let [p (first parts) uploads '()]
      (let [file-name (. p :getSubmittedFileName)
            file      (io/file upload-dir file-name)]
        (. p :write (io/file-path file))
        (. p :delete)
        (recur (rest parts) (conj uploads file-name)))
      uploads)))


(defn
  ^{ :arglists '("(create-servlet handler-map)")
     :doc "Creates a servlet from a HTTP method handler map"
     :examples '(
         """
         ;; minimal servlet
         (tomcat/create-servlet
           { :doGet (fn [req res servlet] (tomcat/send-ok res "Hello World")) })
         """,
         """
         ;; servlet with lifecycle and all HTTP methods
         (tomcat/create-servlet
            { :init (fn [config] nil)
              :destroy (fn [servlet] nil)
              :doGet (fn [req res servlet] (tomcat/send-ok res "Hello World"))
              :doHead (fn [req res servlet] (tomcat/send-not-implemented res "HTTP Method HEAD"))
              :doPost (fn [req res servlet] (tomcat/send-not-implemented res "HTTP Method POST"))
              :doPut (fn [req res servlet] (tomcat/send-not-implemented res "HTTP Method PUT"))
              :doDelete (fn [req res servlet] (tomcat/send-not-implemented res "HTTP Method DELETE"))
              :getLastModified (fn [req] -1) })
          """ ) }

  create-servlet [handler-map]

  (. :VeniceServlet :new (proxify :IVeniceServlet handler-map)))


(defn
  ^{ :doc "'Hello World' demo servlet" }

  hello-world-servlet []

  (create-servlet
     { :init            (fn [config] nil)
       :destroy         (fn [servlet] nil)
       :doGet           (fn [req res _] (send-ok res "Demo" "Hello World"))
       :doHead          (fn [req res _] (send-not-implemented res "HTTP Method HEAD"))
       :doPost          (fn [req res _] (send-not-implemented res "HTTP Method POST"))
       :doPut           (fn [req res _] (send-not-implemented res "HTTP Method PUT"))
       :doDelete        (fn [req res _] (send-not-implemented res "HTTP Method DELETE"))
       :getLastModified (fn [req] -1) }))


(defn
  ^{ :arglists '(
          "(start servlet options)"
          "(start servlet context-path context-doc-base options)")
     :doc """
          Start a Tomcat to serve given servlet with supplied options:

          ¶¶*Server options:*

          | [![width: 20%]]    | [![width: 80%]] |
          | :base-dir          | the server's base directory (default: ".") |
          | :await?            | block the thread until server get shutdown command (default: true) |
          | :http?             | create http connector (default: true) |
          | :port              | the port to listen on http connector (default: 8080) |
          | :https?            | create https connector (default: false) |
          | :https-port        | the port to listen on https connector (default: 8443) |
          | :keystore          | path to keystore file include server certificate |
          | :key-pass          | password of keystore file |
          | :tls-hostname      | hostname to listen for https connector (default: _default_) |
          | :tls-protocol      | list of SSL/TLS protocol to support for https connector (default: TLS) |
          | :tls-ciphers       | list of SSL/TLS ciphers to support for https connector |
          | :executor?         | use executor (default: true) |
          | :executor-name     | name of executor (default: tc-executor) |
          | :max-threads       | max number of threads in executor (default: 200) |
          | :min-spare-threads | minimum number of spare threads in executor (default: 25) |
          | :max-idle-time     | max milliseconds before an idle thread shutsdown (default: 60000) |

          ¶¶*Servlet options:*

          | [![width: 20%]]      | [![width: 80%]] |
          | :name                | the servlet's name (default: "venice-servlet") |
          | :mapping             | the servlet's mapping path (default: "/*") |
          | :file-upload         | if true configure as file-upload servlet (default: false) |
          | :location            | file-upload location (default: "") |
          | :max-file-size       | file-upload max file size in bytes (default: -1) |
          | :max-request-size    | file-upload max request size in bytes (default: -1) |
          | :file-size-threshold | file-upload max file threshold in bytes (default: 0I) |
          """
      :examples '(
          """
          ;; Example 1:
          ;; start Tomcat with 
          ;;   - a servlet
          ;;   - server options
          (tomcat/start (tomcat/hello-world-servlet)
                        {:await? false, :base-dir ".", :port 8080})
          """,
          """
          ;; Example 2:
          ;; start Tomcat with 
          ;;   - a servlet
          ;;   - web app context-path
          ;;   - web app context-doc-base
          ;;   - server options
          (tomcat/start (tomcat/hello-world-servlet)
                        ""
                        "."
                        {:await? false, :base-dir ".", :port 8080})
          """,
          """
          ;; Example 3:
          ;; start Tomcat with 
          ;;   - a single servlet with servlet options
          ;;   - web app context-path
          ;;   - web app context-doc-base
          ;;   - server options
          (tomcat/start [ [ (tomcat/hello-world-servlet) 
                            {:name "hello-servlet"  :mapping "/*"} ] ]
                        ""
                        "."
                        {:await? false, :base-dir ".", :port 8080})
          """,
          """
          ;; Example 4:
          ;; start Tomcat with 
          ;;   - a single fileupload servlet with servlet options
          ;;   - web app context-path
          ;;   - web app context-doc-base
          ;;   - server options
          (tomcat/start [ [ (upload-servlet) 
                            {:name                 "upload-servlet"  
                             :mapping              "/upload"
                             :file-upload          true
                             :location             "/tmp"
                             :max-file-size        10485760
                             :max-request-size     10485760
                             :file-size-threshold  -1} ] ]
                        ""
                        "."
                        {:await? false, :base-dir ".", :port 8080})
          """ )
      :see-also '(
          "tomcat/state"
          "tomcat/stop"
          "tomcat/destroy"
          "tomcat/shutdown" ) }

  start

  ([servlet options]
    (tomcat/start servlet nil nil options))

  ([servlet context-path context-doc-base options]
    (let [ctx-path     (coalesce context-path tomcat/default-context-path)
          ctx-doc-base (coalesce context-doc-base tomcat/default-context-doc-base)
          server       (tomcat/create-server options)
          context      (. server :addContext ctx-path ctx-doc-base)]
      (cond
        (instance-of? :VeniceServlet servlet)
            (add-servlet server context ctx-path servlet "venice-servlet" "/*")

        (sequential? servlet)
            (doseq [s servlet]
                   (let [servlet          (first s)
                         opts             (or (second s) {})
                         name             (:name opts "venice-servlet")
                         mapping          (:mapping opts "/*")
                         file-upload      (:file-upload opts false)
                         file-upload-opts (select-keys opts
                                                       [:location
                                                        :max-file-size
                                                        :max-request-size
                                                        :file-size-threshold])]
                     (if-not file-upload
                       (add-servlet server context ctx-path
                                    servlet name mapping)
                       (add-fileupload-servlet server context ctx-path
                                               servlet name mapping
                                               file-upload-opts))))

        :else
            (throw (ex :VncException
                       """
                       Expected either a servlet or a list/vector of one or \
                       multiple [servlet servlet-name servlet-mapping] servlet \
                       definitions!
                       """)))

      ;; need for proper destroying servlets
      (shutdown-hook (fn []
                       (case (state server)
                         :STARTED   (do
                                      (println "Shutting down Tomcat...")
                                      (. server :stop))
                         :STOPPED   nil
                         :DESTROYED nil
                         nil)))

      (. server :start)

      (when (:await? options true)
        (. (. server :getServer) :await))

      server)))


(defn 
  ^{ :arglists '("(state server)")
     :doc """
          Returns the state of a Tomcat server.

          A Tomcat server state is of:

          * `:NEW`
          * `:INITIALIZING`
          * `:INITIALIZED`
          * `:STARTING_PREP`
          * `:STARTING`
          * `:STARTED`
          * `:STOPPING_PREP`
          * `:STOPPING`
          * `:STOPPED`
          * `:DESTROYING`
          * `:DESTROYED`
          * `:FAILED`
          """
     :examples '(
          """
          (do
            (load-module :tomcat ['tomcat :as 'tc])
            (let [server  (tc/start (tc/hello-world-servlet)
                                    {:await? false, :base-dir ".", :port 8080})]
              (tc/state server)
              (sleep 20_000)
              (tc/shutown server)))
           """ )
      :see-also '(
          "tomcat/start"
          "tomcat/stop"
          "tomcat/destroy"
          "tomcat/shutdown" ) }

  state [server]

  (keyword (. (. server :getServer) :getState)))


(defn 
  ^{ :arglists '("(stop server)")
     :doc """
          Stops a Tomcat server.

          Note: Do not forget to call `destroy` on the server after having
                stopped it.
          """
     :examples '(
          """
          (do
            (load-module :tomcat ['tomcat :as 'tc])
            (let [server  (tc/start (tc/hello-world-servlet)
                                    {:await? false, :base-dir ".", :port 8080})]
              (tc/state server)
              (sleep 20_000)
              (tc/stop server)            
              (tc/destroy server)))
           """ )
      :see-also '(
          "tomcat/start"
          "tomcat/state"
          "tomcat/destroy"
          "tomcat/shutdown" ) }

  stop [server]

  (. server :stop))


(defn 
  ^{ :arglists '("(destroy server)")
     :doc """
          Destroys a Tomcat server after having stopped it.
          """
     :examples '(
          """
          (do
            (load-module :tomcat ['tomcat :as 'tc])
            (let [server  (tc/start (tc/hello-world-servlet)
                                    {:await? false, :base-dir ".", :port 8080})]
              (tc/state server)
              (sleep 20_000)
              (tc/stop server)            
              (tc/destroy server)))
           """ )
      :see-also '(
          "tomcat/start"
          "tomcat/state"
          "tomcat/stop"
          "tomcat/shutdown" ) }

  destroy [server]

  (. server :destroy))


(defn 
  ^{ :arglists '("(shutdown server)")
     :doc """
          Shutdown a Tomcat server.

          Shutdown effectively calls

          * `(stop server)`
          * `(destroy server)`

          on the server
          """
     :examples '(
          """
          (do
            (load-module :tomcat ['tomcat :as 'tc])
            (let [server  (tc/start (tc/hello-world-servlet)
                                    {:await? false, :base-dir ".", :port 8080})]
              (tc/state server)
              (sleep 20_000)
              (tc/shutdown server)))
           """ )
      :see-also '(
          "tomcat/start"
          "tomcat/state"
          "tomcat/stop"
          "tomcat/destroy" ) }

  shutdown [server]

  (. server :stop)
  (. server :destroy))



;; -----------------------------------------------------------------------------
;; Request/Response functions
;; -----------------------------------------------------------------------------

(defn send-redirect [req res redirect-uri]
  (. res :sendRedirect (str (. req :getContextPath) redirect-uri)))

(defn send-html [res status html]
  (. res :setStatus status)
  (. res :setContentType "text/html; charset=utf-8")
  (-> (. res :getWriter)
      (. :println html)))

(defn send-ok [res msg]
  (send-html res 200 (html-box-page "OK (200)" msg)))

(defn send-not-found [res msg]
  (send-html res 404 (html-box-page "Not Found (404)" msg)))

(defn send-internal-error [res msg]
  (send-html res 500 (html-box-page "Internal Error (500)" msg)))

(defn send-not-implemented [res msg]
  (send-html res 501 (html-box-page "Not Implemented (501)" msg)))


(defn html-box-page [title message]
  """
  <html>
    <head>
      <title>Tomcat</title>
      <style>
        body    {font-family: Arial, Helvetica, sans-serif;}
        .box    {margin-top: 120px; padding: 100px; text-align: center; background-color: #f8f8f8;}
        .title  {color: #cccccc; font-size: 90px;}
        .msg    {margin-top: 20px; color: #999999; font-size: 36px;}
      </style>
    </head>
    <body>
      <div class="box">
        <div class="title">~(str/escape-html (str title))</div>
        <div class="msg">~(str/escape-html (str message))</div>
      </div>
    </body>
  </html>
  """)
