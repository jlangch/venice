;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Tomcat

;;;; start an embedded Tomcat server:
;;;;   (load-module :tomcat ['tomcat :as 'tc])
;;;;   (tc/run-tomcat (tc/hello-world-servlet) {:await? false})
;;;;
;;;; required JARs on the classpath:
;;;;   - javax.annotation-api-1.3.2.jar
;;;;   - tomcat-embed-core-9.0.30.jar
;;;;   - tomcat-embed-websocket-9.0.30.jar (optional)
;;;;
;;;; Thanks to Clojure ring Tomcat adapter. Venice's tomcat
;;;; builds heavily on this work.
;;;; https://github.com/marchrock/ring-tomcat-adapter/blob/master/src/ring/adapter/tomcat.clj


(ns tomcat)


(import :com.github.jlangch.venice.util.servlet.IVeniceServlet
        :com.github.jlangch.venice.util.servlet.VeniceServlet
        :org.apache.catalina.startup.Tomcat
        :org.apache.catalina.core.JreMemoryLeakPreventionListener
        :org.apache.catalina.core.StandardThreadExecutor
        :org.apache.catalina.connector.Connector
        :org.apache.catalina.LifecycleException
        :org.apache.catalina.Server.Service
        :org.apache.coyote.AbstractProtocol
        :org.apache.coyote.http11.Http11NioProtocol
        :org.apache.tomcat.util.net.SSLHostConfig)


(defonce default-http-port 8080)
(defonce default-https-port 8443)
(defonce default-base-dir ".")
(defonce default-context-path "") ; root
(defonce default-context-doc-base ".")
(defonce http-connector "org.apache.coyote.http11.Http11NioProtocol")
(defonce session-id "JSESSIONID")


(def https-ciphers
  (str "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:"
       "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:"
       "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:"
       "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:"
       "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:"
       "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:"
       "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:"
       "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:"
       "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"))


;; ---------------------------------------------------------------------------
;; check Tomcat libs are available
;; ---------------------------------------------------------------------------

(defn check-required-libs []
  (when-not (exists-class? :org.apache.catalina.startup.Tomcat)
    (throw (ex :VncException
               """
               The Tomcat libraries are not on the classpath!

               ---------------------------------------------------------------------
               (do
                 (load-module :maven)
                 (maven/download "org.apache.tomcat.embed:tomcat-embed-core:9.0.34")
                 (maven/download "javax.annotation-api-1.3.2.jar"))
               ---------------------------------------------------------------------
               """))))


;; ---------------------------------------------------------------------------
;; Tomcat functions
;; ---------------------------------------------------------------------------

(defn- create-executor [options]
  (let [executor (. :StandardThreadExecutor :new)]
    (doto executor
      (. :setName (:executor-name options "tc-executor"))
      (. :setNamePrefix (str (:executor-name options "tc-executor") "-"))
      (. :setMaxThreads (:max-threads options 200))
      (. :setMinSpareThreads (:min-spare-threads options 25))
      (. :setMaxIdleTime (:max-idle-time options 60000)))))


(defn- create-ssl-host-config [options]
  (let [ssl-host-config (. :SSLHostConfig :new)]
    (doto ssl-host-config
      (. :setHostName (:tls-hostname options "_default_"))
      (. :setCertificateKeystoreFile (:keystore options nil))
      (. :setCertificateKeystorePassword (:key-password options nil))
      (. :setCiphers (:tls-ciphers options tomcat/https-ciphers))
      (. :setSslProtocol (:tls-protocol options "TLSv1.2")))
    ssl-host-config))


(defmacro create-executored-connector
  [connector-generator executor options]
  `(let [connector# (~connector-generator ~options)]
     (. (. connector# :getProtocolHandler) :setExecutor ~executor)
     connector#))


(defn- create-http-connector [options]
  (let [connector (. :Connector :new tomcat/http-connector)]
    (doto connector
      (. :setPort (:port options tomcat/default-http-port)))
    (when (:https? options false)
      (. connector :setRedirectPort (:https-port options tomcat/default-https-port)))
    connector))


(defn- create-https-connector
  [options]
  (let [connector (. :Connector :new tomcat/http-connector)
        ssl-config (tomcat/create-ssl-host-config options)
        protocol-handler (. connector :getProtocolHandler)]
    (doto connector
      (. :setScheme "https")
      (. :setSecure true)
      (. :addSslHostConfig ssl-config)
      (. :setPort (:https-port options tomcat/default-https-port)))
    (. (. connector :getProtocolHandler) :setSSLEnabled  true)
    connector))


(defmacro create-executored-connectors
  [body service options]
  `(let [executor# (tomcat/create-executor ~options)]
     (. ~service :addExecutor executor#)
     (~body ~service ~options executor#)
     ~service))


(defmacro create-connector-fn
  [create-fn service options & executor]
  `(. ~service :addConnector (if (:executor? ~options true)
                               (tomcat/create-executored-connector ~create-fn (first ~@executor) ~options)
                               (~create-fn ~options))))


(defn- create-connector
  [service options & executor]
  (when (:http? options true)
    (tomcat/create-connector-fn tomcat/create-http-connector service options executor))
  (when (:https? options false)
    (tomcat/create-connector-fn tomcat/create-https-connector service options executor))
  service)


(defn- create-server [options]
  (let [base-dir (:base-dir options tomcat/default-base-dir)
        resources-dir (io/file base-dir "resources")
        tomcat (doto (. :Tomcat :new)
                     (. :setBaseDir base-dir))
        service (. tomcat :getService)]
    (when-not (io/exists-dir? resources-dir)
      (throw (ex :RuntimeException
                 (str "The resources dir " base-dir " does not exist"))))
    (if (:executor? options true)
      (tomcat/create-executored-connectors tomcat/create-connector service options)
      (tomcat/create-connector service options))
    (. (. tomcat :getServer) :addLifecycleListener (. :JreMemoryLeakPreventionListener :new))
    (. (. tomcat :getHost) :setAppBase  "resources")
    tomcat))


(defn reply-text [res status text]
  (. res :setStatus status)
  (. res :setContentType "text/html")
  (-> (. res :getWriter)
      (. :println """<html><body><p>~(str/escape-html text)</p></body></html>""")))


(defn reply-not-found [res]
  (reply-text res 404 "Not Found"))


(defn
  ^{ :doc "'Hello World' demo servlet" }

  hello-world-servlet []

  (. :VeniceServlet :new
    (proxify :IVeniceServlet
      { :init            (fn [config] nil)
        :destroy         (fn [] nil)
        :doGet           (fn [req res _] (reply-text res 200 "Hello World"))
        :doHead          (fn [req res _] (reply-not-found res))
        :doPost          (fn [req res _] (reply-not-found res))
        :doPut           (fn [req res _] (reply-not-found res))
        :doDelete        (fn [req res _] (reply-not-found res))
        :doOptions       (fn [req res _] (reply-not-found res))
        :doTrace         (fn [req res _] (reply-not-found res))
        :getLastModified (fn [req] -1) })))


(defn
  ^{ :doc """
          Start a Tomcat to serve given servlet with supplied options
          :base-dir - the server's base directory (default: ".")
          :await? - block the thread until server get shutdown command (default: true)
          :http? - create http connector (default: true)
          :port - the port to listen on http connector (default: 8080)
          :https? - create https connector (default: false)
          :https-port - the port to listen on https connector (default: 8443)
          :keystore - path to keystore file include server certificate
          :key-pass - password of keystore file
          :tls-hostname - hostname to listen for https connector (default: _default_)
          :tls-protocol - list of SSL/TLS protocol to support for https connector (default: TLS)
          :tls-ciphers - list of SSL/TLS ciphers to support for https connector (default: too long. ECDHE-ECDSA and ECDHE-RSA ciphers)
          :executor? - use executor (default: true)
          :executor-name - name of executor (default: tc-executor)
          :max-threads - max number of threads in executor (default: 200)
          :min-spare-threads - minimum number of spare threads in executor (default: 25)
          :max-idle-time - max milliseconds before an idle thread shutsdown (default: 60000)
          """ }

  start

  ([servlet options]
    (tomcat/start servlet nil nil options))

  ([servlet context-path context-doc-base options]
    (let [server (tomcat/create-server options)
          context (. server :addContext
                            (coalesce context-path tomcat/default-context-path)
                            (coalesce context-doc-base tomcat/default-context-doc-base))]
      (. server :addServlet "" "venice-servlet" servlet)
      (. context :addServletMappingDecoded "/*" "venice-servlet" false)

      ;; need for proper destroying servlets
      (shutdown-hook (fn []
                       (println "Shutting down Tomcat...")
                       (case (state server)
                         :STARTED   (. server :stop)
                         :STOPPED   nil
                         :DESTROYED nil
                         nil)))

      (. server :start)
      (when (:await? options true)
        (. (. server :getServer) :await))

      server)))


(defn state [server]
  ;; :NEW  :INITIALIZING  :INITIALIZED
  ;; :STARTING_PREP  :STARTING  :STARTED
  ;; :STOPPING_PREP  :STOPPING  :STOPPED
  ;; :DESTROYING  :DESTROYED  :FAILED
  (keyword (. (. server :getServer) :getState)))


(defn stop [server]
  (. server :stop))


(defn destroy [server]
  (. server :destroy))


(defn shutdown [server]
  (. server :stop)
  (. server :destroy))
