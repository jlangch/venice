;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Docker generic testcontainer

(ns cargo)

(load-module :docker ['docker :as 'd])


(defn
  ^{ :arglists '("(cargo/start cname repo version publish envs args ready? log)")
     :doc """
          Starts a container.

          Start rules:

            * If a container with another version exists for the container
              name remove the container and the image
            * Pull the image if not yet locally available
            * If the container already runs - use it
            * If the container is available but does not run - start it `(docker/start ...)`
            * If the container is not available - run it `(docker/run ...)`
            * Finally check for a successful startup using the supplied `ready?`
              function. E.g.: `ready?` may scan the container logs for a success
              startup message.

          Args:

          | [![width: 15%]] | [![width: 85%]] |
          | cname   | A unique container name |
          | repo    | The image repository |
          | version | The image version |
          | publish | The port publish|
          | envs    | Env variables |
          | args    | Arguments for the process run in the container |
          | ready?  | A function to decide if the container is ready (maybe nil) |
          | log     | A log function  (maybe nil)|
          """
     :examples '(
          """
          ;; Run an ArangoDB container
          (cargo/start "arangodb-test"
                       "arangodb/arangodb"
                       "3.10.10"
                       "8500:8259"
                       ["ARANGO_ROOT_PASSWORD=test"
                        "ARANGODB_OVERRIDE_DETECTED_TOTAL_MEMORY=8GB"
                        "ARANGODB_OVERRIDE_DETECTED_NUMBER_OF_CORES=1"]
                       ["--server.endpoint tcp://0.0.0.0:8259"]
                       (fn [cname] true)
                       (fn [s] (println "ArangoDB:" s)))
          """)
     :see-also '(
          "cargo/stop") }

  start [cname repo version publish envs args ready? log]

  { :pre [(string? cname)
          (string? repo)
          (string? version)
          (string? publish)
          (vector? envs)
          (vector? args)
          (or (nil? ready?) (fn? ready?))
          (or (nil? log) (fn? log))] }

  (let [log    (or log (fn [s] nil))
        ready? (or ready? (fn [c] true))]
    ;; if a container with another version exists for cname
    ;; remove the container and the image
    (if (d/container-exists-with-name? cname)
      (when-not (container-of cname repo version)
        (log "purge container and image (version differs)...")
        (when (d/container-running-with-name? cname)
          (d/container-stop-by-name cname))
        (d/container-purge-by-name cname)
        (log "purge done.")))

    ;; pull image if not yet locally available
    (if (d/image-ready? repo version)
      (log "local docker ~{repo} image with tag '~{version}' found.")
      (pull-image repo version log))

    ;; start the container or first time run it
    (if (d/container-exists-with-name? cname)
      (if (d/container-running-with-name? cname)
        (log "docker container already running.")
        (start-container cname log))
      (run-container cname repo version publish envs args log))

    ;; check for successful startup log message (max wait 30s)
    (if (container-ready? cname 30 ready?)
      (log "docker container successfully started.")
      (let [msg "docker container did not start up successfully."]
        (log msg)
        (throw (ex :VncException "~{repo}:~{version}: ~{msg}"))))))


(defn
  ^{ :arglists '("(cargo/stop cname log)")
     :doc """
          Stops a container

          Args:

          | cname   | A unique container name    |
          | log     | A log function (maybe nil) |
          """
     :examples '(
          """
          ;; Stop an ArangoDB container
          (cargo/stop "arangodb-test"
                      (fn [s] (println "ArangoDB:" s)))
          """)
     :see-also '(
          "cargo/start") }

  stop [cname log]

  { :pre [(string? cname)
          (or (nil? log) (fn? log))] }

  (let [log (or log (fn [s] nil))]
    (when (d/container-running-with-name? cname)
      (stop-container cname log))))


;; ---------------------------------------------------------------------------
;; private functions
;; ---------------------------------------------------------------------------

(defn- run-container [cname repo version publish envs args log]
  (log "run docker container ~{version} ...")
  (d/run "~{repo}:~{version}"
         :name cname
         :publish publish
         :detach true
         :envs envs
         :args args)
  (sleep 5 :sec)
  (log "run docker container ~{version} ready."))

(defn- start-container [cname log]
  (log "starting docker container...")
  (d/container-start-by-name cname)
  (sleep 5 :sec)
  (log "docker container started."))

(defn- stop-container [cname log]
  (log "stopping docker container...")
  (d/container-stop-by-name cname)
  (log "docker container stopped."))

(defn- pull-image [repo version log]
  (log "downloading docker image '~{repo}:~{version}'...")
  (d/image-pull "~{repo}:~{version}")
  (log "download done."))

(defn- container-of [cname repo tag]
  (let [info (d/container-image-info-by-name cname)]
     (and (== repo (:repo info)) (== tag (:tag info)))))

(defn- container-ready? [cname wait-sec ready?]
  (let [wait-ts (time/plus (time/local-date-time) :seconds wait-sec)]
    (loop []
      (if (time/after? (time/local-date-time) wait-ts)
        false
        (if (ready? cname)
           true
           (do
             (sleep 1000)
             (recur)))))))
