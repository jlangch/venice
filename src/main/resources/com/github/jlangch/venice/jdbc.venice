;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;;  Venice interface to SQL databases via JDBC


;; -----------------------------------------------------------------------------
;;
;;                      W O R K   I N   P R O G R E S S
;;
;; -----------------------------------------------------------------------------

(ns jdbc)


(import :java.net.URI)

(import :java.sql.BatchUpdateException)
(import :java.sql.DriverManager)
(import :java.sql.PreparedStatement)
(import :java.sql.ResultSet)
(import :java.sql.ResultSetMetaData)
(import :java.sql.SQLException)
(import :java.sql.Statement)
(import :java.sql.Types)

(import :java.util.Hashtable)
(import :java.util.Locale)
(import :java.util.Map)
(import :java.util.Properties)

(import :javax.sql.DataSource)


(defonce double-quote (char 34))
(defonce back-tick "`")


(defn
  ^{ :arglists '("(as-sql-name f x)")
     :doc """
          Given a naming strategy function and a keyword or string, return \
          a string per that naming strategy.
          A name of the form x.y is treated as multiple names, x, y, etc, \
          and each are turned into strings via the naming strategy and then \
          joined back together so x.y might become `x`.`y` if the naming \
          strategy quotes identifiers with `.
          """ }

  as-sql-name [f x]

  (let [n (name x)
        i (str/index-of n ".")]
    (if (== -1 i)
      (f n)
      (str/join "." (map f (str/split n "[.]"))))))


(defn
  ^{ :arglists '("(quoted q)")
     :doc """
          Given a (vector) pair of delimiters (characters or strings), return a naming
          strategy function that will quote SQL entities with them.
          Given a single delimiter, treat it as a (vector) pair of that delimiter.
          ((quoted ["[" "]"]) "foo") will return "[foo]" -- for MS SQL Server
          ((quoted "`") "foo") will return "`foo`" -- for MySQL
          Intended to be used with :entities to provide a quoting (naming) strategy that
          is appropriate for your database.
          """ }

  quoted [q]

  (cond
    (vector? q)   (fn [s] (str (first q) s (last q)))
    (keyword? q)  (case q
                    :ansi      (quoted double-quote)
                    :mysql     (quoted back-tick)
                    :oracle    (quoted double-quote)
                    :sqlserver (quoted ["[" "]"]))
    :else         (quoted [q q])))


(defn-
  ^{ :arglists '("(table-str table entities)")
     :doc """
          Transform a table spec to an entity name for SQL. The table spec may be a
          string, a keyword or a map with a single pair - table name and alias.
          """ }

  table-str [table entities]

  (let [entities (or entities identity)]
    (if (map? table)
      (let [[k v] (first table)]
        (str (as-sql-name entities k) " " (as-sql-name entities v)))
      (as-sql-name entities table))))


(defn-
  ^{ :arglists '("(kv-sql ks vs entities null-op)")
     :doc """
          Given a sequence of column name keys and a matching sequence of column
          values, and an entities mapping function, return a sequence of SQL fragments
          that can be joined for part of an UPDATE SET or a SELECT WHERE clause.
          Note that we pass the appropriate operator for NULL since it is different
          in each case.
          """ }

  kv-sql [ks vs entities null-op]

  (let [entities (or entities identity)]
    (if (map? table)
      (let [[k v] (first table)]
        (str (as-sql-name entities k) " " (as-sql-name entities v)))
      (as-sql-name entities table))))


(defn-
  ^{ :arglists '("(as-properties m)")
     :doc """
          Convert any seq of pairs to a java.util.Properties instance.
          Uses as-sql-name to convert both keys and values into strings.
          """ }

  as-properties [m]

  (let [p (. :Properties :new)]
    (doseq [[k v] m]
      (. p :setProperty (if (keyword? k) (name k) (str k))
                        (if (keyword? v) (name v) (str v))))
    p))
