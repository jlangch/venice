;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Install all Venice 3rdparty extension module libraries
;;;;
;;;; Note: This not a package manager. The module provides functions to
;;;;       download Java libraries and fonts to a directory. 
;;;;
;;;; A future version my implement a repository & dependency manager based on
;;;; Apache Ivy 


(ns installer)

(load-module :maven)


;; Venice modules with an installer for 3rdparty libraries. 
;; E.g. :jansi -> :jansi-install
(def- installable-modules [ :jansi
                            :bouncycastle
                            :chatgpt
                            :excel
                            :pdf
                            :qrbill
                            :tomcat
                            :xchart ])


(defn 
  ^{ :arglists '("(install-module name options*)")
     :doc
       """
       Install the 3rdparty libraries for a Venice extension module.

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-module :pdf :dir (repl/libs-dir) :silent false))
       """)
     :see-also '( 
       "installer/install-libs" ) }

  install-module [name & options]

  (assert (keyword? name) "A module name '~{name}' must be a keyword. E.g :jansi")
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install module '~{name}'!")))

  (let [name    (installer-module-name name)
        opts    (apply hash-map options)
        silent  (:silent opts true)]
    (when-not silent (println "\n[Module ~{name}]"))
    (load-module name)
    ;; install (apply :pdf-install/install options)
    (apply (resolve (symbol name "install")) options)))


(defn 
  ^{ :arglists '("(install-libs libs options*)")
     :doc
       """
       Install Java libraries.

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-libs ["org.fusesource.jansi:jansi:2.4.1"] 
                                 :dir (repl/libs-dir) 
                                 :silent false))
       """)
     :see-also '( 
       "installer/install-module" ) }

  install-libs [libs & options]

  (assert (sequential? libs) "libs must be a sequence of library artifacts")
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install libraries!")))

  (let [options  (default-options options)]
    (doseq [lib libs] (apply maven/download lib options))))


(defn
  ^{ :arglists '("(install-demo options*)")
     :doc
       """
       Install all demo fonts and the 3rdparty libraries for all Venice 
       extension modules that require Java libraries:

         * :jansi
         * :bouncycastle
         * :chatgpt
         * :excel
         * :pdf
         * :qrbill
         * :tomcat
         * :xchart

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |

       In the REPL run: 
       
       ````
       venice> (load-module :installer)
       venice> (installer/install-demo)
       venice> !restart
       ```
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-demo :dir (repl/libs-dir) :silent false))
       """)
     :see-also '( 
       "installer/install-demo-fonts" ) }

  install-demo [& options]
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install!")))
  
  (let [options  (default-options options)
        opts     (apply hash-map options)]
    ;; install the modules
    (doseq [name installable-modules] (apply install-module name options))
    
    ;; install Maven
    (when (repl?)
      (when-not (:silent opts true) (println "\n[Maven]"))
      (maven/install))

    ;; install the demo fonts
    (apply install-demo-fonts options)))


(defn 
  ^{ :arglists '("(install-demo-fonts options*)")
     :doc
       """
       Install the Venice demo fonts.

       Installs the open source font families:

         * Open Sans
         * Source Code Pro
         * Audiowide
         * Roboto

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |

       In the REPL run: 
       
       ````
       venice> (load-module :installer)
       venice> (installer/install-demo-fonts)
       venice> !restart
       ```
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-demo-fonts :dir (repl/libs-dir) :silent false))
       """)
     :see-also '( 
       "installer/install-demo" ) }

  install-demo-fonts [& options]
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install demo fonts!")))

  (let [options  (default-options options)
        opts     (apply hash-map options)
        silent   (:silent opts true)
        dir      (:dir opts ".")]
    (when-not silent (println "\n[Fonts]"))
    (load-module :fonts)
    (fonts/download-demo-fonts dir silent)))


(defn- default-options [opts]
  (if (and (repl?) (empty? opts))
    [:dir (repl/libs-dir) :silent false :force false] 
    opts))


(defn- installer-module-name [name]
  (assert (keyword? name) "A module name ~{name} must be a keyword!")
  (assert (nil? (namespace name)) "A module name ~{name} must not have a namespace!")
  (if (str/ends-with? (core/name name) "-install")
    name
    (keyword (str (core/name name) "-install"))))
