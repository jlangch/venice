;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Install all Venice 3rdparty extension module libraries
;;;;
;;;; Note: This not a package manager. The module provides functions to
;;;;       download Java libraries and fonts to a directory. 
;;;;
;;;; A future version my implement a repository & dependency manager based on
;;;; Apache Ivy 


(ns installer)

(load-module :maven)


;; Venice modules with an installer for 3rdparty libraries. 
;; E.g. :jansi -> :jansi-install
(def- installable-modules [ :jansi
                            :bouncycastle
                            :excel
                            :pdf
                            :qrbill
                            :tomcat
                            :xchart
                            :jtokkit
                            :langchain
                            :postgresql-jdbc ])


(defn 
  ^{ :arglists '("(install-module name options*)")
     :doc
       """
       Install the 3rdparty libraries for a Venice extension module.

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-module :pdf :dir (repl/libs-dir) :silent false))
       """)
     :see-also '( 
       "installer/install"
       "installer/install-libs" ) }

  install-module [name & options]

  (assert (keyword? name) "A module name '~{name}' must be a keyword. E.g :jansi")
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install module '~{name}'!")))

  (let [name    (installer-module-name name)
        opts    (apply hash-map options)
        silent  (:silent opts true)]
    (validate-install-dir opts)
    (when-not silent (println "\n[Module ~{name}]"))

    (load-module name)
    ;; install (apply :pdf-install/install options)
    (apply (resolve (symbol name "install")) options)))


(defn 
  ^{ :arglists '("(install artifacts options*)")
     :doc
       """
       Install Java artifacts and its dependencies.

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install [ "dev.langchain4j:langchain4j:0.30.0" 
                              "dev.langchain4j:langchain4j-open-ai:0.30.0" ] 
                            :dir (repl/libs-dir) 
                            :silent false))
       """)
     :see-also '( 
       "installer/install-libs"
       "installer/install-module" ) }

  install [artifacts & options]

  (assert (sequential? artifacts) "Artifacts must be a sequence of library artifacts")
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install libraries!")))

  (let [options  (default-options options)
        opts     (apply hash-map options)
        silent   (:silent opts true)]
    (validate-install-dir opts)

    (when-not silent
      (println "Resolving dependencies ..."))

    ;; Resolve the artifacts dependencies
    (let [deps (maven/dependencies artifacts :print false :format :list)
          cnt  (count deps)]
      (when-not silent
        (printf "Artifacts and dependencies (%d):%n" cnt)
        (doseq [lib deps] (printf "   %s%n" lib))
        (println))

      ;; Download the Maven artifacts
      (doseq [lib deps] (apply maven/download lib options)) 

      (when-not silent
        (println)
        (printf "Installed %d artefacts.%n" cnt)))))


(defn 
  ^{ :arglists '("(install-libs libs options*)")
     :doc
       """
       Install Java libraries (artifacts). Does not install the library's
       dependencies!

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-libs ["org.fusesource.jansi:jansi:2.4.1"] 
                                 :dir (repl/libs-dir) 
                                 :silent false))
       """)
     :see-also '( 
       "installer/install"
       "installer/install-module" ) }

  install-libs [libs & options]

  (assert (sequential? libs) "libs must be a sequence of library artifacts")
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install libraries!")))

  (let [options  (default-options options)
        opts     (apply hash-map options)]
    (validate-install-dir opts)
    (doseq [lib libs] (apply maven/download lib options))))


(defn 
  ^{ :arglists '("(clean dir)")
     :doc
       """
       Remove Java libraries (except any Jansi library) and TTF font files from 
       the specified directory. 
       
       The removal does NOT recursively traverse the directory tree.
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/clean (repl/libs-dir)))
       """)
     :see-also '( 
       "installer/install-libs" ) }

  clean [dir]

  (when (io/exists-dir? dir)
    (->> (io/list-files-glob dir "*.{jar,ttf}")
         (filter #(not (jansi-lib? %)))
         (filter #(not (venice-lib? %)))
         (docoll io/delete-file))))


(defn
  ^{ :arglists '("(install-demo options*)")
     :doc
       """
       Install all demo fonts and the 3rdparty libraries for all Venice 
       extension modules that require Java libraries:

         * :jansi
         * :bouncycastle
         * :chatgpt
         * :excel
         * :pdf
         * :qrbill
         * :tomcat
         * :xchart
         * :jtokkit
         * :langchain
         * :postgresql-jdbc 

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |
       | :clean {true,false}   | if clean is true cleans the install dir \
                                 before installing, defaults to false |
       | :force {true,false}   | if force is true download the artifact \
                                 even if it exist already on the download \
                                 dir, else skip the download if it exists. \
                                 Defaults to true. |

       In the REPL run: 
       
       ```
       venice> (load-module :installer)
       venice> (installer/install-demo)
       venice> !restart
       ```

       The installed libraries and fonts can be cleaned with:

       ```
       (installer/clean (repl/libs-dir))
       ```

       This removes all JAR lib and the fonts, except the JAnsi and the Venice 
       libs.
       """
     :examples '(
       """
       ;; install the demo modules
       (do
         (load-module :installer)
         (installer/install-demo :dir (repl/libs-dir) :silent false))
       """
       """
       ;; clean install dir before installing the demo modules
       (do
         (load-module :installer)
         (installer/install-demo :dir (repl/libs-dir) :silent false :clean true))
       """)
     :see-also '( 
       "installer/install-demo-fonts"
       "installer/clean" ) }

  install-demo [& options]
  
  (when-not (io/internet-avail?)
    (throw (ex :VncException 
               "Internet is not available, cannot install!")))
  
  (let [options  (default-options options)
        opts     (apply hash-map options)
        silent   (:silent opts true)
        clean    (:clean opts false)]
    (validate-install-dir opts)

    (when clean
      (let [dir (:dir opts (if (repl?) (repl/libs-dir) "."))]
        (when-not silent (println "Cleaning:" dir))
        (installer/clean dir)))

    ;; get the modules' libraries
    (when-not silent (println "Processing modules:"))
    (let [libs (loop [names installable-modules, libs []]
                  (if-let [name (first names)] 
                    (let [module-name (installer-module-name name)]
                      (when-not silent (println "  " module-name))
                      (let [libs* (get-module-libraries module-name)]
                        (recur (rest names) (concat libs libs*))))
                    libs))]
      ;; install the libraries and its dependencies
      (apply install libs options))

    ;; install the demo fonts
    (apply install-demo-fonts options)))


(defn 
  ^{ :arglists '("(install-demo-fonts options*)")
     :doc
       """
       Install the Venice demo fonts.

       Installs the open source font families from 

       | Family          | Download family ref   | Type | License                     |
       | :-------------- | :-------------------- | :--- | :-------------------------- |
       | Open Sans       | open-sans             | TTF  | Apache License v2           |
       | Roboto          | roboto                | TTF  | Apache License v2           |
       | Source Code Pro | source-code-pro       | OTF  | SIL Open Font License v1.10 |
       | JetBrains Mono  | jetbrains-mono        | TTF  | Apache License v2           |


       Downloads the font families from the
       [Font Squirrel](https://www.fontsquirrel.com/) repository

       Options:

       | :dir path             | download dir, defaults to "." except when run \
                                 in a REPL where it defaults to the value of \
                                 `(repl/libs-dir)` |
       | :silent {true,false}  | if silent is true does not show a progress \
                                 bar, defaults to true |

       In the REPL run: 
       
       ```
       venice> (load-module :installer)
       venice> (installer/install-demo-fonts)
       venice> !restart
       ```

       The installed libraries and fonts can be cleaned with:

       ```
       (installer/clean (repl/libs-dir))
       ```
       """
     :examples '(
       """
       (do
         (load-module :installer)
         (installer/install-demo-fonts :dir (repl/libs-dir) :silent false))
       """)
     :see-also '( 
       "installer/install-demo"
       "installer/clean" ) }

  install-demo-fonts [& options]
  
  (let [options         (default-options options)
        opts            (apply hash-map options)
        skip-demo-fonts (:skip-demo-fonts opts false)
        silent          (:silent opts true)
        dir             (:dir opts ".")]
    (validate-install-dir opts)

    (when-not skip-demo-fonts
      (when-not (io/internet-avail?)
        (throw (ex :VncException 
                   "Internet is not available, cannot install demo fonts!")))

      (when-not silent 
        (println "\nInstalling fonts to: " (io/file-canonical dir))
        (println "\n[Fonts]"))
      (load-module :fonts)
      (fonts/download-demo-fonts dir silent))))


(defn- default-options [opts]
  (if (repl?)
    (->> (merge { :dir (repl/libs-dir) 
                  :silent false 
                  :force false }
                (apply hash-map opts))
         seq
         flatten)
    opts))


(defn- installer-module-name [name]
  (assert (keyword? name) "A module name ~{name} must be a keyword!")
  (assert (nil? (namespace name)) "A module name ~{name} must not have a namespace!")
  (if (str/ends-with? (core/name name) "-install")
    name
    (keyword (str (core/name name) "-install"))))


(defn- jansi-lib? [f]
  (case (type f)
    :core/string  (jansi-lib? (io/file f))
    :java.io.File (match? (io/file-name f) #"jansi-[0-9]+[.][0-9]+[.][0-9]+[.]jar")
    false))


(defn- venice-lib? [f]
  (case (type f)
    :core/string  (venice-lib? (io/file f))
    :java.io.File (match? (io/file-name f) #"venice-.*[.]jar")
    false))


(defn- get-module-libraries [module-name]
  (try
    (load-module module-name)
    ((resolve (symbol module-name "libraries")))
    (catch :Exception e
      (throw (ex :VncException """
                               Failed to get library dependencies of the \
                               installer module :{module-name}
                               """
                               e)))))

(defn- validate-install-dir [opts]
  (assert map? opts)
  
  (when (and (repl?) (contains? opts :dir) (nil? (:dir opts)))
    ;; (repl-dir) is nil -> warn the user to properly install the REPL
    (let [repl-start-script  (if (os-type? :windows) "repl.bat" "./repl.sh")
          venice-setup-cmd   "java -jar venice-~(version).jar -setup -colors"]
      (throw (ex :VncException
                  """
                  Error:
                  
                  =============================================================
                  Your are running a thumb Venice REPL that is not eligible for
                  installing libraries and fonts!
                  
                  To get a standard Venice REPL run the Venice setup:
                  
                      ~{venice-setup-cmd}
                  
                  and start the REPL afterwards with the created ~{repl-start-script} 
                  script.
                  =============================================================
                  """)))))

