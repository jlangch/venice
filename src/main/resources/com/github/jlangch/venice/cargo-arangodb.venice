;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Docker ArangoDB cargo testcontainer

;;;; This is just a configuration wrapper on top of the :cargo module to
;;;; simplify using ArangoDB testcontainers

(ns cargo-arangodb)

(load-module :docker)
(load-module :cargo)

(import :com.github.jlangch.venice.ShellException)

(defonce internal-port 8529) ;; The ArangoDB internal port within the container

;; The ArangoDB container defines two directories that can be used with volumes
(defonce data-dir "/var/lib/arangodb3")
(defonce apps-dir "/var/lib/arangodb3-apps")


(defn
  ^{ :arglists '(
          "(cargo-arangodb/start cname version mapped-port root-passwd memory cores log)")
     :doc """
          Starts an ArangoDB container.

          Start rules:

            * If a container with another version exists for the container
              name remove the container and the image
            * Pull the image if not yet locally available
            * If the container already runs - use it
            * If the container is available but does not run - start it `(docker/start ...)`
            * If the container is not available - run it `(docker/run ...)`
            * Finally check for a successful startup. The container log must
              contain the string ".*is ready for business. Have fun.*" on the
              last line.

          Args:

          | [![width: 15%]] | [![width: 85%]] |
          | cname       | A unique container name |
          | version     | The ArangoDB version to use. E.g.: 3.11.4 |
          | mapped-port | The published (mapped) ArangoDB port on the host |
          | root-passwd | The ArangoDB root password |
          | memory      | The detected memory ArangoDB is to use. E.g.: 8GB, 8000MB |
          | cores       | The detected number of cores ArangoDB is to use |
          | log         | A log function, may be *nil*. \
                          E.g: `(fn [s] (println "ArangoDB:" s))`|
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
           
            ;; Run an ArangoDB container labeled as "db-test"
            (ca/start "db-test" "3.11.4" 8500 "test" "8GB" 1 nil))
          """)
     :see-also '(
          "cargo-arangodb/stop") }

  start

  ([cname version mapped-port root-passwd memory cores log]
    (start cname version [] mapped-port root-passwd memory cores log))

  ([cname version volumes mapped-port root-passwd memory cores log]
    { :pre [(string? cname)
            (string? version)
            (or (nil? volumes) (vector? volumes))
            (or (int? mapped-port) (long? mapped-port))
            (< 0 mapped-port 65536)
            (string? root-passwd)
            (string? memory)
            (match? (str/upper-case memory) "[1-9][0-9]*(B|K|M|G|T|KB|MB|GB|TB|KIB|MIB|GIB|TIB)")
            (or (int? cores) (long? cores))
            (< 0 cores 64)] }

    (let [host-port (long mapped-port)
          envs      ["ARANGO_ROOT_PASSWORD=~{root-passwd}"
                     "ARANGODB_OVERRIDE_DETECTED_TOTAL_MEMORY=~{memory}"
                     "ARANGODB_OVERRIDE_DETECTED_NUMBER_OF_CORES=~(long cores)"]
          volumes   (coalesce volumes [])
          args-old  ["--server.endpoint tcp://0.0.0.0:~{internal-port}"]
          args-new  ["--server.endpoint tcp://0.0.0.0:~{internal-port}"
                     "--server.telemetrics-api false"]  ;; supported 3.11+
          args      (if (match? version "3[.](9|10)[.].*") args-old args-new)
          log       (or log default-log)
          publish   "~{host-port}:~{internal-port}"
          wait-after-start-secs 3
          ready-check-max-secs  30]
      (log "Starting ~{version} as \"~{cname}\" @ port ~{publish} ...")
      (docoll (fn [v] (log "Using volume: ~{v}")) volumes)
      (cargo/start cname "arangodb/arangodb" version publish
                   envs 
                   volumes
                   args
                   arangodb-ready?
                   log
                   wait-after-start-secs
                   ready-check-max-secs))))


(defn
  ^{ :arglists '("(cargo-arangodb/stop cname log)")
     :doc """
          Stops an ArangoDB container

          Args:

          | cname   | A unique container name       |
          | log     | A log function, may be *nil*. \
                      E.g: `(fn [s] (println "ArangoDB:" s))`|
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
           
            ;; Stop the ArangoDB container labeled as "db-test"
            (ca/stop "db-test" nil))
          """)
     :see-also '(
          "cargo-arangodb/start") }

  stop [cname log]

  { :pre [(string? cname)] }

  (let [log (or log default-log)]
    (cargo/stop cname log)))


(defn
  ^{ :arglists '("(cargo-arangodb/db-dump cname db-name db-user db-passwd dump-name log)")
     :doc """
          Dumps an ArangoDB database.

          The DB dump is written to container's directory "/var/lib/arangodb3/{dump-name}".
          If the directory does not exist it is created automatically.
        
          Example:
          
          ```
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
            (ca/db-dump "db-test" "people" "root" "xxx" "dump-001" nil))
          ```

          Dumps an ArangoDB database using this commands on the container:

          ```
          mkdir /var/lib/arangodb3/dump-001

          arangodump
            --output-directory /var/lib/arangodb3/dump-001
            --overwrite true
            --include-system-collections true
            --server.database "people"
            --server.endpoint tcp://127.0.0.1:8529
            --server.username "root"
            --server.password "xxx"
          ```

          Open an interactive docker shell to check the dump:

          ```
          docker exec -it {container-id} sh
          ```

          Args:

          | cname     | The container name            |
          | db-name   | The name of the DB to dump    |
          | db-user   | The DB user                   |
          | db-passwd | The DB password               |
          | dump-name | The dump name. e.g "dump-001" |
          | log       | A log function, may be *nil*. \
                        E.g: `(fn [s] (println "ArangoDB:" s))`|
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])

            (ca/db-dump "db-test" "people" "root" "xxx" "dump-001" nil))
          """)
     :see-also '(
          "cargo-arangodb/db-restore"
          "cargo-arangodb/exists-db-dump?" 
          "cargo-arangodb/remove-db-dump") }

  db-dump [cname db-name db-user db-passwd dump-name log]

  { :pre [(string? cname)
          (string? db-name)
          (string? db-user)
          (string? db-passwd)
          (string? dump-name)
          (match? dump-name "[a-zA-Z0-9][a-zA-Z0-9_-]*")] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")
        log       (or log default-log)]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running")
            "The container is not running!")
    (log "Dumping '~{db-name}' to '~{dump-name}'...")
    (docker/exec id "mkdir" "/var/lib/arangodb3/~{dump-name}")
    (log "Created dump directory /var/lib/arangodb3/~{dump-name}")
    (let [args ["--output-directory" "/var/lib/arangodb3/~{dump-name}"
                "--overwrite" "true"
                "--include-system-collections" "true"
                "--server.database" db-name
                "--server.endpoint" "tcp://127.0.0.1:~{internal-port}"
                "--server.username" db-user
                "--server.password" db-passwd]]
      (apply docker/exec id "arangodump" args)
      (log "Dump '~{db-name}' to '~{dump-name}' done."))))


(defn
  ^{ :arglists '("(cargo-arangodb/db-restore cname db-name db-user db-passwd dump-name log)")
     :doc """
          Restores an ArangoDB database from a dump

          The DB dump is read from container's directory "/var/lib/arangodb3/{dump-name}".
        
          Example:
          
          ```
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
            (ca/db-restore "db-test" "people" "root" "xxx" "dump-001" nil))
          ```

          Restores an ArangoDB database using this command on the container:
 
          ```
          arangorestore
            --input-directory /var/lib/arangodb3/dump-001
            --force-same-database
            --create-database true
            --include-system-collections true
            --server.database "people"
            --server.endpoint tcp://127.0.0.1:8529
            --server.username "root"
            --server.password "xxx"
          ```

          Open an interactive docker shell to check the dump:

          ```
          docker exec -it {container-id} sh
          ```

          Check if dump directory exists:

          `(cargo-arangodb/exists-db-dump? "db-test" "dump-001")`

          Args:

          | cname     | The container name            |
          | db-name   | The name of the DB to dump    |
          | db-user   | The DB user                   |
          | db-passwd | The DB password               |
          | dump-name | The dump name. e.g "dump-001" |
          | log       | A log function, may be *nil*. \
                        E.g: `(fn [s] (println "ArangoDB:" s))`|
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
            (ca/db-restore "db-test" "people" "root" "xxx" "dump-001" nil))
          """)
     :see-also '(
          "cargo-arangodb/db-dump"
          "cargo-arangodb/exists-db-dump?" 
          "cargo-arangodb/remove-db-dump") }

  db-restore [cname db-name db-user db-passwd dump-name log]

  { :pre [(string? cname)
          (string? db-name)
          (string? db-user)
          (string? db-passwd)
          (string? dump-name)
          (match? dump-name "[a-zA-Z0-9][a-zA-Z0-9_-]*")] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")
        log       (or log default-log)]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running")
            "The container is not running!")
    (log "Restoring '~{db-name}' to '~{dump-name}'...")
    (let [args ["--input-directory" "/var/lib/arangodb3/~{dump-name}"
                "--force-same-database"
                "--create-database" "true"
                "--include-system-collections" "true"
                "--server.database" db-name
                "--server.endpoint" "tcp://127.0.0.1:~{internal-port}"
                "--server.username" db-user
                "--server.password" db-passwd]]
      (apply docker/exec id "arangorestore" args)
      (log "Restore '~{db-name}' from '~{dump-name}' done."))))


(defn
  ^{ :arglists '("(cargo-arangodb/exists-db-dump? cname dump-name)")
     :doc """
          Returns true if the dump with the given name exists otherwise false.

          Args:

          | cname     | The container name            |
          | dump-name | The dump name                 |
          """
     :examples '(
          """
           (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
            (ca/exists-db-dump? "db-test" "dump-001"))
          """)
     :see-also '(
          "cargo-arangodb/db-dump" 
          "cargo-arangodb/db-restore"
          "cargo-arangodb/remove-db-dump" ) }

  exists-db-dump? [cname dump-name]

  { :pre [(string? cname) (string? dump-name)] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running")
            "The container is not running!")
    (try
      (docker/exec id "ls" "/var/lib/arangodb3/~{dump-name}")
      true
      (catch :ShellException e false))))

(defn
  ^{ :arglists '("(cargo-arangodb/remove-db-dump cname dump-name)")
     :doc """
          Removes an existing DB dump.

          Args:

          | cname     | The container name            |
          | dump-name | The dump name                 |
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
            (ca/remove-db-dump "db-test" "dump-001"))
          """)
     :see-also '(
          "cargo-arangodb/db-dump" 
          "cargo-arangodb/db-restore"
          "cargo-arangodb/exists-db-dump?" ) }

  remove-db-dump [cname dump-name]

  { :pre [(string? cname) (string? dump-name)] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running")
            "The container is not running!")
    (try
      (docker/exec id "rm" "-rf" "/var/lib/arangodb3/~{dump-name}")
      true
      (catch :ShellException e false))))


(defn
  ^{ :arglists '("(cargo-arangodb/list-db-dumps cname)")
     :doc """
          List the created DB dumps.

          Args:

          | cname  | The container name  |
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])
            (ca/list-db-dumps "db-test"))
          """)
     :see-also '(
          "cargo-arangodb/db-dump" 
          "cargo-arangodb/db-restore"
          "cargo-arangodb/exists-db-dump?" ) }

  list-db-dumps [cname]

  { :pre [(string? cname)] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running")
            "The container is not running!")
    (println (docker/exec id "ls" "-la" "/var/lib/arangodb3/"))))


(defn
  ^{ :arglists '("(cargo-arangodb/export-db-dump cname dump-name export-dir log)")
     :doc """
          Exports an existing the DB dump 'dump-name' to the local filesystem. 
          The export directory must be an existing empty directory. 

          Args:

          | cname      | The container name                            |
          | dump-name  | The dump name                                 |
          | export-dir | The export dir.  \
                         E.g.: `(io/file (io/user-home-dir) "dump"))`  |
          | log        | A log function, may be *nil*. \
                         E.g: `(fn [s] (println "ArangoDB:" s))`       |
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])

            ;; create a DB dump
            (ca/db-dump "db-test" "people" "root" "xxx" "dump-001" nil)

            ;; export the DB dump to the local filesystem
            (let [dir (io/user-home-dir)]
              (ca/export-db-dump "db-test" "dump-001" dir nil)))
          """)
     :see-also '(
          "cargo-arangodb/db-dump" 
          "cargo-arangodb/db-restore"
          "cargo-arangodb/exists-db-dump?" ) }

  export-db-dump [cname dump-name export-dir log]

  { :pre [(string? cname)
          (string? dump-name) 
          (io/file? export-dir)] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")
        log       (or log default-log)]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running") "The container is not running!")
    (assert (not (io/exists-dir? (io/file export-dir dump-name))) "The export dir already exist!")
    (assert (exists-db-dump? cname dump-name) "The dump does not exist!")
    (log "Exporting '~{dump-name}' ...")
    (docker/cp "~{id}:/var/lib/arangodb3/~{dump-name}" 
               (io/file-path export-dir))
    (log "Export to '~{export-dir}' done.")))


(defn
  ^{ :arglists '("(cargo-arangodb/import-db-dump cname dump-name import-dir log)")
     :doc """
          Imports an existing the DB dump 'dump-name' to the container's 
          filesystem. The import directory must be an existing non empty 
          directory. 

          Args:

          | cname      | The container name                            |
          | dump-name  | The dump name                                 |
          | import-dir | The import dir.  \
                         E.g.: `(io/file (io/user-home-dir) "dump"))`  |
          | log        | A log function, may be *nil*. \
                         E.g: `(fn [s] (println "ArangoDB:" s))`       |
          """
     :examples '(
          """
          (do
            (load-module :cargo-arangodb ['cargo-arangodb :as 'ca])

            ;; import the dump to the container's filesystem
            (let [dir (io/file (io/user-home-dir) "dump-001")]
              (ca/import-db-dump "db-test" "dump-001" dir nil))

            ;; restore the DB dump
            (ca/db-restore "db-test" "people" "root" "xxx" "dump-001" nil))
          """)
     :see-also '(
          "cargo-arangodb/db-dump" 
          "cargo-arangodb/db-restore"
          "cargo-arangodb/exists-db-dump?" ) }

  import-db-dump [cname dump-name import-dir log]

  { :pre [(string? cname)
          (string? dump-name) 
          (io/file? export-dir)] }

  (let [container (first (docker/container-find-by-name cname))
        id        (get container "ID")
        status    (get container "State")
        log       (or log default-log)]
    (assert (some? container)
            "There is no container with the name \"~{cname}\" available!")
    (assert (= status "running") "The container is not running!")
    (assert (io/exists-dir? import-dir) "The import dir does not exist!")
    (assert (dir-not-empty? import-dir) "The import dir is empty!")
    (assert (not (exists-db-dump? dump-name)) "The DB dump does already exist!")
    (log "Importing '~{dump-name}' ...")
    (docker/cp (io/file-path import-dir)
               "~{id}:/var/lib/arangodb3/~{dump-name}")
    (log "Import from '~{import-dir}' done.")))


;; ---------------------------------------------------------------------------
;; utils
;; ---------------------------------------------------------------------------

(defn default-log [s]
  (println "ArangoDB:" s))

(defn arangodb-ready? [cname]
  (-> (docker/container-logs cname :tail 1)
      (str/trim)
      (match? #".*is ready for business. Have fun.*")))

(defn dir-empty? [dir]
  (zero? (count (io/list-files dir))))

(defn dir-not-empty? [dir]
  (pos? (count (io/list-files dir))))

(defn admin-url [port]
  "http://127.0.0.1:~(long port)")
