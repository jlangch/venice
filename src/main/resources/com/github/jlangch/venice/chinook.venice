;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Chinook database data set

;;;; See:  https://github.com/lerocha/chinook-database



(ns chinook)

(load-module :jdbc-utils ['jdbc-utils :as 'ju])


(defonce data-postgresql "https://raw.githubusercontent.com/lerocha/chinook-database/master/ChinookDatabase/DataSources/Chinook_PostgreSql_AutoIncrementPKs.sql")


(defn download-postgresql-data []
  (-> (io/download chinook/data-postgresql :binary false :encoding :utf-8)
      ;; split the file in two parts
      (str/split ".c chinook_auto_increment;.*")))


(defn load-data-to-postgresql [host port user password]
  (let [[sql1 sql2] (download-postgresql-data)]
    (try-with [conn (ju/create-postgresql-connection host port user password)]
      (execute-sql-postgresql sql1)
      (println "Created new PostgreSQL database")
      (execute-sql-postgresql sql2)
      (println "Data loaded into PostgreSQL."))))


(defn execute-sql-postgresql [conn sql]
  (try-with [st  (. conn :createStatement)
             rs  (. st :execute sql)]))


