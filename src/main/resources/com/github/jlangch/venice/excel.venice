;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice Excel functions

;;;; Required 3rd party libraries
;;;;   org.apache.poi:poi:4.1.2
;;;;   org.apache.poi:poi-ooxml:4.1.2
;;;;   org.apache.poi:poi-ooxml-schemas:4.1.2
;;;;   commons-codec:commons-codec:1.15
;;;;   org.apache.commons:commons-math3:3.6.1
;;;;   org.apache.commons:commons-collections:4.4.4
;;;;   org.apache.commons:commons-compress:1.20
;;;;   org.apache.xmlbeans:xmlbeans:3.1.0

;;;;   (maven/download "org.apache.poi:poi:4.1.2")
;;;;   (maven/download "org.apache.poi:poi-ooxml:4.1.2")
;;;;   (maven/download "org.apache.poi:poi-ooxml-schemas:4.1.2")
;;;;   (maven/download "commons-codec:commons-codec:1.15")
;;;;   (maven/download "org.apache.commons:commons-math3:3.6.1")
;;;;   (maven/download "org.apache.commons:commons-collections:4.4.4")
;;;;   (maven/download "org.apache.commons:commons-compress:1.20")
;;;;   (maven/download "org.apache.xmlbeans:xmlbeans:3.1.0")


(ns excel)

(import :com.github.jlangch.venice.util.excel.ExcelReader)
(import :com.github.jlangch.venice.util.excel.ExcelSheetReader)
(import :com.github.jlangch.venice.util.excel.ExcelBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelSheetBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelFontBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelCellStyleBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelColumnBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelColumnBuilder)
(import :com.github.jlangch.venice.util.excel.DataRecord)
(import :java.io.File)
(import :java.io.OutputStream)
(import :java.io.InputStream)


;; the indexed colors supported by XLS and XLSX Excel formats
(def colors { :BLACK1                  0
              :WHITE1                  1
              :RED1                    2
              :BRIGHT_GREEN1           3
              :BLUE1                   4
              :YELLOW1                 5
              :PINK1                   6
              :TURQUOISE1              7
              :BLACK                   8
              :WHITE                   9
              :RED                    10
              :BRIGHT_GREEN           11
              :BLUE                   12
              :YELLOW                 13
              :PINK                   14
              :TURQUOISE              15
              :DARK_RED               16
              :GREEN                  17
              :DARK_BLUE              18
              :DARK_YELLOW            19
              :VIOLET                 20
              :TEAL                   21
              :GREY_25_PERCENT        22
              :GREY_50_PERCENT        23
              :CORNFLOWER_BLUE        24
              :MAROON                 25
              :LEMON_CHIFFON          26
              :LIGHT_TURQUOISE1       27
              :ORCHID                 28
              :CORAL                  29
              :ROYAL_BLUE             30
              :LIGHT_CORNFLOWER_BLUE  31
              :SKY_BLUE               40
              :LIGHT_TURQUOISE        41
              :LIGHT_GREEN            42
              :LIGHT_YELLOW           43
              :PALE_BLUE              44
              :ROSE                   45
              :LAVENDER               46
              :TAN                    47
              :LIGHT_BLUE             48
              :AQUA                   49
              :LIME                   50
              :GOLD                   51
              :LIGHT_ORANGE           52
              :ORANGE                 53
              :BLUE_GREY              54
              :GREY_40_PERCENT        55
              :DARK_TEAL              56
              :SEA_GREEN              57
              :DARK_GREEN             58
              :OLIVE_GREEN            59
              :BROWN                  60
              :PLUM                   61
              :INDIGO                 62
              :GREY_80_PERCENT        63
              :AUTOMATIC              64 } )



;; #############################################################################
;;
;;                                Excel Writer
;;
;; #############################################################################


;; -----------------------------------------------------------------------------
;; ExcelBuilder
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(writer type)")
     :doc """
          Creates a new Excel builder for the given type :xls or :xlsx.
          """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xls)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xls")))
        """)
     :see-also '(
        "excel/add-sheet", "excel/add-font", "excel/add-style",
        "excel/write->file", "excel/write->stream", "excel/write->bytebuf",
        "excel/evaluate-formulas" )}

  writer [type]

  (case type
    :xls  (. :ExcelBuilder :createXls)
    :xlsx (. :ExcelBuilder :createXlsx)
    (throw (ex :VncException
               (str "Invalid Excel type " type ". Use :xls or :xlsx")))))


(defn
  ^{ :arglists '("(write->file builder f)")
     :doc "Writes the excel to a file."
     :examples '(
         """
         (do
           (load-module :excel)
           (let [data  [ {:first "John" :last "Doe"   :age 28 }
                         {:first "Sue"  :last "Ford"  :age 26 } ]
                 wbook (excel/writer :xlsx)
                 sheet (excel/add-sheet wbook "Sheet 1")]
             (excel/add-column sheet "First Name" { :field :first })
             (excel/add-column sheet "Last Name" { :field :last })
             (excel/add-column sheet "Age" { :field :age })
             (excel/write-items sheet data)
             (excel/auto-size-columns sheet)
             (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '("excel/write->stream", "excel/write->bytebuf")}

  write->file [builder f]

  { :pre [(instance-of? :ExcelBuilder builder)
          (or (string? f) (instance-of? :File f)) ] }

  (. builder :write (io/file-out-stream f)))


(defn
  ^{ :arglists '("(write->stream builder os)")
     :doc "Writes the excel to a Java :OutputStream."
     :examples '(
        """
        (do
          (load-module :excel)
          (let [os    (io/file-out-stream "sample.xlsx")
                data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-columns sheet)
            (excel/write->stream wbook os)))
        """ )
     :see-also '("excel/write->file", "excel/write->bytebuf")}

  write->stream [builder os]

  { :pre [(instance-of? :ExcelBuilder builder)
          (instance-of? :OutputStream os)] }

  (. builder :write os))


(defn
  ^{ :arglists '("(write->bytebuf builder os)")
     :doc "Writes the excel to a bytebuf. Returns the bytebuf."
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-columns sheet)
            (excel/write->bytebuf wbook)))
        """ )
     :see-also '("excel/write->file", "excel/write->stream")}

  write->bytebuf [builder]

  { :pre [(instance-of? :ExcelBuilder builder)] }

  (. builder :writeToBytes))


(defn
  ^{ :arglists '("(write-data builder sheet-name data)")
     :doc
        """
        Writes the data of a 2D array to an excel sheet. Creates a new
        sheet with the name given by 'sheet-name'.
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [wbook (excel/writer :xlsx)
                dt    (time/local-date 2021 1 1)
                ts    (time/local-date-time 2021 1 1 15 30 45)]
            (excel/write-data wbook "Data" [[100  101  102  103  104  105]
                                            [200  "ab" 1.23 dt   ts   false]])
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '("excel/write->stream", "excel/write->bytebuf")}

  write-data [builder sheet-name data ]

  { :pre [(instance-of? :ExcelBuilder builder)
          (string? sheet-name) ] }

  (let [sheet (excel/add-sheet builder sheet-name { :no-header-row true })
        cell  (fn [r c val] (excel/write-value sheet (inc r) (inc c) val))]
    (map-indexed (fn [row rv] (map-indexed (fn [col cv] (cell row col cv)) rv))
                 data)))


(defn
  ^{ :arglists '("(evaluate-formulas it)")
     :doc "Evaluate all formulas in the Excel."
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))]
            (excel/evaluate-formulas wbook)))
        """ )
     :see-also '("excel/writer") }

  evaluate-formulas [it]

  { :pre [(or (instance-of? :ExcelBuilder it)
              (instance-of? :ExcelReader it)
              (instance-of? :ExcelSheetReader it))] }

  (. it :evaluateAllFormulas))



;; -----------------------------------------------------------------------------
;; ExcelSheetBuilder
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(write-items builder items)")
     :doc "Writes the passed data items to the sheet"
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '(
        "excel/write-item", "excel/write-value", "excel/cell-formula",
        "excel/auto-size-columns", "excel/auto-size-column",
        "excel/row-height") }

  write-items [builder items]

  { :pre [(instance-of? :ExcelSheetBuilder builder)] }

  (->> (map #(. :DataRecord :of %) items)
       (into! (. :java.util.ArrayList :new))
       (. builder :renderItems)))


(defn
  ^{ :arglists '("(write-item builder item)")
     :doc "Render a single data item to the sheet"
     :examples '(
        """
        (do
          (load-module :excel)
          (let [wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-item sheet {:first "John" :last "Doe"   :age 28 })
            (excel/write-item sheet {:first "Sue"  :last "Ford"  :age 26 })
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '(
        "excel/write-items", "excel/write-value", "excel/cell-formula",
        "excel/auto-size-columns", "excel/auto-size-column",
        "excel/row-height") }

  write-item [builder item]

  { :pre [(instance-of? :ExcelSheetBuilder builder) (map? item)] }

  (->> (. :DataRecord :of item)
       (. builder :renderItem)))


(defn
  ^{ :arglists '("(write-value builder row col val)")
     :doc "Writes a value to a specific cell given by its row and col."
     :examples '(
        """
        (do
          (load-module :excel)
          (let [wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-value sheet 1 1 "John")
            (excel/write-value sheet 1 2 "Doe")
            (excel/write-value sheet 1 3 28)
            (excel/write-value sheet 2 1 "Sue")
            (excel/write-value sheet 2 2 "Ford")
            (excel/write-value sheet 2 3 26)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """,
        """
        (do
          (load-module :excel)
          (let [wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-font wbook :italic { :italic true })
            (excel/add-font wbook :bold { :bold true })
            (excel/add-style wbook :italic { :font :italic })
            (excel/add-style wbook :bold { :font :bold })
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-value sheet 1 1 "John" :italic)
            (excel/write-value sheet 1 2 "Doe"  :italic)
            (excel/write-value sheet 1 3 28     :bold)
            (excel/write-value sheet 2 1 "Sue"  :italic)
            (excel/write-value sheet 2 2 "Ford" :italic)
            (excel/write-value sheet 2 3 26     :bold)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '(
        "excel/write-items", "excel/write-item", "excel/cell-formula",
        "excel/auto-size-columns", "excel/auto-size-column",
        "excel/row-height") }

  write-value

  ([builder row col val]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col) (pos? row) (pos? col)] }
    (. builder :value row col val))

  ([builder row col val style]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col)
            (pos? row) (pos? col)
            (keyword? style)] }
    (. builder :value row col val (name style))))


(defn
  ^{ :arglists '("(cell-formula builder row col formula)")
     :doc "Set a formula for a specific cell given by its row and col."
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:a 100 :b 200 }
                        {:a 101 :b 201 }
                        {:a 102 :b 202 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1"
                                       { :no-header-row true })]
            (excel/add-column sheet "A" { :field :a })
            (excel/add-column sheet "B" { :field :b })
            (excel/add-column sheet "C" { :field :c })
            (excel/write-items sheet data)
            (excel/cell-formula sheet 1 3 "SUM(A1,B1)")
            (excel/cell-formula sheet 2 3 "SUM(A2,B2)")
            (excel/cell-formula sheet 3 3 "SUM(A3,B3)")
            (excel/evaluate-formulas wbook)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """,
        """
        (do
          (load-module :excel)
          (let [data  [ {:a 100 :b 200 }
                        {:a 101 :b 201 }
                        {:a 102 :b 202 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1"
                                       { :no-header-row true })]
            (excel/add-font wbook :bold { :bold true })
            (excel/add-style wbook :bold { :font :bold })
            (excel/add-column sheet "A" { :field :a })
            (excel/add-column sheet "B" { :field :b })
            (excel/add-column sheet "C" { :field :c })
            (excel/write-items sheet data)
            (excel/cell-formula sheet 1 3 "SUM(A1,B1)" :bold)
            (excel/cell-formula sheet 2 3 "SUM(A2,B2)" :bold)
            (excel/cell-formula sheet 3 3 "SUM(A3,B3)" :bold)
            (excel/evaluate-formulas wbook)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '(
        "excel/cell-address", "excel/sum-formula",
        "excel/write-items", "excel/write-item",
        "excel/write-value", "excel/auto-size-columns",
        "excel/auto-size-column", "excel/row-height") }

  cell-formula

  ([builder row col formula]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col) (pos? row) (pos? col)
            (string? formula)] }
    (. builder :formula row col formula))

  ([builder row col formula style]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col)
            (pos? row) (pos? col)
            (string? formula) (keyword? style)] }
    (. builder :formula row col formula (name style))))


(defn
  ^{ :arglists '("(sum-formula builder row-from row-to col-from col-to)")
     :doc "Returns a sum formula"
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:a 100 :b 200 }
                        {:a 101 :b 201 }
                        {:a 102 :b 202 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1"
                                       { :no-header-row true })]
            (excel/add-column sheet "A" { :field :a })
            (excel/add-column sheet "B" { :field :b })
            (excel/add-column sheet "C" { :field :c })
            (excel/write-items sheet data)
            (excel/cell-formula sheet 1 3 (excel/sum-formula sheet 1 1 1 2))
            (excel/cell-formula sheet 2 3 (excel/sum-formula sheet 2 2 1 2))
            (excel/cell-formula sheet 3 3 (excel/sum-formula sheet 3 3 1 2))
            (excel/evaluate-formulas wbook)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '("excel/cell-address") }

  sum-formula [builder row-from row-to col-from col-to]

  { :pre [(instance-of? :ExcelSheetBuilder builder)
          (long? row-from) (long? row-to)
          (long? col-from) (long? col-to)
          (pos? row-from) (pos? row-to)
          (pos? col-from) (pos? col-to)] }

  (. builder :sumFormula row-from row-to col-from col-to))


(defn
  ^{ :arglists '("(cell-address builder row col)")
     :doc "Returns the cell address for a cell at row/col in a sheet"
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:a 100 :b 200 }
                        {:a 101 :b 201 }
                        {:a 102 :b 202 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1"
                                       { :no-header-row true })
                addr  #(excel/cell-address sheet %1 %2)
                sum   #(str "SUM\u0028" %1 "," %2 ")")]
            (excel/add-column sheet "A" { :field :a })
            (excel/add-column sheet "B" { :field :b })
            (excel/add-column sheet "C" { :field :c })
            (excel/write-items sheet data)
            (excel/cell-formula sheet 1 3 (sum (addr 1 1) (addr 1 2)))
            (excel/cell-formula sheet 2 3 (sum (addr 2 1) (addr 2 2)))
            (excel/cell-formula sheet 3 3 (sum (addr 3 1) (addr 3 2)))
            (excel/evaluate-formulas wbook)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '("excel/cell-formula") }

  cell-address [builder row col]

  { :pre [(instance-of? :ExcelSheetBuilder builder)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. builder :cellAddress row col))


(defn
  ^{ :arglists '("(auto-size-columns builder)")
     :doc "Auto size the width of all columns."
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '(
        "excel/auto-size-column", "excel/write-items", "excel/write-item",
        "excel/write-value", "excel/cell-formula", "excel/row-height") }

  auto-size-columns [builder]

  { :pre [(instance-of? :ExcelSheetBuilder builder)] }

  (. builder :autoSizeColumns))


(defn
  ^{ :arglists '("(auto-size-column builder col)")
     :doc "Auto size the width of column col (1..n)."
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-column sheet 1)
            (excel/auto-size-column sheet 2)
            (excel/auto-size-column sheet 3)
            (excel/write->file wbook "sample.xlsx")))
        """ )
     :see-also '(
        "excel/auto-size-columns", "excel/write-items", "excel/write-item",
        "excel/write-value", "excel/cell-formula", "excel/row-height") }

  auto-size-column [builder col]

  { :pre [(instance-of? :ExcelSheetBuilder builder)
          (long? col) (pos? col)] }

  (. builder :autoSizeColumn col))


  (defn
    ^{ :arglists '("(row-height builder row height)")
       :doc "Set the height of a row (1..n)."
       :examples '(
          """
          (do
            (load-module :excel)
            (let [os    (io/file-out-stream "sample.xlsx")
                  data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/writer :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :field :first })
              (excel/add-column sheet "Last Name" { :field :last })
              (excel/add-column sheet "Age" { :field :age })
              (excel/write-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/row-height sheet 2 100)
              (excel/write->stream wbook os)))
          """ )
       :see-also '(
          "excel/auto-size-columns", "excel/write-items", "excel/write-item",
          "excel/write-value", "excel/cell-formula", "excel/auto-size-column") }

    row-height [builder row height]

    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (pos? row)] }

    (. builder :rowHeightInPoints row height))


(defn
  ^{ :arglists '("(convert->reader builder)")
     :doc
        """
        Converts an excel or sheet builder to the corresponding reader.
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:a 100 :b 200 }
                        {:a 101 :b 201 }
                        {:a 102 :b 202 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1"
                                       { :no-header-row true })]
            (excel/add-column sheet "A" { :field :a })
            (excel/add-column sheet "B" { :field :b })
            (excel/add-column sheet "C" { :field :c })
            (excel/write-items sheet data)
            (excel/cell-formula sheet 1 3 "SUM(A1,B1)")
            (excel/cell-formula sheet 2 3 "SUM(A2,B2)")
            (excel/cell-formula sheet 3 3 "SUM(A3,B3)")
            (let [reader (excel/convert->reader sheet)]
              (excel/evaluate-formulas reader)
              (excel/read-long-val reader 1 3))))
          """ )
       :see-also '() }

  convert->reader [builder]

  { :pre [(or (instance-of? :ExcelBuilder builder)
              (instance-of? :ExcelSheetBuilder builder))] }

  (. builder :reader))



;; -----------------------------------------------------------------------------
;; Sheet
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
        "(add-sheet writer title)"
        "(add-sheet writer title options)" )
     :doc
        """
        Adds a sheet with optional attributes to an Excel.

        Options:

        | :no-header-row b        | without header row, e.g. true, false |
        | :default-column-width n | default column width in points, e.g. 100 |
        | :default-header-style s | default header style, e.g. :header |
        | :default-body-style s   | default body style, e.g. :body |
        | :default-footer-style s | default footer style, e.g. :footer |
        | :merged-region r        | merged region [row-from row-to col-from col-to], \
                                    e.g. [1 1 4 10] |
        | :display-zeros b        | display zeros, e.g. true, false. Defines if \
                                    a cell should show 0 (zero) when containing \
                                    zero value. When false, cells with zero value \
                                    appear blank instead of showing the number zero.|
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Sheet 1")]
            (excel/add-column sheet "First Name" { :field :first })
            (excel/add-column sheet "Last Name" { :field :last })
            (excel/add-column sheet "Age" { :field :age })
            (excel/write-items sheet data)
            (excel/auto-size-columns sheet)
            (excel/write->file wbook "sample.xlsx")))
        """,
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)]
            (excel/add-font wbook :bold { :bold true })
            (excel/add-font wbook :italic { :italic true })
            (excel/add-style wbook :header { :font :bold })
            (excel/add-style wbook :body { :font :italic })
            (excel/add-style wbook :footer { :font :bold })

            (let [sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row false
                                           :default-column-width 100
                                           :default-header-style :header
                                           :default-body-style :body
                                           :default-footer-style :footer
                                           :display-zeros true})]
              (excel/add-column sheet "First Name" { :field :first })
              (excel/add-column sheet "Last Name" { :field :last })
              (excel/add-column sheet "Age" { :field :age })
              (excel/write-items sheet data)
              (excel/auto-size-column sheet 1)
              (excel/auto-size-column sheet 2)
              (excel/auto-size-column sheet 3)
              (excel/write->file wbook "sample.xlsx"))))
        """ )
     :see-also '(
       "excel/add-column", "excel/add-font", "excel/add-style") }

  add-sheet

  ([writer title]
    (add-sheet writer title {}))

  ([writer title options]
    { :pre [(instance-of? :ExcelBuilder writer)
            (string? title)] }
    (let [builder (. writer :withSheet (name title) (class :DataRecord))]
      (when-let [x (:no-header-row options)]
        (. builder :noHeader))
      (when-let [x (:default-column-width options)]
        (. builder :setDefaultColumnWidthInPoints x))
      (when-let [x (:default-header-style options)]
        (. builder :defaultHeaderStyle (name x)))
      (when-let [x (:default-body-style options)]
        (. builder :defaultBodyStyle (name x)))
      (when-let [x (:default-footer-style options)]
        (. builder :defaultFooterStyle (name x)))
      (when-let [x (:merged-region options)]
        (. builder :addMergedRegion (first x) (second x) (third x) (fourth x)))
      (when-let [x (:display-zeros options)]
        (. builder :displayZeros x))

      (. builder :end)
      builder)))



;; -----------------------------------------------------------------------------
;; Font
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
        "(add-font writer font-id)"
        "(add-font writer font-id options)")
     :doc
        """
        Add font with optional attributes to an Excel.

        Options:

        | :name s   | font name, e.g. 'Arial' |
        | :height n | height in points, e.g. 12 |
        | :bold b   | bold, e.g. true, false |
        | :italic b | italic, e.g. true, false |
        | :color c  | color, either an Excel indexed color or a HTML \
                      color, e.g. :BLUE, "#00FF00" \
                      note: only XLSX supports 24 bit colors |
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :age 28 }
                        {:first "Sue"  :last "Ford"  :age 26 } ]
                wbook (excel/writer :xlsx)]
            (excel/add-font wbook :header { :height 12
                                            :bold true
                                            :italic false
                                            :color :BLUE })
            (excel/add-style wbook :header { :font :header })

            (let [sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row false
                                           :default-header-style :header })]
              (excel/add-column sheet "First Name" { :field :first })
              (excel/add-column sheet "Last Name" { :field :last })
              (excel/add-column sheet "Age" { :field :age })
              (excel/write-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write->file wbook "sample.xlsx"))))
        """ )
     :see-also '("excel/add-sheet", "excel/add-style") }

  add-font

  ([writer font-id]
    (add-font writer font-key {}))

  ([writer font-id options]
    { :pre [(instance-of? :ExcelBuilder writer)
            (keyword? font-id)] }
    (let [builder (. writer :withFont (name font-id))]
      (when-let [x (:height options)] (. builder :heightInPoints x))
      (when-let [x (:bold options)]   (. builder :bold))
      (when-let [x (:italic options)] (. builder :italic))
      (when-let [x (:color options)]  (cond
                                        (string? x)  (. builder :colorHtml x)
                                        (keyword? x) (. builder :color (x colors))
                                        (long? x)    (. builder :color x))
                                        :else        (ex :VncException "Invalid font color"))

      (. builder :end)
      builder)))



;; -----------------------------------------------------------------------------
;; Style
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
        "(add-style writer style-id)"
        "(add-style writer style-id options)")
     :doc
        """
        Add a style with optional attributes to an Excel.

        Options:

        | :format s        | cell format, e.g. "#0"¶\
                             Default formats:¶\
                             &ensp; - long: "#0"¶\
                             &ensp; - integer: "#0"¶\
                             &ensp; - float: "#,##0.00"¶\
                             &ensp; - double: "#,##0.00"¶\
                             &ensp; - date: "d.m.yyyy"¶\
                             &ensp; - datetime: "d.m.yyyy hh:mm:ss" |
        | :font r          | font name, e.g. :header |
        | :bg-color c      | background color, either an Excel indexed color or \
                             a HTML color, e.g. :PLUM, "#00FF00"¶\
                             Note: only XLSX supports 24 bit colors |
        | :wrap-text b     | wrap text, e.g. true, false |
        | :h-align e       | horizontal alignment {:left, :center, :right} |
        | :v-align e       | vertical alignment {:top, :middle, :bottom} |
        | :rotation r      | rotation angle [degree], e.g. 45 |
        | :border-top s    | border top style, e.g. :thin |
        | :border-right s  | border right style, e.g. :none |
        | :border-bottom s | border bottom style, e.g. :thin |
        | :border-left s   | border left style, e.g. :none |

        Available border styles:

        | [![width: 15%]] | [![width: 15%]] | [![width: 30%]] | [![width: 50%]] |
        | :none   | :dotted | :medium-dashed   | :medium-dash-dot-dot |
        | :thin   | :thick  | :dash-dot        | :slanted-dash-dot    |
        | :medium | :double | :medium-dash-dot |                      |
        | :dashed | :hair   | :dash-dot-dot    |                      |
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"   :weight 70.5 }
                        {:first "Sue"  :last "Ford"  :weight 54.2 } ]
                wbook (excel/writer :xlsx)]
            (excel/add-font wbook :header { :bold true })
            (excel/add-style wbook :header { :font :header
                                             :bg-color :GREY_25_PERCENT
                                             :h-align :center
                                             :rotation 0
                                             :border-top :thin
                                             :border-bottom :thin })
            (excel/add-style wbook :weight { :format, "#,##0.0"
                                             :h-align :right })

            (let [sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row false
                                           :default-header-style :header })]
              (excel/add-column sheet "First Name" { :field :first })
              (excel/add-column sheet "Last Name" { :field :last })
              (excel/add-column sheet "Weight" { :field :weight
                                                 :body-style :weight })
              (excel/write-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write->file wbook "sample.xlsx"))))
        """ )
     :see-also '("excel/add-sheet", "excel/add-font") }

  add-style

  ([writer style-id]
    (add-style writer style-id {}))

  ([writer style-id options]
    { :pre [(instance-of? :ExcelBuilder writer)
            (keyword? style-id)] }
    (let [builder (. writer :withCellStyle (name style-id))]
      (when-let [x (:format options)]
        (. builder :format x))
      (when-let [x (:font options)]
        (. builder :font x))
      (when-let [x (:bg-color options)]
        (cond
          (string? x)  (. builder :bgColorHtml x)
          (keyword? x) (. builder :bgColor (x colors))
          (long? x)    (. builder :bgColor x))
          :else        (ex :VncException "Invalid style bg color"))
      (when-let [x (:wrap-text options)]
        (. builder :wrapText))
      (when-let [x (:h-align options)]
        (case x
          :left     (. builder :hAlignLeft)
          :center   (. builder :hAlignCenter)
          :right    (. builder :hAlignRight)
          (throw    (ex :VncException
                        (str "Invalid horizontal alignment "
                             align
                            ". Use one of :left, :center, or :right")))))
      (when-let [x (:v-align options)]
        (case align
          :top      (. builder :vAlignTop)
          :midddle  (. builder :vAlignMiddle)
          :bottom   (. builder :hAlignBottom)
          (throw    (ex :VncException
                        (str "Invalid vertical alignment "
                             align
                             ". Use one of :top, :middle, or :bottom")))))
      (when-let [x (:rotation options)]
        (. builder :rotation x))
      (when-let [x (:border-top options)]
        (. builder :borderTopStyle (map-border-style x)))
      (when-let [x (:border-right options)]
        (. builder :borderRightStyle (map-border-style x)))
      (when-let [x (:border-bottom options)]
        (. builder :borderBottomStyle (map-border-style x)))
      (when-let [x (:border-left options)]
        (. builder :borderLeftStyle (map-border-style x)))

      (. builder :end)
      builder)))


(defn- map-border-style [style]
  (case style
    :none                 :NONE
    :thin                 :THIN
    :medium               :MEDIUM
    :dashed               :DASHED
    :dotted               :DOTTED
    :thick                :THICK
    :double               :DOUBLE
    :hair                 :HAIR
    :medium-dashed        :MEDIUM_DASHED
    :dash-dot             :DASH_DOT
    :medium-dash-dot      :MEDIUM_DASH_DOT
    :dash-dot-dot         :DASH_DOT_DOT
    :medium-dash-dot-dot  :MEDIUM_DASH_DOT_DOT
    :slanted-dash-dot     :SLANTED_DASH_DOT
    :default              :NONE))



;; -----------------------------------------------------------------------------
;; Column
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
        "(add-column sheet-builder title)"
        "(add-column sheet-builder title options)")
     :doc
        """
        Defines a column with optional attributes.

        *Note:* The column cell value is just read from the passed tabular
        dataset. If there is any mapping or conversion needed it has to be
        applied to the dataset before writing it to the sheet! 

        Options:

        | :field f            | a field, e.g. :first-name |
        | :width n            | width in points, e.g. 100 |
        | :hidden b           | hidden, e.g. true, false |
        | :header-style r     | style name for header row, e.g. :header |
        | :body-style r       | style name for body rows, e.g. :body |
        | :footer-style r     | style name for footer row, e.g. :footer |
        | :footer-value v     | explicit text or numeric value for the column's \
                                footer cell, e.g. "done", 10000.00M, nil |
        | :footer-aggregate e | aggregation mode for the column's footer cell \
                                value, e.g. {:min, :max, :avg, :sum, :none} |
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (let [data  [ {:first "John" :last "Doe"  :weight 70.5 }
                        {:first "Sue"  :last "Ford" :weight 54.2 } ]
                wbook (excel/writer :xlsx)]
            (excel/add-font wbook :header { :bold true })
            (excel/add-style wbook :header { :font :header
                                             :bg-color :GREY_25_PERCENT
                                             :h-align :center })
            (excel/add-style wbook :weight { :format, "#,##0.0"
                                             :h-align :right })

            (let [sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row false
                                           :default-header-style :header })]
              (excel/add-column sheet "First Name" { :field :first })
              (excel/add-column sheet "Last Name" { :field :last })
              (excel/add-column sheet "Weight" { :field :weight
                                                 :body-style :weight })
              (excel/write-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write->file wbook "sample.xlsx"))))
        """ )
     :see-also '("excel/add-sheet") }

  add-column

  ([sheet-builder title]
    (add-columnn sheet-builder title {}))

  ([sheet-builder title options]
    { :pre [(instance-of? :ExcelSheetBuilder sheet-builder)
            (string? title)] }
    (let [builder (. sheet-builder :withColumn title)]
      (when-let [x (:field options)]
         (cond
           (keyword? x) (. builder :colMapper x)
           (string? x)  (. builder :colMapper x)
           :else        (throw (ex :VncException
                                   (str "A column field must be either a keyword "
                                        "or a string acting as a key to get the "
                                        "column's value from the row data map")))))
      (when-let [x (:data-field options)]   (. builder :colMapper x)) ;; compatibility
      (when-let [x (:width options)]        (. builder :widthInPoints x))
      (when-let [x (:hidden options)]       (. builder :hidden x))
      (when-let [x (:header-style options)] (. builder :headerStyle (name x)))
      (when-let [x (:body-style options)]   (. builder :bodyStyle (name x)))
      (when-let [x (:footer-style options)] (. builder :footerStyle (name x)))
      (when-let [x (:footer-value options)]
        (cond
          (nil? x)    nil
          (string? x) (. builder :footerTextValue x)
          (number? x) (. builder :footerNumberValue x)
          :else       (throw (ex :VncException
                                 (str "An explicit column footer value must be "
                                      "nil, a string, or a number")))))
      (when-let [x (:footer-aggregate options)]
        (case x
          :min  (. builder :footerMin)
          :max  (. builder :footerMax)
          :avg  (. builder :footerAverage)
          :sum  (. builder :footerSum)
          (throw (ex :VncException
                     (str "Invalid aggregate mode "
                          x
                          ". Use one of :min, :max, :avg, or :sum")))))

      (. builder :end)
      builder)))



;; #############################################################################
;;
;;                                Excel Reader
;;
;; #############################################################################

(defn
  ^{ :arglists '("(open source)")
     :doc
        """
        Opens an Excel from a source and returns an Excel reader.

        Supported sources are string file path, bytebuf, `:java.io.File`,
        or `:java.io.InputStream`.
        """
     :examples '(
        """
        (do
          (load-module :excel)
          (excel/open "sample.xls"))
        """ )
     :see-also '(
        "excel/sheet-count", "excel/sheet", "excel/evaluate-formulas") }

  open [source]

  (cond
    (string? source)                    (. :ExcelReader :open (io/file-in-stream source))
    (bytebuf? source)                   (. :ExcelReader :open (io/bytebuf-in-stream source))
    (instance-of? :File source)         (. :ExcelReader :open (io/file-in-stream source))
    (instance-of? :InputStream source)  (. :ExcelReader :open source)
    :else (throw (ex :VncException
                     (str "Invalid Excel open source " (type source) )))))


(defn
  ^{ :arglists '("(sheet-count wbook)")
     :doc "Returns the number of sheets in the Excel."
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))]
            (excel/sheet-count wbook)))
        """ )
     :see-also '("excel/sheet", "excel/evaluate-formulas") }

  sheet-count [wbook]

  { :pre [(instance-of? :ExcelReader wbook)] }

  (long (. wbook :getNumberOfSheets)))


(defn
  ^{ :arglists '("(sheet wbook ref)")
     :doc
        """
        Returns a sheet from the Excel reader referenced by its name or
        sheet index.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data1" [[100 101 102] [200 201 202]])
              (excel/write-data wbook "Data2" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook  (excel/open (test-xls))
                sheet1 (excel/sheet wbook "Data1")
                sheet2 (excel/sheet wbook 2)]
            ))
        """ )
     :see-also '(
        "excel/sheet-count", "excel/evaluate-formulas",
        "excel/sheet-name", "excel/sheet-row-range",
        "excel/sheet-col-range",
        "excel/cell-empty?", "excel/cell-type",
        "excel/read-string-val", "excel/read-boolean-val",
        "excel/read-long-val", "excel/read-double-val",
        "excel/read-date-val") }

  sheet [wbook s]

  { :pre [(instance-of? :ExcelReader wbook)] }

  (cond
    (string? s)  (. wbook :getSheet s)
    (long? s)    (. wbook :getSheetAt s)
    :else (throw (ex :VncException
                     (str "Invalid Excel sheet reference type " (type s))))))


(defn
  ^{ :arglists '("(sheet-index sheet)")
     :doc
        """
        Returns the index of a sheet.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/sheet-index sheet)))
        """ ) }

  sheet-index [sheet]

  { :pre [(instance-of? :ExcelSheetReader sheet)] }

  (. sheet :getIndex))


  (defn
    ^{ :arglists '("(sheet-name sheet)")
       :doc
          """
          Returns the name of a sheet.
          """
       :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/writer :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write->bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/sheet-name sheet)))
          """ ) }

    sheet-name [sheet]

    { :pre [(instance-of? :ExcelSheetReader sheet)] }

    (. sheet :getName))


(defn
  ^{ :arglists '("(sheet-row-range sheet)")
     :doc
        """
        Returns the first and the last row with data in a sheet as vector.
        Returns -1 values if no row exists.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/sheet-row-range sheet)))
        """ )
     :see-also '("excel/sheet-col-range")}

  sheet-row-range [sheet]

  { :pre [(instance-of? :ExcelSheetReader sheet)] }

  [(long (. sheet :getFirstRowNum)) (long (. sheet :getLastRowNum))])


(defn
  ^{ :arglists '("(sheet-col-range sheet)")
     :doc
        """
        Returns the first and the last col with data in a sheet row as vector.
        Returns -1 values if the row does not exist or the row does not have
        any columns.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/sheet-col-range sheet 1)))
        """ )
     :see-also '("excel/sheet-row-range")}

  sheet-col-range [sheet row]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (pos? row)] }

  [(long (. sheet :getFirstCellNum row)) (long (. sheet :getLastCellNum row))])


(defn
  ^{ :arglists '("(cell-empty? sheet row col)")
     :doc
        """
        Returns true if the sheet cell given by row/col is empty.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            [(excel/cell-empty? sheet 1 1)
             (excel/cell-empty? sheet 2 1)
             (excel/cell-empty? sheet 3 1)]))
        """ )
     :see-also '(
        "excel/cell-type", "excel/read-string-val",
        "excel/read-boolean-val", "excel/read-long-val",
        "excel/read-double-val", "excel/read-date-val") }

  cell-empty? [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. sheet :isCellEmpty row col))


(defn
  ^{ :arglists '("(cell-type sheet row col)")
     :doc
        """
        Returns the sheet cell type as one of { :notfound, :blank, :string,
        :boolean, :numeric, :formula, :error, or :unknown }
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 "101" 102.0]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            [(excel/cell-type sheet 1 1)
             (excel/cell-type sheet 1 2)
             (excel/cell-type sheet 1 3)
             (excel/cell-type sheet 1 4)]))
        """ )
     :see-also '(
        "excel/cell-empty?", "excel/read-string-val",
        "excel/read-boolean-val", "excel/read-long-val",
        "excel/read-double-val", "excel/read-date-val") }

  cell-type [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (case (. sheet :getCellType row col)
    "notfound"  :notfound
    "blank"     :blank
    "string"    :string
    "boolean"   :boolean
    "numeric"   :numeric
    "formula"   :formula
    "error"     :error
    "unknown"   :unknown
    :unknown))


(defn
  ^{ :arglists '("(read-string-val sheet row col)")
     :doc
        """
        Returns the sheet cell value as string.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 "101" 102.0]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/read-string-val sheet 1 2)))
          """ )
     :see-also '(
        "excel/cell-empty?", "excel/cell-type",
        "excel/read-boolean-val", "excel/read-long-val",
        "excel/read-double-val", "excel/read-date-val")}

  read-string-val [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. sheet :getString row col))


(defn
  ^{ :arglists '("(read-boolean-val sheet row col)")
     :doc
        """
        Returns the sheet cell value as boolean.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 true 102]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/read-boolean-val sheet 1 2)))
        """ )
     :see-also '(
        "excel/cell-empty?", "excel/cell-type",
        "excel/read-string-val", "excel/read-long-val",
        "excel/read-double-val", "excel/read-date-val")}

  read-boolean-val [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. sheet :getBoolean row col))


(defn
  ^{ :arglists '("(read-long-val sheet row col)")
     :doc
        """
        Returns the sheet cell value as long.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101 102]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/read-long-val sheet 1 2)))
        """,
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [data [ {:a 100 :b 200 } ]
                wbook (excel/writer :xlsx)
                sheet (excel/add-sheet wbook "Data"
                                       { :no-header-row true })]
              (excel/add-column sheet "A" { :field :a })
              (excel/add-column sheet "B" { :field :b })
              (excel/write-items sheet data)
              (excel/cell-formula sheet 1 3 "SUM(A1,B1)")
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/read-long-val sheet 1 3)))
        """ )
     :see-also '(
        "excel/cell-empty?", "excel/cell-type",
        "excel/read-string-val", "excel/read-boolean-val",
        "excel/read-double-val", "excel/read-date-val")}

  read-long-val [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. sheet :getInteger row col))


(defn
  ^{ :arglists '("(read-double-val sheet row col)")
     :doc
        """
        Returns the sheet cell value as double.
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)]
              (excel/write-data wbook "Data" [[100 101.23 102]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            (excel/read-double-val sheet 1 2)))
        """ )
     :see-also '(
        "excel/cell-empty?", "excel/cell-type",
        "excel/read-string-val", "excel/read-boolean-val",
        "excel/read-long-val", "excel/read-date-val") }

  read-double-val [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. sheet :getFloat row col))


(defn
  ^{ :arglists '("(read-date-val sheet row col)")
     :doc
        """
        Returns the sheet cell value as a date (`:java.time.LocalDateTime`).
        """
     :examples '(
        """
        (do
          (load-module :excel)

          (defn test-xls []
            (let [wbook (excel/writer :xlsx)
                  dt    (time/local-date 2021 1 1)
                  ts    (time/local-date-time 2021 1 1 15 30 45)]
              (excel/write-data wbook "Data" [[100 dt ts 102]])
              (excel/write->bytebuf wbook)))

          (let [wbook (excel/open (test-xls))
                sheet (excel/sheet wbook "Data")]
            [(excel/read-date-val sheet 1 2)
             (excel/read-date-val sheet 1 3)]))
        """ )
     :see-also '(
        "excel/cell-empty?", "excel/cell-type",
        "excel/read-string-val", "excel/read-boolean-val",
        "excel/read-long-val", "excel/read-double-val") }

  read-date-val [sheet row col]

  { :pre [(instance-of? :ExcelSheetReader sheet)
          (long? row) (long? col) (pos? row) (pos? col)] }

  (. sheet :getDate row col))
