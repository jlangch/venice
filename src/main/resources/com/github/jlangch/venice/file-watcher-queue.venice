;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; File watcher queue


(ns file-watcher-queue)

(import :com.github.jlangch.venice.util.FileWatcherQueue)


(defn create [max-size]
  { :pre [(long? max-size) (pos? max-size)] }
  (. :FileWatcherQueue :new max-size))


(defn size [queue] 
  { :pre [(instance-of? :FileWatcherQueue queue)] }
  (. queue :size))


(defn empty? [queue] 
  { :pre [(instance-of? :FileWatcherQueue queue)] }
  (. queue :isEmpty))


(defn clear [queue] 
  { :pre [(instance-of? :FileWatcherQueue queue)] }
  (. queue :clear))


(defn remove [queue file] 
  { :pre [(instance-of? :FileWatcherQueue queue)
          (io/file? file)] }
  (. queue :remove file))


(defn push [queue file] 
  { :pre [(instance-of? :FileWatcherQueue queue)
          (io/file? file)] }
  (. queue :push file))


(defn pop 
  ([queue] 
    { :pre [(instance-of? :FileWatcherQueue queue)] }
    (. queue :pop))

  ([queue n]
    { :pre [(instance-of? :FileWatcherQueue queue)
            (long? n) (pos? n)] }
    (into [] (. queue :pop n))))
