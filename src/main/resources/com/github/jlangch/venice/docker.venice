;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Docker utilities

;;;; See:  https://docs.docker.com/engine/reference/commandline/


(ns docker)


(defn
  ^{ :arglists '("(docker/version & options)")
     :doc """
          Returns the Docker version.

          Options:

          | :format {:pretty, :json} | Returns the output either as a pretty printed string or as JSON data |
          """
     :examples '(
          "(docker/version)"
          "(docker/version :format :json)"
          "(println (docker/version :format :pretty))" )
     :see-also '("docker/images" "docker/ps")}

  version [& options]

  (let [opts   (apply hash-map options)
        format (:format opts :json)]
    (->> (docker/cmd "version" "--format" (name format))
         (:out)
         (parse-output format))))


(defn
  ^{ :arglists '("(docker/images & options)")
     :doc """
          List images.

          Options:

          | :all {true, false}      | Show all images (default hides intermediate images) |
          | :digests {true, false}  | Show digests |
          | :quiet {true, false}    | If true only display image IDs |
          | :format {:table, :json} | Returns the output either as a table string or as JSON data |
          """
     :examples '(
          "(println (docker/images :format :table))"
          "(docker/images :quiet true :format :json)"
          "(println (docker/images :format :json))" )
     :see-also '("docker/image-remove" "docker/image-prune") }

  images [& options]

  (let [opts    (apply hash-map options)
        all     (:all opts false)
        digests (:digests opts false)
        quiet   (:quiet opts false)
        format  (:format opts :json)]
    (->> (docker/cmd "images"
                     ;; (if all "--all" nil)  ;; hangs on MacOSX
                     (if digests "--digests" nil)
                     (if quiet "--quiet" nil)
                     "--format" (name format))
         (:out)
         (parse-output format))))


(defn
  ^{ :arglists '("(docker/image-remove id)")
     :doc """
          Remove an image given by its image id.
          """
     :examples '(
          """(docker/image-rm "28e52b5cecd8")""" )
     :see-also '("docker/images" "docker/image-prune") }

  image-remove [id]

  (->> (docker/cmd "image" "rm" id)
       (:out)))


(defn
  ^{ :arglists '("(docker/image-prune & options)")
     :doc """
          Remove unused images.

          Options:

          | :all {true, false}      | Remove all unused images, not just dangling ones |
          """
     :examples '(
          "(println (docker/images :format :table))"
          "(docker/images :quiet true :format :json)"
          "(println (docker/images :format :json))" )
     :see-also '("docker/images" "docker/image-remove") }

  image-prune [& options]

  (let [opts    (apply hash-map options)
        all     (:all opts false)]
    (->> (docker/cmd "image"
                     "prune"
                     "--force"   ;; Do not prompt for confirmation
                     (if all "--all" nil))
         (:out))))


(defn
  ^{ :arglists '("(docker/ps & options)")
     :doc """
          List containers.

          Options:

          | :all {true, false}      | Show all containers (default shows just running) |
          | :last n                 | Show n last created containers |
          | :quiet {true, false}    | If true only display container IDs |
          | :format {:table, :json} | Returns the output either as a table string or as JSON data |
          """
     :examples '(
          "(println (docker/ps :format :table))"
          "(docker/ps :all true :format :json)"
          "(docker/ps :quiet true :format :json)"
          "(docker/ps :last 3 :format :json)"
          "(println (docker/ps :all true :format :json))" )
     :see-also '("docker/start" "docker/stop" "docker/cp") }

  ps [& options]

  (let [opts   (apply hash-map options)
        all    (:all opts false)
        lastn  (:last opts -1)
        quiet  (:quiet opts false)
        format (:format opts :json)]
    (->> (docker/cmd "ps"
                     (if all "--all" nil)
                     "--last" lastn
                     (if quiet "--quiet" nil)
                     "--format" (name format))
         (:out)
         (parse-output format))))


(defn
  ^{ :arglists '("(docker/start id & options)")
     :doc """
          Start a stopped container given by its container id.

          Options:

          | :attach {true, false} | Attach STDOUT/STDERR and forward signals |
          """
     :examples '(
          """(docker/start id "b19b498c670b")""" )
     :see-also '("docker/stop" "docker/ps") }

  start [id & options]

  (let [opts    (apply hash-map options)
        attach  (:attach opts false)]
    (->> (docker/cmd "start"
                     (if attach "--attach" nil)
                     id)
         (:out))))


(defn
  ^{ :arglists '("(docker/stop id & options)")
     :doc """
          Stop a container given by its container id.

          Options:

          | :signal name | Signal to send to the container |
          | :time n      | Seconds to wait before killing the container |
          """
     :examples '(
          """(docker/stop id "b19b498c670b" :time 30)""" )
     :see-also '("docker/start" "docker/ps") }

  stop [id & options]

  (let [opts    (apply hash-map options)
        signal  (:signal opts nil)
        time    (:time opts 0)]
    (->> (docker/cmd "stop"
                     (if (and (some? signal) (string? signal)) "--signal" nil)
                     (if (and (some? signal) (string? signal)) signal nil)
                     (if (and (number? time) (pos? time)) "--time" nil)
                     (if (and (number? time) (pos? time)) time nil)
                     id)
         (:out))))


(defn
  ^{ :arglists '("(docker/cp src-path dst-path & options)")
     :doc """
          Copy files/folders between a container and the local filesystem

          Options:

          | :archive {true, false}     | Archive mode (copy all uid/gid information) |
          | :follow-link {true, false} | Always follow symbol link in SRC_PATH|
          | :quiet {true, false}       | Suppress progress output during copy. Progress output is automatically suppressed if no terminal is attached |
          """
     :examples '(
          """
          ;; Copy file from host to docker container
          (docker cp data.txt 74789744g489:/data.txt)
          """,
          """
          ;; Copy file from docker container to host
          (docker cp 74789744g489:/data.txt data.txt)
          """,
          """
          ;; Copy a folder from host to docker container
          (docker cp Desktop/images 74789744g489:/root/img_files/car_photos/images
          """,
          """
          ;; Copy a folder from docker container to host
          (docker cp 74789744g489:/root/img_files/car_photos/images Desktop/images
          """ )
     :see-also '("docker/ps") }

  cp [src-path dst-path & options]

  (let [opts        (apply hash-map options)
        archive     (:archive opts false)
        follow-link (:follow-link  opts false)
        quiet       (:quiet opts false)]
    (->> (docker/cmd "stop"
                     (if archive "--archive" nil)
                     (if follow-link "--follow-link" nil)
                     (if quiet "--quiet" nil)
                     src-path
                     dst-path)
         (:out))))


(defn
  ^{ :arglists '("(docker/diff container-id & options)")
     :doc """
          Inspect changes to files or directories on a container's filesystem.

          Options:

          | :format {:string, :json} | Returns the output either as a string or as JSON data |
          """
     :examples '(
          """
          (println (docker diff 74789744g489))
          """,
          """
          (docker diff 74789744g489 :format :json)
          """ )
     :see-also '("docker/ps") }

  diff [container-id & options]

  (let [opts     (apply hash-map options)
        format   (:format opts :string)
        output   (:out (docker/cmd "diff" container-id))
        actions  {"A" :added, "C" :changed, "D" :deleted}]
    (if (= format :json)
      (->> (str/split-lines output)
           (map #(str/split-at % 1))
           (map #(vector (get actions (first %)) (str/trim (second %)))))
      output)))


(defn
  ^{ :arglists '("(docker/pause container-id)")
     :doc """
          Pause all processes within a container
          """
     :examples '(
          """
          (docker pause 74789744g489)
          """ )
     :see-also '("docker/ps") }

  pause [container-id]

  (:out (docker/cmd "pause" container-id)))


(defn
  ^{ :arglists '("(docker/unpause container-id)")
     :doc """
          Unpause all processes within a container
          """
     :examples '(
          """
          (docker unpause 74789744g489)
          """ )
     :see-also '("docker/ps") }

  unpause [container-id]

  (:out (docker/cmd "unpause" container-id)))


(defn
  ^{ :arglists '("(docker/wait &container-ids)")
     :doc """
          Block until one or more containers stop, then return their exit codes
          """
     :examples '(
          """
          (docker wait 74789744g489)
          """ )
     :see-also '("docker/ps") }

  wait [&container-ids]

  (:out (docker/cmd "wait" (apply str container-ids))))


(defn
  ^{ :arglists '("(docker/cmd & args)")
     :doc """
          Runs any Docker command.
          """
     :examples '(
          """
          (docker/cmd "version" "--format" "json")
          """,
          """
          (apply docker/cmd ["version" "--format" "json"])
          """,
          """
          ;; run a command with JSON output and parse the JSON output into
          ;; Venice data
          (->> (docker/ps :all true :format :json)
               (:out)
               (str/split-lines)
               (map json/read-str))
          """ ) }

   cmd [& args]

   ((docker/exec) (str "docker " (str/join " " (filter some? options)))
                  :throw-ex true))


(defn- parse-output [format output]
  (if (= format :json)
    (json/read-str (str "[" output "]"))  ;; docker you're kidding
    output))


(defn- exec []
  (case (os-type)
    :mac-osx (partial sh "/bin/sh" "-c")
    :linux   (partial sh "/bin/sh" "-c")
    :windows (partial sh "cmd" "/C")))
