;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice QR Reference functions


(ns qrref)


(def- qr-ref-len 27)       ;; number of QR reference digits, checksum digit included

(def- qr-ref-raw-len 26)   ;; number of QR reference digits, checksum digit excluded

(def- checksum-table [0, 9, 4, 6, 8, 2, 7, 1, 3, 5])


(defn- digit->long [c] (- (long c) (long #\0)))    ;; #\2 -> 2


(defn- digit->char [c] (char (+ c (long #\0))))    ;; 2 -> #\2


(defn- remove-leading-zeroes [s]
  (loop [s s]
    (if (and (> (count s) 1) (str/starts-with? s "0"))
      (recur (str/rest s))
      s)))


(defn- remove-whitespaces [s]
  (apply str (filter #(not (str/whitespace? %)) (seq s))))


(defn- numeric? [s]
  (match? s #"[0-9]+"))


(defn- qr-ref-raw [ref]
  (let [padding-zeros (- qr-ref-raw-len (count ref))]
    (if (neg? padding-zeros)
      (throw (ex :VncException "The QR-Reference ref number is too long!"))
      (str (str/repeat "0" padding-zeros) ref))))


(defn checksum [s]
  ^{ :arglists '("(checksum ref)")
     :doc """
          Calculates the checksum for a raw reference. The reference may 
          contain spaces.
          """
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/checksum "230 55361 34663 9301")
           (qr/checksum "23055361346639301")
           (qr/checksum "00 00000 00230 55361 34663 9301")
           (qr/checksum "00000000023055361346639301"))
         """ )
     :see-also '("qrref/create", "qrref/valid?", "qrref/format") }

  (let [s (remove-whitespaces s)]
    (if-not (numeric? s)
      (throw (ex :VncException "Invalid character in reference (digits allowed only)"))
      (loop [carry 0, digits (seq s)]
        (if (empty? digits)
          (mod (- 10 carry) 10)
          (let [digit (digit->long (first digits))
                carry (get checksum-table (mod (+ carry digit) 10))]
            (recur carry (rest digits))))))))


(defn valid? [ref]
  ^{ :arglists '("(valid? ref)")
     :doc """
          Returns true if ref is a valid QR reference else false.
          The reference may contain spaces.
          """
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/valid? "000000000230553613466393013")
           (qr/valid? "00 00000 00230 55361 34663 93013"))
         """ )
     :see-also '("qrref/create", "qrref/format", "qrref/checksum") }

  (let [r (remove-whitespaces ref)]
    (if-not (numeric? r)
      false
      (if-not (== qr-ref-len (count r))
        false
        (== 0 (checksum r))))))



(defn
  ^{ :arglists '("(format s)")
     :doc "Format a QR reference."
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/format "000000000230553613466393013"))
         """ )
     :see-also '("qrref/create", "qrref/valid?", "qrref/checksum") }

  format [s]

  (->> (seq s)
       (reverse)
       (partition-all 5)
       (map #(apply str (reverse %)))
       (reverse)
       (str/join " ")))

(defn
  ^{ :arglists '("(create ref)")
     :doc """
          Creates a QR reference according to the Swiss payment standards.

          [Swiss Payment Standards / de](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-de.pdf)

          [Swiss Payment Standards / en](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-en.pdf)
          """
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/create "1234")
           (qr/create "23055361346639301"))
         """ )
     :see-also '("qrref/valid?", "qrref/format", "qrref/checksum") }

  create[ref-raw]

  (let [r (remove-whitespaces ref-raw)]
    (if-not (match? r #"[0-9]+")
      (throw (ex :VncException "Invalid character in reference (digits allowed only)"))
      (if (> (count r) 26)
        (throw (ex :VncException "Reference number is longer than 26 digits!"))
        (let [r (qr-ref-raw r)]
          (str r (digit->char (checksum r))))))))
