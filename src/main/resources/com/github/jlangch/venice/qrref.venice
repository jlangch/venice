;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice QR Reference functions


(ns qrref)


(def bill-types { :bill        0
                  :reminder-1  1
                  :reminder-2  2
                  :reminder-3  3 })


;; bill type digit, version digit, checksum digit
(def- num-meta-chars 3)

(def- qr-ref-len 27)

(def- checksum-table [0, 9, 4, 6, 8, 2, 7, 1, 3, 5])

(defn- char->long [c] (- (long c) (long #\0)))


(defn- long->bill-type [n]
  (if-let [t (get (map-invert bill-types) n)]
    t
    (throw (ex :VncException (str "Invalid bill type index '" n "'!")))))

(defn- bill-type->long [t]
  (if-let [n (get bill-types t)]
    n
    (throw (ex :VncException (str "Invalid bill type '" (pr-str t) "'!")))))

(defn- remove-leading-zeroes [s]
  (loop [s s]
    (if (and (> (count s) 1) (str/starts-with? s "0"))
      (recur (str/rest s))
      s)))

(defn format [s]
  (->> (seq s)
       (reverse)
       (partition-all 5)
       (map #(apply str (reverse %)))
       (reverse)
       (str/join " ")))

(defn mod-10-checksum [s]
  (if-not (match? s #"[ 0-9]+")
    (throw (ex :VncException "The string must only contain spaces and digits!"))
    (->> (seq s)
         (filter str/digit?)
         (reduce (fn [carry d] (->> (mod (+ carry (char->long d)) 10)
                                    (get checksum-table)))
                 0))))

(defn qr-ref [version bill-type bill-nr]
  (let [ref (qr-ref-raw version bill-type bill-nr)]
    (str ref (mod-10-checksum ref))))

(defn- qr-ref-raw [version bill-type bill-nr]
  (let [padding-zeros (- qr-ref-len num-meta-chars (count bill-nr))]
    (if (neg? padding-zeros)
      (throw (ex :VncException "The QR-Reference bill number is too long!"))
      (str (str/repeat "0" padding-zeros)
           bill-nr
           (bill-type->long bill-type)
           version))))

(defn parse [ref]
  (when (str/blank? ref)
    (throw (ex :VncException "A QR-Reference must not be blank!")))

  (when-not (match? ref #"[ 0-9]+")
    (throw (ex :VncException "A QR-Reference must be built from spaces and digits only!")))

  (let [ref-norm (str/replace-all ref " " "")]
    (when (< (count ref-norm) 10)
      (throw (ex :VncException "A QR-Reference must have more than 10 digits!")))

    (let [meta      (str/nlast ref-norm 3)
          type      (char->long (first meta))
          version   (char->long (second meta))
          check     (char->long (third meta))
          raw-ref   (str/butlast ref-norm)
          check-eff (mod-10-checksum raw-ref)
          bill-nr   (str/nbutlast ref-norm 3)]
      (when-not (= check check-eff)
        (throw (ex :VncException
                   (str/format "Invalid QR-Reference checksum '%d' for ref '%s'. Effective checksum is '%d'!")
                   check
                   raw-ref
                   check-eff)))
      (when-not (= version 1)
        (throw (ex :VncException (str/format "Unsupported QR-Reference version %d!"
                                             version))))
     { :version  version
       :bill-typ (long->bill-type type)
       :bill-nr  (remove-leading-zeroes bill-nr) })))
