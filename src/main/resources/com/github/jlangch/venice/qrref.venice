;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice QR Reference functions


(ns qrref)


(def- checksum-table [0, 9, 4, 6, 8, 2, 7, 1, 3, 5])


(defn- digit->long [c] (- (long c) (long #\0)))    ;; #\2 -> 2


(defn- digit->char [c] (char (+ c (long #\0))))    ;; 2 -> #\2


(defn- remove-whitespaces [s]
  (apply str (filter #(not (str/whitespace? %)) (seq s))))


(defn- numeric? [s]
  (match? s #"[0-9]+"))


(defn- pad-with-leading-zeroes [ref]
  (let [padding-zeros (- 26 (count ref))]
    (if (neg? padding-zeros)
      (throw (ex :VncException "The QR-Reference ref number is too long!"))
      (str (str/repeat "0" padding-zeros) ref))))


(defn
  ^{ :arglists '("(create ref-raw)")
     :doc """
          Creates a QR reference according to the Swiss payment standards.

          A QR reference has 27 digits. The raw reference plus a checksum digit
          as the last digit.
          
          The raw reference passed must not have more than 26 digits. With less 
          than 26 digits leading '0' will be used to fill up to 26 digits.

          Raw reference:  "23055361346639301"

          QR reference:  "000000000230553613466393013"

          The QR reference can be formatted to "00 00000 00230 55361 34663 93013" 
          using:

          ```
          (qrref/format "000000000230553613466393013")
          ```

          [Swiss Payment Standards / de](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-de.pdf)

          [Swiss Payment Standards / en](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-en.pdf)
          """
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/create "1234")
           (qr/create "23055361346639301"))
         """ )
     :see-also '("qrref/valid?", "qrref/format", "qrref/checksum") }

  create [ref-raw]

  (let [r (remove-whitespaces ref-raw)]
    (when-not (numeric? r)
      (throw (ex :VncException "Invalid character in reference (digits allowed only)")))
    (when (> (count r) 26)
      (throw (ex :VncException "A raw QR reference must not have more than 26 digits")))

    (let [padded      (pad-with-leading-zeroes r)
          check-digit (digit->char (checksum padded))]
      (str padded check-digit))))


(defn
  ^{ :arglists '("(format ref)")
     :doc "Format a QR reference."
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/format "000000000230553613466393013"))
         """ )
     :see-also '("qrref/create", "qrref/valid?", "qrref/checksum") }

  format [ref]

  (->> (seq ref)
       (reverse)
       (partition-all 5)
       (map #(apply str (reverse %)))
       (reverse)
       (str/join " ")))


(defn 
  ^{ :arglists '("(valid? ref)")
     :doc """
          Returns true if ref is a valid QR reference else false.
          The reference may contain spaces.

          A valid QR reference must have 27 digits and the checksum must be
          correct. The last digit is the checksum digits for the first 26 digits.
          """
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/valid? "000000000230553613466393013")
           (qr/valid? "00 00000 00230 55361 34663 93013"))
         """ )
     :see-also '("qrref/create", "qrref/format", "qrref/checksum") }

  valid? [ref]

  (let [r (remove-whitespaces ref)]
    (if (and (numeric? r) (== 27 (count r)))
      (== 0 (checksum r))
      false)))


(defn 
  ^{ :arglists '("(checksum ref)")
     :doc """
          Computes the checksum for a raw reference. 

          The passed ref my be a raw QR reference or a QR reference with a
          checksum digit. It may contain spaces.

          Returns the computed checksum digit 0..9. 
          
          If the passed ref is a QR reference with a correct checksum digit the 
          computed checksum digit will always be 0. This fact is used for QR 
          reference validation!
          """
     :examples '(
         """
         (do
           (load-module :qrref ['qrref :as 'qr])
           (qr/checksum "230 55361 34663 9301")
           (qr/checksum "23055361346639301")
           (qr/checksum "00 00000 00230 55361 34663 9301")
           (qr/checksum "00000000023055361346639301"))
         """ )
     :see-also '("qrref/create", "qrref/valid?", "qrref/format") }

  checksum [ref]

  (let [r (remove-whitespaces ref)]
    (when-not (numeric? r)
      (throw (ex :VncException "Invalid character in reference (digits allowed only)")))

    (let [carry (reduce (fn [carry digit] (get checksum-table (mod (+ carry digit) 10))) 
                        0 
                        (map digit->long (seq r)))]
      (mod (- 10 carry) 10))))
