;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Aviron ClamAV client directory cycler

(ns aviron-cycler)

(import :org.repackage.com.github.jlangch.aviron.util.DirCycler)
(import :org.repackage.com.github.jlangch.aviron.util.IDirCycler)

(defn
  ^{ :arglists '(
          "(create root-dir)"
          "(create root-dir state-file)")
     :doc """
          Create a DirCycler on a directory with an optional state file. 
 
          If the state file is given (it must not necessarily exist at 
          construction time) the cycler saves its state automatically to this 
          file. 

          If the state file exists at construction time the cycler loads
          the state from the file and proceeds where it has left off.
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/root-dir demo-fs)]
              (aviron-cycler/create filestore-dir)))
          """
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  root-dir      (aviron-demo-filestore/root-dir demo-fs)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  state-file    (io/file root-dir "cycler.state")]
              (aviron-cycler/create filestore-dir state-file)))
          """)
     :see-also '(
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  create 
  
  ([root-dir]          
    { :pre [(or (string? root-dir) (io/file? root-dir))] }
    (. :DirCycler :new (io/file root-dir)))

  ([root-dir state-file]
    { :pre [(or (string? root-dir) (io/file? root-dir))
            (or (string? state-file) (io/file? state-file))] } 
    (. :DirCycler :new (io/file root-dir) (io/file state-file))))

(defn
  ^{ :arglists '(
          "(root-dir)")
     :doc """
          Returns the root dir
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/root-dir cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  root-dir [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :rootDir))

(defn
  ^{ :arglists '(
          "(dirs)")
     :doc """
          Returns a list of the managed subdirs
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/dirs cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  dirs [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :dirs))

(defn
  ^{ :arglists '(
          "(dir-names)")
     :doc """
          Returns a list of the managed subdir names
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
            (aviron-cycler/dir-names cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  dir-names [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (->> (. cycler :dirs)
         (map #(io/file-name %))))


(defn
  ^{ :arglists '(
          "(empty?)")
     :doc """
          Returns `true` if the number of sub dirs is zero else `false`
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/size empty?)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  empty? [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :isEmpty))


(defn
  ^{ :arglists '(
          "(size)")
     :doc """
          Returns the number of sub dirs
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/size cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  size [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :size))


(defn
  ^{ :arglists '(
          "(first?)")
     :doc """
          Returns `true` if the current sub dir is the first one else `false`
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/first? cycler)
              (aviron-cycler/next-dir cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  first? [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :isFirst))


(defn
  ^{ :arglists '(
          "(last?)")
     :doc """
          Returns `true` if the current sub dir is the last one (before starting 
          over again with the first one) else `false`
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/next-dir cycler)
              (aviron-cycler/last? cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  last? [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :isLast))


(defn
  ^{ :arglists '(
          "(next-dir)")
     :doc """
          Returns the next dir in the cycle or `nil` if the root dir does not 
          have any sub dirs
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/next-dir cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  next-dir [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :nextDir))


(defn
  ^{ :arglists '(
          "(peek-next-dir)")
     :doc """
          Returns the next dir in the cycle without advancing the cycler or 
          `nil` if the root dir does not have any sub dirs
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/peek-next-dir cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  peek-next-dir [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :peekNextDir))


(defn
  ^{ :arglists '(
          "(refresh)")
     :doc """
          Refreshes the cycler. Rescans all sub dirs.
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/refresh cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/last-dir-name"
          "aviron-cycler/last-dir-timestamp") }

  refresh [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :refresh))

(defn
  ^{ :arglists '(
          "(last-dir-name)")
     :doc """
          Returns the last sub dir name in the cycle or `nil` if there was not 
          yet a call to `next`
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
               (aviron-cycler/next-dir cycler)
               (aviron-cycler/last-dir-name cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-timestamp") }

  last-dir-name [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :lastDirName))

(defn
  ^{ :arglists '(
          "(last-dir-timestamp)")
     :doc """
          Returns the timestamp the last sub dir was run or `nil` if there was 
          no run yet.
          """
     :examples '(
          """
          (do
            (load-module :aviron-cycler)
            (load-module :aviron-demo-filestore)
            (let [demo-fs       (aviron-demo-filestore/create)
                  _             (aviron-demo-filestore/populate-with-demo-files demo-fs 3 5)
                  filestore-dir (aviron-demo-filestore/filestore-dir demo-fs)
                  cycler        (aviron-cycler/create filestore-dir)]
              (aviron-cycler/next-dir cycler)
              (aviron-cycler/last-dir-timestamp cycler)))
          """)
     :see-also '(
          "aviron-cycler/create"
          "aviron-cycler/root-dir"
          "aviron-cycler/dirs"
          "aviron-cycler/dir-names"
          "aviron-cycler/next-dir"
          "aviron-cycler/peek-next-dir"
          "aviron-cycler/refresh"
          "aviron-cycler/last-dir-name") }

  last-dir-timestamp [cycler]          
    { :pre [(instance-of? :IDirCycler cycler)] }
    (. cycler :lastDirTimestamp))

