**Eval

import com.github.jlangch.venice.Venice;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      Long val = (Long)venice.eval("(+ 1 2)");
   }
}


**Passing parameters

import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.Parameters;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      Long val = (Long)venice.eval(
                         "(+ x y 3)",
                         Parameters.of("x", 6, "y", 3L));
   }
}


**Dealing with Java objects

import java.awt.Point;
import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.Parameters;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      // returns a string: "Point=(x: 100.0, y: 200.0)"
      String ret = (String)venice.eval(
                            "(let [x (:x point)                         \n" +
                            "      y (:y point)]                        \n" +
                            "  (str \"Point=(x: \" x \", y: \" y \")\")   ", 
                            Parameters.of("point", new Point(100, 200))));

      // returns a java.awt.Point: [x=110,y=220]
      Point point = (Point)venice.eval(
                            "(. :java.awt.Point :new (+ x 10) (+ y 20))", 
                            Parameters.of("x", 100, "y", 200)));
   }
}


**Precompiled

import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.IPreCompiled;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      IPreCompiled precompiled = venice.precompile("example", "(+ 1 x)");

      for(int ii=0; ii<100; ii++) {
         venice.eval(precompiled, Parameters.of("x", ii));
      }
   }
}


**Java Interop

import java.time.ZonedDateTime;
import com.github.jlangch.venice.Venice;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      Long val = (Long)venice.eval("(. :java.lang.Math :min 20 30)");

      ZonedDateTime ts = (ZonedDateTime)venice.eval(
                             "(. (. :java.time.ZonedDateTime :now) :plusDays 5)");
   }
}


**Sandbox

import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.VncException;
import com.github.jlangch.venice.javainterop.SandboxInterceptor;
import com.github.jlangch.venice.javainterop.SandboxRules;


public class SandboxExample {

    public static void main(final String[] args) {
        try {
            sandboxing();
        }
        catch(VncException ex) {
            ex.printVeniceStackTrace();
        }
        catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    private static void sandboxing() {
        final Venice venice = new Venice(createSandbox());

        // rule: "java.lang.Math:PI"
        // => OK (whitelisted static field)
        venice.eval("(. :java.lang.Math :PI)");

        // rule: "java.lang.Math:min"
        // => OK (whitelisted static method)
        venice.eval("(. :java.lang.Math :min 20 30)");

        // rule: "java.time.ZonedDateTime:*
        // => OK (whitelisted constructor & instance method)
        venice.eval("(. (. :java.time.ZonedDateTime :now) :plusDays 5))");

        // rule: "java.util.ArrayList:new" and "java.util.ArrayList:add"
        // => OK (whitelisted constructor & instance method)
        venice.eval(
            "(doto (. :java.util.ArrayList :new)  " +
            "      (. :add 1)                     " +
            "      (. :add 2))                    ");

        // rule: "java.awt.**:*"
        // => OK (whitelisted)
        venice.eval(
            "(-<> (. :java.awt.color.ColorSpace :CS_LINEAR_RGB)      " +
            "     (. :java.awt.color.ICC_ColorSpace :getInstance <>) " +
            "     (. <> :getMaxValue 0))                             ");

        // => FAIL (invoking non whitelisted static method)
        venice.eval("(. :java.lang.System :exit 0)");

        // => FAIL (invoking blacklisted Venice I/O function)
        venice.eval("(io/slurp \"/tmp/file\")");

        // => OK (invoking whitelisted Venice I/O function 'println')
        venice.eval("(println 100)");

        // => FAIL exceeded max exec time of 3s
        venice.eval("(sleep 10_000)");

        // => FAIL (accessing non whitelisted system property)
        venice.eval("(system-prop \"db.password\")");

        // => FAIL (accessing non whitelisted system environment variable)
        venice.eval("(system-env \"USER\")");

        // => FAIL (accessing non whitelisted classpath resources)
        venice.eval("(io/load-classpath-resource \"resources/images/img.tiff\")");
    }


    private static SandboxInterceptor createSandbox() {
        return new SandboxInterceptor(
                    new SandboxRules()
                          // Java interop: whitelist rules
                          .withStandardSystemProperties()
                          .withSystemProperties("db.name", "db.port")
                          .withSystemEnvs("SHELL", "HOME")
                          .withClasspathResources("resources/images/*.png")
                          .withClasses(
                            "java.lang.Math:PI",
                            "java.lang.Math:min",
                            "java.time.ZonedDateTime:*",
                            "java.awt.**:*",
                            "java.util.ArrayList:new",
                            "java.util.ArrayList:add")

                          // Venice extension modules: whitelist rules
                          .withVeniceModules(
                            "crypt",
                            "kira",
                            "math")

                          // Venice functions: blacklist rules
                          .rejectAllIoFunctions()
                          .rejectAllConcurrencyFunctions()
                          .rejectAllSystemFunctions()
                          .rejectAllSenstiveSpecialForms()
                          .rejectVeniceFunctions(
                            "time/date",
                            "time/zone-ids")

                          // Venice functions: whitelist rules for print functions
                          // to offset blacklist rules by individual functions
                          .whitelistVeniceFunctions("*print*")

                          // Generic rules
                          .withMaxFutureThreadPoolSize(20)
                          .withMaxExecTimeSeconds(3));
    }
}
