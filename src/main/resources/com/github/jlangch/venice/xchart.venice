;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; XChart

;;;; Thanks to Jean Niklas L'orange and his clojure xchart project
;;;; (https://github.com/hypirion/clj-xchart). Venice's xchart
;;;; builds heavily on Jean Niklas' smart work.
;;;; See: https://hypirion.github.io/clj-xchart/examples

;;;; Install XChart 3rd party libraries:
;;;;
;;;;   (load-module :xchart-install)
;;;;   (xchart-install/install :dir (repl/libs-dir) :silent false)

;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;; Requires XChart 3.8.6 or newer
;;
;; XChart 3.8.6 is based on pdfbox 3.0.0
;;
;; Previous versions are based on pdfbox 2.x
;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


(ns xchart)

(load-module :semver)


;; ---------------------------------------------------------------------------
;; imports
;; ---------------------------------------------------------------------------

(import :com.github.jlangch.venice.impl.util.xchart.XChartEncoder)

(import :org.knowm.xchart.BubbleChart)
(import :org.knowm.xchart.XYChart)
(import :org.knowm.xchart.PieChart)
(import :org.knowm.xchart.CategoryChart)
(import :org.knowm.xchart.BubbleSeries$BubbleSeriesRenderStyle)
(import :org.knowm.xchart.CategorySeries$CategorySeriesRenderStyle)
(import :org.knowm.xchart.PieSeries$PieSeriesRenderStyle)
(import :org.knowm.xchart.XYSeries$XYSeriesRenderStyle)
(import :org.knowm.xchart.XChartPanel)
(import :org.knowm.xchart.BitmapEncoder)
(import :org.knowm.xchart.BitmapEncoder$BitmapFormat)

(import :org.knowm.xchart.style.Styler)
(import :org.knowm.xchart.style.AxesChartStyler)
(import :org.knowm.xchart.style.BoxStyler)
(import :org.knowm.xchart.style.BubbleStyler)
(import :org.knowm.xchart.style.CategoryStyler)
(import :org.knowm.xchart.style.DialStyler)
(import :org.knowm.xchart.style.HeatMapStyler)
(import :org.knowm.xchart.style.PieStyler)
(import :org.knowm.xchart.style.RadarStyler)
(import :org.knowm.xchart.style.XYStyler)
(import :org.knowm.xchart.style.Styler$LegendPosition)
(import :org.knowm.xchart.style.Styler$LegendLayout)
(import :org.knowm.xchart.style.Styler$YAxisPosition)
(import :org.knowm.xchart.style.AxesChartStyler$TextAlignment)
(import :org.knowm.xchart.style.PieStyler$LabelType)
(import :org.knowm.xchart.style.theme.GGPlot2Theme)
(import :org.knowm.xchart.style.theme.MatlabTheme)
(import :org.knowm.xchart.style.theme.XChartTheme)

(import :org.knowm.xchart.style.markers.Circle)
(import :org.knowm.xchart.style.markers.Cross)
(import :org.knowm.xchart.style.markers.Diamond)
(import :org.knowm.xchart.style.markers.None)
(import :org.knowm.xchart.style.markers.Oval)
(import :org.knowm.xchart.style.markers.Plus)
(import :org.knowm.xchart.style.markers.Rectangle)
(import :org.knowm.xchart.style.markers.Square)
(import :org.knowm.xchart.style.markers.Trapezoid)
(import :org.knowm.xchart.style.markers.TriangleDown)
(import :org.knowm.xchart.style.markers.TriangleUp)

(import :org.knowm.xchart.style.lines.SeriesLines)

(import :java.lang.Runnable)

(import :java.awt.Color)
(import :java.awt.GridLayout)

(import :javax.swing.JPanel)
(import :javax.swing.JFrame)
(import :javax.swing.SwingUtilities)




;; ---------------------------------------------------------------------------
;; utils
;; ---------------------------------------------------------------------------

(defn
   ^{ :arglists '("(xchart/check-required-libs)")
      :doc """
           Checks if the 3rd party libraries required for generating charts
           are available. Throws an exception if not.
           """
      :examples '("(xchart/check-required-lib)") }

  xchart/check-required-libs []

  (when-not (exists-class? :org.knowm.xchart.PieChart)
    (throw (ex :VncException
               """
               The XChart library is not on the classpath!
             
               (do
                 (load-module :maven)
                 (maven/download "org.knowm.xchart:xchart:3.8.6"))
               """)))

  (let [version (jar-maven-manifest-version :org.knowm.xchart :xchart)]
    (when (semver/older? version "3.8.6")
      (throw (ex :VncException
                 """
                 The XChart library on the classpath is too old. Use 
                 version 3.8.6 or newer!
                 """)))))


(defn
   ^{ :arglists '("(xchart/available?)")
      :doc "Returns true if XChart 3.8.1 or newer is available (libs on classpath) otherwise false"
      :examples '("(xchart/available?)") }

   xchart/available? []

   (try
     (xchart/check-required-libs)
     true
     (catch :RuntimeException e 
       false)))


;; Example: (xchart/doto-cond     =>    (let [e expr]
;;             expr                        (when cond1 (my e call))
;;             cond1 (my call)             (when cond2 (my2 e call2))
;;             cond2 (my2 call2))          e)
(defmacro xchart/doto-cond [expr & clauses]
   (let [pairs (partition 2 clauses)
         expr-sym (gensym "expr")]
       `(let [~expr-sym ~expr]
          ~@(map (fn [[cond_ clause]]
                     `(when ~cond_ (~(first clause) ~expr-sym ~@(rest clause))))
                 pairs)
          ~expr-sym)))


;; Maps a function over the values of an associative collection.
(defn xchart/map-vals [f coll]
  (reduce-kv (fn [m k v] (assoc m k (f v))) {} coll))


(defn xchart/transpose-single [acc k1 v1]
  (reduce-kv (fn [m k2 v2] (assoc-in m [k2 k1] v2)) acc v1))


(defn xchart/transpose-map [series]
  (reduce-kv xchart/transpose-single {} series))


(defn xchart/extract-series [keymap coll]
  (xchart/map-vals (fn [x] (map x coll)) keymap))


(defn xchart/normalize-group [m]
  (let [sum (reduce + (vals m))]
       (xchart/map-vals (fn [x] (/ x sum)) m)))


(defn xchart/normalize-categories [m]
  (->> (xchart/transpose-map m)
       (map-vals normalize-group)
       xchart/transpose-map))


(defn xchart/assoc-in-nonexisting [m ks v]
  (if (== (get-in m ks :not-found) :not-found)
    (assoc-in m ks v)
    m))


;; ---------------------------------------------------------------------------
;; export / view
;; ---------------------------------------------------------------------------

(defn xchart/to-bytes [chart type]
  (let [format (get xchart/bitmap-formats type)]
       (. :BitmapEncoder :getBitmapBytes chart format)))


(defn xchart/to-bytes-with-dpi [chart type dpi]
    (. :XChartEncoder :exportToBitmapWithDPI chart type dpi))


(defn xchart/write-to-file [chart type dpi file]
  (try-with [os (io/file-out-stream file)]
     (. :XChartEncoder :exportToBitmapStreamWithDPI chart os type dpi)))


(defn xchart/swing-open-window [chart title]
  (let [frame (. :JFrame :new title)
        closeOP (. :JFrame :DISPOSE_ON_CLOSE)]
     (. frame :setDefaultCloseOperation closeOP)
     (. frame :add (. :XChartPanel :new chart))
     (. frame :pack)
     (. frame :setVisible true)))


(defn xchart/swing-view-chart [chart title]
  (let [open-win (fn [] (xchart/swing-open-window chart title))]
     (. :SwingUtilities :invokeLater (proxify :Runnable { :run open-win }))))





;; ---------------------------------------------------------------------------
;; constants
;; ---------------------------------------------------------------------------

(def xchart/colors
   { :blue         (. :Color :BLUE)
     :black        (. :Color :BLACK)
     :cyan         (. :Color :CYAN)
     :dark-gray    (. :Color :DARK_GRAY)
     :gray         (. :Color :GRAY)
     :green        (. :Color :GREEN)
     :light-gray   (. :Color :LIGHT_GRAY)
     :magenta      (. :Color :MAGENTA)
     :orange       (. :Color :ORANGE)
     :pink         (. :Color :PINK)
     :red          (. :Color :RED)
     :white        (. :Color :WHITE)
     :yellow       (. :Color :YELLOW)

     :x-blue       (. :Color :new   0I  55I 255I 180I)
     :x-dark-blue  (. :Color :new   0I  39I  88I 180I)
     :x-light-blue (. :Color :new 200I 230I 255I 180I)
     :x-orange     (. :Color :new 255I 172I   0I 180I)
     :x-purple     (. :Color :new 128I   0I 255I 180I)
     :x-green      (. :Color :new   0I 205I   0I 180I)
     :x-dark-green (. :Color :new  10I  97I   0I 180I)
     :x-red        (. :Color :new 205I   0I   0I 180I)
     :x-pink       (. :Color :new 255I 166I 201I 180I)
     :x-dark-pink  (. :Color :new  88I   0I  85I 180I)
     :x-yellow     (. :Color :new 255I 215I   0I 180I)
     :x-magenta    (. :Color :new 255I   0I 255I 180I)
     :x-light-gray (. :Color :new 207I 207I 207I 180I)
     :x-dark-gray  (. :Color :new 100I 100I 100I 180I)
     :x-cyan       (. :Color :new   0I 255I 255I 180I)
     :x-brown      (. :Color :new 102I  56I  10I 180I)
     :x-black      (. :Color :new   0I   0I   0I 180I) })


(def xchart/strokes
   { :none      (. :SeriesLines :NONE)
     :solid     (. :SeriesLines :SOLID)
     :dash-dot  (. :SeriesLines :DASH_DOT)
     :dash-dash (. :SeriesLines :DASH_DASH)
     :dot-dot   (. :SeriesLines :DOT_DOT) })


(def xchart/markers
   { :circle        (. :Circle :new)
     :cross         (. :Cross :new)
     :diamond       (. :Diamond :new)
     :none          (. :None :new)
     :oval          (. :Oval :new)
     :plus          (. :Plus :new)
     :rectangle     (. :Rectangle :new)
     :square        (. :Square :new)
     :trapezoid     (. :Trapezoid :new)
     :triangle-up   (. :TriangleUp :new)
     :triangle-down (. :TriangleDown :new) })


(def xchart/xy-render-styles
   { :area       (. :XYSeries$XYSeriesRenderStyle :Area)
     :scatter    (. :XYSeries$XYSeriesRenderStyle :Scatter)
     :step       (. :XYSeries$XYSeriesRenderStyle :Step)
     :step-area  (. :XYSeries$XYSeriesRenderStyle :StepArea)
     :line       (. :XYSeries$XYSeriesRenderStyle :Line) })


(def xchart/pie-render-styles
   { :pie    (. :PieSeries$PieSeriesRenderStyle :Pie)
     :donut  (. :PieSeries$PieSeriesRenderStyle :Donut) })


(def xchart/pie-annotation-types
   { :name                 (. :PieStyler$LabelType :Name)
     :name-and-percentage  (. :PieStyler$LabelType :NameAndPercentage)
     :name-and-value       (. :PieStyler$LabelType :NameAndValue)
     :percentage           (. :PieStyler$LabelType :Percentage)
     :value                (. :PieStyler$LabelType :Value)})


(def xchart/category-render-styles
   { :area        (. :CategorySeries$CategorySeriesRenderStyle :Area)
     :bar         (. :CategorySeries$CategorySeriesRenderStyle :Bar)
     :line        (. :CategorySeries$CategorySeriesRenderStyle :Line)
     :scatter     (. :CategorySeries$CategorySeriesRenderStyle :Scatter)
     :stepped-bar (. :CategorySeries$CategorySeriesRenderStyle :SteppedBar)
     :stick       (. :CategorySeries$CategorySeriesRenderStyle :Stick) })


(def xchart/bubble-render-styles
   { :round  (. :BubbleSeries$BubbleSeriesRenderStyle :Round) })


(def xchart/text-alignments
   { :centre  (. :AxesChartStyler$TextAlignment :Centre)
     :left    (. :AxesChartStyler$TextAlignment :Left)
     :right   (. :AxesChartStyler$TextAlignment :Right) })


(def xchart/legend-positions
   { :inside-n   (. :Styler$LegendPosition :InsideN)
     :inside-ne  (. :Styler$LegendPosition :InsideNE)
     :inside-nw  (. :Styler$LegendPosition :InsideNW)
     :inside-se  (. :Styler$LegendPosition :InsideSE)
     :inside-sw  (. :Styler$LegendPosition :InsideSW)
     :outside-e  (. :Styler$LegendPosition :OutsideE)
     :outside-s  (. :Styler$LegendPosition :OutsideS) })


(def xchart/legend-layout
   { :vertical   (. :Styler$LegendLayout :Vertical)
     :horizontal (. :Styler$LegendLayout :Horizontal) })


;; TODO support this
(def xchart/y-axis-position
   { :left   (. :Styler$YAxisPosition :Left)
     :right  (. :Styler$YAxisPosition :Right) })


(def xchart/themes
   { :ggplot2  (. :GGPlot2Theme :new)
     :matlab   (. :MatlabTheme :new)
     :xchart   (. :XChartTheme :new) })


(def xchart/bitmap-formats
   { :png  (. :BitmapEncoder$BitmapFormat :PNG)
     :gif  (. :BitmapEncoder$BitmapFormat :GIF)
     :bmp  (. :BitmapEncoder$BitmapFormat :BMP)
     :jpg  (. :BitmapEncoder$BitmapFormat :JPG) })


(def xchart/file-extension
   { :png  ".png"
     :gif  ".gif"
     :bmp  ".bmp"
     :jpg  ".jpg" })



;; ---------------------------------------------------------------------------
;; chart styling
;; ---------------------------------------------------------------------------

(defn xchart/set-legend!
   [styler {:keys [background-color border-color font padding
                   position layout series-line-length visible?]}]
   (xchart/doto-cond
      styler
      background-color      (. :setLegendBackgroundColor (get xchart/colors background-color background-color))
      border-color          (. :setLegendBorderColor (get xchart/colors border-color border-color))
      font                  (. :setLegendFont font)
      padding               (. :setLegendPadding padding)
      position              (. :setLegendPosition (get xchart/legend-positions position))
      layout                (. :setLegendLayout (get xchart/legend-layout layout))
      series-line-length    (. :setLegendSeriesLineLength series-line-length)
      (not (nil? visible?)) (. :setLegendVisible visible?)))


(defn xchart/set-chart-title-style!
   [styler {:keys [box font padding visible?]}]
   (let [ box-background-color (:background-color box)
          box-border-color (:color box)
          box-visible? (:visible? box) ]
        (xchart/doto-cond
           styler
           box-background-color      (. :setChartTitleBoxBackgroundColor (get xchart/colors box-background-color box-background-color))
           box-border-color          (. :setChartTitleBoxBorderColor (get xchart/colors box-border-color box-border-color))
           (not (nil? box-visible?)) (. :setChartTitleBoxVisible box-visible?)
           font                      (. :setChartTitleFont font)
           padding                   (. :setChartTitlePadding padding)
           (not (nil? visible?))     (. :setChartTitleVisible visible?))))


(defn xchart/set-chart-style!
   [styler {:keys [background-color font-color padding title]}]
   (xchart/doto-cond
      styler
      background-color (. :setChartBackgroundColor (get xchart/colors background-color background-color))
      font-color       (. :setChartFontColor (get xchart/colors font-color font-color))
      padding          (. :setChartPadding padding)
      title            (xchart/set-chart-title-style! title)))


(defn xchart/set-plot-style!
   [styler {:keys [background-color border-color border-visible? content-size]}]
   (xchart/doto-cond
      styler
      background-color             (. :setPlotBackgroundColor (get xchart/colors background-color background-color))
      border-color                 (. :setPlotBorderColor (get xchart/colors border-color border-color))
      (not (nil? border-visible?)) (. :setPlotBorderVisible border-visible?)
      content-size                 (. :setPlotContentSize content-size)))


(defn xchart/set-series-style! [styler series]
   (let [series-colors  (apply mutable-vector (. styler :getSeriesColors))
         series-lines   (apply mutable-vector (. styler :getSeriesLines))
         series-markers (apply mutable-vector (. styler :getSeriesMarkers))
         series         (into [] series)]
      (dotimes [i (count series)]
          (let [{:keys [color stroke marker]} (nth series i)]
               (when color
                     (assoc! series-colors i (get xchart/colors color color)))
               (when stroke
                     (assoc! series-lines i (get xchart/strokes stroke stroke)))
               (when marker
                     (assoc! series-markers i (get xchart/markers marker marker)))))
      (. styler :setSeriesColors series-colors)
      (. styler :setSeriesLines series-lines)
      (. styler :setSeriesMarkers series-markers)))


(defn xchart/set-default-style!
   [styler {:keys [annotations-font annotations? chart plot legend series]}]
   (xchart/doto-cond
      styler
      annotations-font          (. :setAnnotationsFont annotations-font)
      (not (nil? annotations?)) (. :setHasAnnotations annotations?)
      chart                     (xchart/set-chart-style! chart)
      legend                    (xchart/set-legend! legend)
      plot                      (xchart/set-plot-style! plot)
      series                    (xchart/set-series-style! series)))


(defn xchart/set-axis-ticks!
   [styler {:keys [labels marks padding visible? line-visible?]}]
   (do
      (let [{:keys [color font]} labels]
         (xchart/doto-cond
            styler
            color (. :setAxisTickLabelsColor (get xchart/colors color color))
            font  (. :setAxisTickLabelsFont font)))
      (let [{:keys [length color stroke visible?]} marks]
         (xchart/doto-cond
            styler
            length                (. :setAxisTickMarkLength length)
            color                 (. :setAxisTickMarksColor (get xchart/colors color color))
            stroke                (. :setAxisTickMarksStroke (get xchart/strokes stroke stroke))
            (not (nil? visible?)) (. :setAxisTicksMarksVisible visible?)))
      (xchart/doto-cond
         styler
         padding                    (. :setAxisTickPadding padding)
         (not (nil? line-visible?)) (. :setAxisTicksLineVisible line-visible?)
         (not (nil? visible?))      (. :setAxisTicksVisible visible?))))


(defn xchart/set-axis-title!
   [styler {:keys [font visible? padding]}]
   (xchart/doto-cond
      styler
      font                  (. :setAxisTitleFont font)
      padding               (. :setAxisTitlePadding padding)
      (not (nil? visible?)) (. :setAxisTitleVisible visible?)))


(defn xchart/set-axis-plot!
   [styler {:keys [grid-lines margin tick-marks?]}]
   (do
      (let [{:keys [horizontal? vertical? visible? color stroke]} grid-lines]
         (xchart/doto-cond
            styler
            (not (nil? visible?))    (. :setPlotGridLinesVisible visible?)
            color                    (. :setPlotGridLinesColor (get xchart/colors color color))
            stroke                   (. :setPlotGridLinesStroke (get xchart/strokes stroke stroke))
            (not (nil? horizontal?)) (. :setPlotGridHorizontalLinesVisible horizontal?)
            (not (nil? vertical?))   (. :setPlotGridVerticalLinesVisible vertical?)))
      (xchart/doto-cond
         styler
         margin                   (. :setPlotMargin margin)
         (not (nil? tick-marks?)) (. :setPlotTicksMarksVisible tick-marks?))))


(defn xchart/set-x-axis-style!
   [styler
    {:keys [label logarithmic? max min decimal-pattern date-pattern
            tick-mark-spacing-hint ticks-visible? title-visible?]}]
   (do
      (let [{:keys [alignment rotation max-count]} label]
         (xchart/doto-cond
            styler
            alignment (. :setXAxisLabelAlignment (get xchart/text-alignments alignment alignment))
            rotation  (. :setXAxisLabelRotation rotation)
            max-count (. :setXAxisMaxLabelCount max-count)))
      (xchart/doto-cond
         styler
         date-pattern                (. :setDatePattern date-pattern)
         decimal-pattern             (. :setXAxisDecimalPattern decimal-pattern)
         (not (nil? logarithmic?))   (. :setXAxisLogarithmic logarithmic?)
         max                         (. :setXAxisMax max)
         min                         (. :setXAxisMin min)
         tick-mark-spacing-hint      (. :setXAxisTickMarkSpacingHint tick-mark-spacing-hint)
         (not (nil? ticks-visible?)) (. :setXAxisTicksVisible ticks-visible?)
         (not (nil? title-visible?)) (. :setXAxisTitleVisible title-visible?))))


(defn xchart/set-y-axis-style!
   [styler {:keys [label logarithmic? max min decimal-pattern
                   tick-mark-spacing-hint ticks-visible? title-visible?]}]
   (do
      (let [{:keys [alignment rotation]} label]
         (xchart/doto-cond
            styler
            alignment (. :setYAxisLabelAlignment (get xchart/text-alignments alignment alignment))))

      (xchart/doto-cond
         styler
         decimal-pattern             (. :setYAxisDecimalPattern decimal-pattern)
         (not (nil? logarithmic?))   (. :setYAxisLogarithmic logarithmic?)
         max                         (. :setYAxisMax max)
         min                         (. :setYAxisMin min)
         tick-mark-spacing-hint      (. :setYAxisTickMarkSpacingHint tick-mark-spacing-hint)
         (not (nil? ticks-visible?)) (. :setYAxisTicksVisible ticks-visible?)
         (not (nil? title-visible?)) (. :setYAxisTitleVisible title-visible?))))


(defn xchart/set-axes-style!
   [styler {:keys [axis error-bars-color plot x-axis y-axis
                   date-pattern decimal-pattern locale marker timezone]}]
   (let [ebc error-bars-color
         axis-ticks (:ticks axis)
         axis-title (:title axis)
         marker-size (:size marker)]
        (xchart/doto-cond
           styler
           axis-ticks      (xchart/set-axis-ticks! axis-ticks)
           axis-title      (xchart/set-axis-title! axis-title)
           date-pattern    (. :setDatePattern date-pattern)
           decimal-pattern (. :setDecimalPattern decimal-pattern)

           ;; The logic here is as follows: You can specify a color for the error
           ;; bars. If the color is :match-series, then the color matches the series
           ;; color, but if you specify something else, you cannot match the series!
           (and ebc (not (== ebc :match-series))) (. :setErrorBarsColor (get xchart/colors ebc ebc))
           (and ebc (not (== ebc :match-series))) (. :setErrorBarsColorSeriesColor false)
           (== ebc :match-series)                 (. :setErrorBarsColorSeriesColor true)

           locale      (. :setLocale locale)
           marker-size (. :setMarkerSize marker-size)
           plot        (xchart/set-axis-plot! plot)
           timezone    (. :setTimezone timezone)
           x-axis      (xchart/set-x-axis-style! x-axis)
           y-axis      (xchart/set-y-axis-style! y-axis))))


(defn xchart/add-raw-series
   ([chart s-name x-data y-data]
     (xchart/add-raw-series chart s-name x-data y-data nil))
   ([chart s-name x-data y-data error-bars]
     (if (some? error-bars)
         (. chart :addSeries s-name x-data y-data error-bars)
         (. chart :addSeries s-name x-data y-data))))


(defn xchart/attach-default-font [style-map]
   (if-let [font (:font style-map)]
      (-> style-map
          (dissoc style-map :font)
          (xchart/assoc-in-nonexisting [:axis :ticks :labels :font] font)
          (xchart/assoc-in-nonexisting [:axis :title :font] font)
          (xchart/assoc-in-nonexisting [:legend :font] font)
          (xchart/assoc-in-nonexisting [:annotations-font] font)
          (xchart/assoc-in-nonexisting [:chart :title :font] font))
      style-map))



;; ---------------------------------------------------------------------------
;; XY chart
;; ---------------------------------------------------------------------------

(defn xchart/xy-chart-add-series! [chart s-name data]
   (if (sequential? data)
       (apply xchart/add-raw-series chart s-name data)
       (let [{:keys [x y error-bars style]} data
             {:keys [marker-color marker-type
                     line-color line-style line-width
                     fill-color show-in-legend? render-style]} style]
            (xchart/doto-cond
               (if error-bars
                   (xchart/add-raw-series chart s-name x y error-bars)
                   (xchart/add-raw-series chart s-name x y))
               render-style                 (. :setXYSeriesRenderStyle (get xchart/xy-render-styles render-style))
               marker-color                 (. :setMarkerColor (get xchart/colors marker-color marker-color))
               marker-type                  (. :setMarker (get xchart/markers marker-type marker-type))
               line-color                   (. :setLineColor (get xchart/colors line-color line-color))
               line-style                   (. :setLineStyle (get xchart/strokes line-style line-style))
               line-width                   (. :setLineWidth line-width)
               fill-color                   (. :setFillColor (get xchart/colors fill-color fill-color))
               (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?)))))


(defn xchart/xy-chart
     [series {:keys [width height title theme render-style]
              :or {width 640 height 500}
              :as styling}]
     (let [chart (. :XYChart :new width height)
           styler (cast :XYStyler (. chart :getStyler))
           styling (xchart/attach-default-font styling)]

        (xchart/doto-cond
           styler
           theme        (. :setTheme (get xchart/themes theme theme))
           render-style (. :setDefaultSeriesRenderStyle (get xchart/xy-render-styles render-style)))

        (docoll (fn [[s-name data]] (xchart/xy-chart-add-series! chart s-name data)) series)

        (doto styler
              (xchart/set-default-style! styling)
              (xchart/set-axes-style! styling))

        (xchart/doto-cond
            chart
            title (. :setTitle title)
            (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
            (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title)))))



;; ---------------------------------------------------------------------------
;; Area chart
;; ---------------------------------------------------------------------------

(defn xchart/category-series-xs [series]
  (->> (vals series)
       (mapcat (fn [m] (:x m)) )
       (into (set ))))


(defn xchart/reorder-category-series [{:keys [x y] :as series} x-order]
  (let [mapping (zipmap x y)]
       (assoc series
              :x x-order
              :y (mapv (fn [x] (get mapping x 0.0)) x-order))))


(defn xchart/normalize-category-series [series-data]
  (cond (and (map? series-data)
             (contains? series-data :x)
             (contains? series-data :y)) series-data

        (and (map? series-data)
             (contains? series-data :content)) (-> (:content series-data)
                                                   (xchart/normalize-category-series)
                                                    ;; retain styling data:
                                                   (merge (dissoc series-data :content)))
        ;; Assuming keys are strings/vals
        (and (map? series-data)
             (every? (comp not keyword?)
                     (keys series-data))) {:x (map first  (into [] series-data))
                                           :y (map second (into [] series-data))}
        (sequential? series-data) {:x (first series-data)
                                   :y (second series-data)}))


(defn xchart/normalize-category-series-map [series-map x-order]
  (let [series-map (xchart/map-vals xchart/normalize-category-series series-map)
        x-order (into [] x-order)
        extra-xs (sort (difference (xchart/category-series-xs series-map)
                                   (into (set ) x-order)))
        x-order (into x-order extra-xs)]
     (xchart/map-vals (fn [x] (xchart/reorder-category-series x x-order)) series-map)))


(defn xchart/category-add-series! [chart s-name data]
   (if (sequential? data)
      (apply xchart/add-raw-series chart s-name data)
      (let [{:keys [x y error-bars style]} data
            {:keys [marker-color marker-type
                    line-color line-style line-width
                    fill-color show-in-legend? render-style]} style]
         (xchart/doto-cond
            (if error-bars
                (xchart/add-raw-series chart s-name x y error-bars)
                (xchart/add-raw-series chart s-name x y))
            render-style                 (. :setChartCategorySeriesRenderStyle (get xchart/category-render-styles render-style))
            marker-color                 (. :setMarkerColor (get xchart/colors marker-color marker-color))
            marker-type                  (. :setMarker (get xchart/markers marker-type marker-type))
            line-color                   (. :setLineColor (get xchart/colors line-color line-color))
            line-style                   (. :setLineStyle (get xchart/strokes line-style line-style))
            line-width                   (. :setLineWidth line-width)
            fill-color                   (. :setFillColor (get xchart/colors fill-color fill-color))
            (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?)))))


(defn xchart/category-chart*
   [series {:keys [width height title theme render-style available-space-fill
                   overlap? stacked?]
            :or {width 640 height 500}
           :as styling}]

   (let [chart (. :CategoryChart :new width height)
         styler (cast :CategoryStyler (. chart :getStyler))
         styling (xchart/attach-default-font styling)]

      (docoll (fn [[s-name data]] (xchart/category-add-series! chart s-name data)) series)

      (xchart/doto-cond
         styler
         theme                 (. :setTheme (get xchart/themes theme theme))
         render-style          (. :setDefaultSeriesRenderStyle (get xchart/category-render-styles render-style))
         available-space-fill  (. :setAvailableSpaceFill available-space-fill)
         (not (nil? overlap?)) (. :setOverlapped overlap?)
         (not (nil? stacked?)) (. :setStacked stacked?))

      (doto styler
            (xchart/set-default-style! styling)
            (xchart/set-axes-style! styling))

      (xchart/doto-cond
         chart
         title (. :setTitle title)
         (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
         (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title)))))


(defn xchart/category-chart
  [series {:keys [x-axis series-order] :as styling}]
  (let [x-order (:order x-axis)
        normalized-map (xchart/normalize-category-series-map series x-order)
        extra-categories (->> (apply dissoc normalized-map series-order)
                              (sort-by key))
        normalized-seq (concat (keep (fn [x] (find normalized-map x)) series-order)
                                extra-categories)]
    (xchart/category-chart* normalized-seq styling)))




;; ---------------------------------------------------------------------------
;; Bubble chart
;; ---------------------------------------------------------------------------

(defn xchart/max-bubble-value [series]
  (reduce max (mapcat :bubble (vals series))))


(defn xchart/scale-bubbles [series in-val out-val]
   (let [bubble-fn (fn [x] (* out-val (Math/sqrt (/ x in-val))))]
      (xchart/map-vals
         (fn [data] (update data :bubble (fn [x] (map bubble-fn x))))
         series)))


(defn xchart/bubble-add-series! [chart s-name data]
   (if (sequential? data)
     (apply xchart/add-raw-series chart s-name data)
     (let [{:keys [x y bubble style]} data
           {:keys [marker-color marker-type
                   line-color line-style line-width
                   fill-color show-in-legend? render-style]} style]
       (xchart/doto-cond
          (xchart/add-raw-series chart s-name x y bubble)
          render-style                 (. :setBubbleSeriesRenderStyle (get xchart/bubble-render-styles render-style))
          line-color                   (. :setLineColor (get xchart/colors line-color line-color))
          line-style                   (. :setLineStyle (get xchart/strokes line-style line-style))
          line-width                   (. :setLineWidth line-width)
          fill-color                   (. :setFillColor (get xchart/colors fill-color fill-color))
          (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?)))))


(defn xchart/bubble-chart
   [series {:keys [width height title theme render-style]
            :or   {width 640 height 500}
            :as   styling}]

   (let [chart   (. :BubbleChart :new width height)
         styler  (cast :BubbleStyler (. chart :getStyler))
         styling (xchart/attach-default-font styling)]

      (docoll (fn [[s-name data]] (xchart/bubble-add-series! chart s-name data)) series)

      (xchart/doto-cond
         styler
         theme        (. :setTheme (get xchart/themes theme theme))
         render-style (. :setDefaultSeriesRenderStyle (get xchart/bubble-render-styles render-style)))

      (doto styler
            (xchart/set-default-style! styling)
            (xchart/set-axes-style! styling))

      (xchart/doto-cond
         chart
         title (. :setTitle title)
         (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
         (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title)))))



;; ---------------------------------------------------------------------------
;; Pie chart
;; ---------------------------------------------------------------------------

(defn xchart/attach-default-annotation-distance [styling]
  (if (and (== :donut (:render-style styling))
           (not (:annotation-distance styling)))
     (assoc styling :annotation-distance
           (- 1.0 (/ (:donut-thickness styling 0.33) 2)))
     styling))


(defn xchart/pie-chart-add-series! [chart s-name data]
   (if (number? data)
       (. chart :addSeries s-name data)
       (let [{:keys [render-style fill-color show-in-legend?]} (:style data)
             val (:value data)]
          (xchart/doto-cond
             (. chart :addSeries s-name val)
             render-style                 (. :setChartPieSeriesRenderStyle (get xchart/pie-render-styles render-style))
             fill-color                   (. :setFillColor (get xchart/colors fill-color fill-color))
             (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?)))))


(defn xchart/pie-chart
   [series {:keys [width height title circular? theme render-style
                   annotation-distance start-angle draw-all-annotations?
                   donut-thickness annotation-type]
            :or {width 640 height 500}
            :as styling}]
   (let [chart (. :PieChart :new width height)
         styler (cast :PieStyler (. chart :getStyler))
         styling (-> styling
                     xchart/attach-default-font
                     xchart/attach-default-annotation-distance)
         annotation-distance (:annotation-distance styling)]

      (docoll (fn [[s-name data]] (xchart/pie-chart-add-series! chart s-name data)) series)

      (xchart/doto-cond
         styler
         theme                              (. :setTheme (get xchart/themes theme theme))
         render-style                       (. :setDefaultSeriesRenderStyle (get xchart/pie-render-styles render-style))
         (not (nil? circular?))             (. :setCircular circular?)
         (not (nil? draw-all-annotations?)) (. :setDrawAllAnnotations draw-all-annotations?)
         annotation-distance                (. :setAnnotationDistance annotation-distance)
         donut-thickness                    (. :setDonutThickness donut-thickness)
         start-angle                        (. :setStartAngleInDegrees start-angle)
         annotation-type                    (. :setAnnotationType (get xchart/pie-annotation-types annotation-type)))

      (xchart/set-default-style! styler styling)

      (xchart/doto-cond
          chart
          title (. :setTitle title)
          (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
          (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title)))))
