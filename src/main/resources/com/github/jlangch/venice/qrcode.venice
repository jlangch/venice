;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice QR Code functions

;;;; Install QR Code 3rd party libraries:
;;;;
;;;;   (load-module :qrcode-install)
;;;;   (qrcode-install/install :dir (repl/libs-dir) :silent false)


(ns qrcode)

(import :com.google.zxing.BinaryBitmap)
(import :com.google.zxing.NotFoundException)
(import :com.google.zxing.MultiFormatReader)
(import :com.google.zxing.client.j2se.BufferedImageLuminanceSource)
(import :com.google.zxing.common.HybridBinarizer)
(import :javax.imageio.ImageIO)
(import :java.awt.image.BufferedImage)

(import :com.google.zxing.BarcodeFormat)
(import :com.google.zxing.EncodeHintType)
(import :com.google.zxing.client.j2se.MatrixToImageWriter)
(import :com.google.zxing.common.BitMatrix)
(import :com.google.zxing.qrcode.QRCodeWriter)


(defn 
  ^{ :arglists '("(decode source)")
     :doc """
          Decode a QR image. Returns the text in QR image. 

          Loads the image from a `:java.io.File` or a `:java.io.InputStream`.
          """
     :examples '(
        """
        (do
          (load-module :qrcode)

          (qrcode/decode (io/file "./example.png")))
        """)
     :see-also '(
        "qrcode/encode" )}

  decode [source]
  
  (assert (or (io/file? source) 
              (instance-of? :java.io.InputStream source)))

  (let [buffered-img (. :ImageIO :read source)
        source       (. :BufferedImageLuminanceSource :new buffered-img)
        binarizer    (. :HybridBinarizer :new source)
        bitmap       (. :BinaryBitmap :new binarizer)
        reader       (. :MultiFormatReader :new)
        result       (. reader :decode bitmap)]
    (. result :getText)))


(defn 
  ^{ :arglists '("(encode text width height margin os)")
     :doc """
          Encodes text into a PNG QR image. Writes the generated QR image to the
          supplied output stream.

          Arguments:

          | text    | The text to encode in the QR image      |
          | width   | the image width in pixels               |
          | height  | the image height in pixels              |
          | margin  | the image margin in pixels              |
          | os      | The output stream to write the image to |
           """
     :examples '(
        """
        (do
          (load-module :qrcode)

          (qrcode/encode "Hello" 600 600 3 (io/file-out-stream "./example.png")))
        """)
     :see-also '(
        "qrcode/decode" )}
   
  encode [text width height margin os]

  { :pre [(string? text)
          (long? width) 
          (long? height) 
          (long? margin)
          (instance-of? :java.io.OutputStream os)] }

  (let [qr-code-writer (. :QRCodeWriter :new)
        hints          { (type (. :EncodeHintType :MARGIN))  margin }
        bitMatrix      (. qr-code-writer :encode text
											                           :QR_CODE
											                           width
											                           height
											                           hints)]
    (. :MatrixToImageWriter :writeToStream bitMatrix "PNG" os)))
