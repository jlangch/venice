;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Aviron ClamAV client

(ns aviron)

(import :org.repackage.com.github.jlangch.aviron.Client)
(import :org.repackage.com.github.jlangch.aviron.FileSeparator)
(import :org.repackage.com.github.jlangch.aviron.admin.ClamdAdmin)
(import :org.repackage.com.github.jlangch.aviron.admin.ClamdCpuLimiter)
(import :org.repackage.com.github.jlangch.aviron.admin.DynamicCpuLimit)
(import :org.repackage.com.github.jlangch.aviron.admin.CpuProfile)
(import :org.repackage.com.github.jlangch.aviron.admin.CpuProfileEntry)
(import :org.repackage.com.github.jlangch.aviron.dto.QuarantineEvent)
(import :org.repackage.com.github.jlangch.aviron.dto.ScanResult)

(load-module :java)


(defn 
  ^{ :arglists '(
          "(create-client & options)")
     :doc """
          The ClamAV client provides access to the ClamAV daemon (clamd) functions 
          like file scanning, updating the daemon's ClamAV virus databases, or
          getting the scanning stats.
 
          Options:

          | :server-hostname s       | The ClamAV server hostname. Defaults to \
                                       "localhost" |
          | :server-port n           | The ClamAV server port. Defaults to 3310 |
          | :server-file-separator k | The ClamAV server file separator, one of \
                                       {`:UNIX`, `:WINDOWS`, `:JVM_PLATFORM`}. \
                                       Defaults to `:JVM_PLATFORM` |
          | :connection-timeout n    | The connection timeout in milliseconds, \
                                       0 means indefinite. Defaults to 3'000ms |
          | :read-timeout n          | The read timeout in milliseconds, 0 \
                                       means indefinite. Defaults to 20'000ms |
          | :quarantine-dir f        | A quarantine directory. If the quarantine \
                                       action is `:MOVE` or `:COPY` infected \
                                       files will be move/copied to the \
                                       quarantine directory. |
          | :quarantine-action e     | A quarantine file action for infected, \
                                       one of {`:NONE`, `:MOVE`, `:COPY`}. \
                                       files. Defaults to `:NONE` |
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client :server-hostname "localhost"
                                               :server-file-separator :UNIX)]

              (println (aviron/reachable? client))

              (println (aviron/clamav-version client))

              (let [result (aviron/scan-path client "/data/summary.docx")]
                (when (aviron/virus? result)
                  (println (aviron/viruses result))))))
          """)
     :see-also '(
          "aviron/scan-stream" 
          "aviron/scan-path" 
          "aviron/scan-parallel" 
          "aviron/shutdown-server"
          "aviron/ping" 
          "aviron/clamav-version" 
          "aviron/stats" 
          "aviron/reachable?" 
          "aviron/reload-virus-databases"
          "aviron/shutdown-server"
          "aviron/last-command-run-details") }

  create-client [& options]

  (let [opts  (apply hash-map options)
        bld   (. :Client :builder)]
    (when (contains? opts :server-hostname) 
      (. bld :serverHostname (:server-hostname opts)))
    (when (contains? opts :server-port) 
      (. bld :serverPort (:server-port opts)))
    (when (contains? opts :server-file-separator) 
      (. bld :serverFileSeparator (:server-file-separator opts)))
    (when (contains? opts :connection-timeout) 
      (. bld :connectionTimeout (:connection-timeout opts)))
    (when (contains? opts :read-timeout)
      (. bld :readTimeout (:read-timeout opts)))
    (when (contains? opts :quarantine-dir)
      (. bld :quarantineDir (:quarantine-dir opts)))
    (when (contains? opts :quarantine-action)
      (. bld :quarantineFileAction (:quarantine-action opts)))
    (when (contains? opts :quarantine-listener)
      (. bld :quarantineEventListener 
             (java/as-consumer (:quarantine-listener opts))))
    (. bld :build)))


(defn 
  ^{ :arglists '(
          "(ping client)")
     :doc """
          Sends a "PING" command to the ClamAV server.
 
          Returns `true` f the server answers with a "PONG" else `false`
          """ 
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/ping (aviron/create-client)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/clamav-version" 
          "aviron/stats" 
          "aviron/reload-virus-databases"
          "aviron/shutdown-server") }

  ping [client]

  { :pre [(instance-of? :Client client)] }
  
  (. client :ping))


(defn 
  ^{ :arglists '(
          "(clamav-version client)")
     :doc """
          Return the ClamAV version
          """ 
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/clamav-version (aviron/create-client)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ping" 
          "aviron/stats" 
          "aviron/reload-virus-databases"
          "aviron/shutdown-server") }

  clamav-version [client]

  { :pre [(instance-of? :Client client)] }
 
  (. client :clamAvVersion))


(defn 
  ^{ :arglists '(
          "(stats client)")
     :doc """
          Returns the formatted statistics about the scan queue, contents of 
          scan queue, and memory usage.
          """ 
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/stats (aviron/create-client)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ping" 
          "aviron/clamav-version" 
          "aviron/reload-virus-databases"
          "aviron/shutdown-server") }

  stats [client]

  { :pre [(instance-of? :Client client)] }
 
  (. client :stats))


(defn 
  ^{ :arglists '(
          "(reload-virus-databases client)")
     :doc """
          Reload the virus databases. 
          """ 
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/reload-virus-databases (aviron/create-client)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ping" 
          "aviron/clamav-version" 
          "aviron/stats" 
          "aviron/shutdown-server") }

  reload-virus-databases [client]

  { :pre [(instance-of? :Client client)] }
 
  (. client :reloadVirusDatabases))


(defn 
  ^{ :arglists '(
          "(shutdown-server client)")
     :doc """
          Shutdown the ClamAV server and perform a clean exit.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/shutdown-server  (aviron/create-client)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ping" 
          "aviron/clamav-version" 
          "aviron/stats" 
          "aviron/reload-virus-databases") }

  shutdown-server [client]

  { :pre [(instance-of? :Client client)] }

  (. client :shutdownServer))


(defn 
  ^{ :arglists '(
          "(scan-stream is)"
          "(scan-stream is chunk-size)")
     :doc """
          Scans a file's data passed in the 'is' stream. Uses a default chunk 
          size of 2048 bytes.

          Returns the scan result with the detected virus info
          
          Note: The input stream must be closed by the caller!
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (try-with [is (io/file-in-stream "/data/document.pdf")]
                (aviron/ok? (aviron/scan-stream is)))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ok?" 
          "aviron/virus?" 
          "aviron/viruses") }

  scan-stream 

  ([client is] 
    { :pre [(instance-of? :Client client) (io/in-stream? is)] }
    (. client :scan is))

  ([client is chunk-size] 
   { :pre [(instance-of? :Client client) (io/in-stream? is) (long? chunk-size)] }
   (. client :scan is chunk-size)))


(defn 
  ^{ :arglists '(
          "(scan-path client path)"
          "(scan-path client path continue)")
     :doc """
          Scans a single file or directory (recursively). Stops by default after 
          the first file with a detected virus.

          If 'continue' is `true` continues scanning upon detecting a virus in a 
          file else stops after the first file with a detected virus.

          Returns the scan result with the detected virus info
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/ok? (aviron/scan-path "/data/document.pdf"))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ok?" 
          "aviron/virus?" 
          "aviron/viruses") }

  scan-path 

  ([client path]
    { :pre [(instance-of? :Client client)] }
    (. client :scan (io/->path path)))

  ([client path continue] 
    { :pre [(instance-of? :Client client) (boolean? continue)] }
    (. client :scan (io/->path path) continue)))


(defn 
  ^{ :arglists '(
          "(scan-parallel client path)")
     :doc """
          Scans a single file or directory (recursively) using multiple threads.
 
          Returns the scan result with the detected virus info
         """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/ok? (aviron/scan-parallel "/data"))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ok?" 
          "aviron/virus?" 
          "aviron/viruses") }

  scan-parallel [client path] 

  { :pre [(instance-of? :Client client)] }

  (. client :parallelScan (io/->path path)))


(defn
  ^{ :arglists '(
          "(reachable? client)"
          "(reachable? client timeout)")
     :doc """
          Tests if the ClamAV server is reachable. Uses a default timeout of
          3'000ms.
          
          Returns `true` if the server is reachable else `false`.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/reachable? (aviron/create-client)))
          """)
     :see-also '(
          "aviron/create-client" ) }

  reachable?

  ([client] 
    { :pre [(instance-of? :Client client)] }
    (. client :isReachable))

  ([client timeout]
    { :pre [(instance-of? :Client client) (long timeout)] }
    (. client :isReachable timeout)))


(defn
  ^{ :arglists '(
          "(last-command-run-details client)")
     :doc """
          Returns the raw command string and the server's result for the last
          command sent to the ClamAV server.
           
          This function is provided for debugging purposes
          """ 
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/clamav-version client)
              (println (aviron/last-command-run-details client))))
          """)
     :see-also '(
          "aviron/create-client" ) }

  last-command-run-details [client]

  { :pre [(instance-of? :Client client)] }

  (. client :lastCommandRunDetails))


(defn
  ^{ :arglists '(
          "(ok? scan-result)")
     :doc """
          Returns `true` if the scan result does not contain any detected viruses
          else `false`
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/ok? (aviron/scan-path "/data/document.pdf"))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/virus?" 
          "aviron/viruses") }

  ok? [scan-result]

  { :pre [(instance-of? :ScanResult scan-result)] } 

  (. scan-result :isOK))


(defn
  ^{ :arglists '(
          "(virus? scan-result)")
     :doc """
          Returns `true` if the scan result does contain any detected viruses
          else `false`
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/virus? (aviron/scan-path "/data/document.pdf"))))
          """) 
     :see-also '(
          "aviron/create-client"
          "aviron/ok?" 
          "aviron/viruses") }

  virus? [scan-result]

  { :pre [(instance-of? :ScanResult scan-result)] } 

  (. scan-result :hasVirus))


(defn
  ^{ :arglists '(
          "(viruses scan-result)")
     :doc """
          Returns a map of the detected viruses. 
          
          The map's keys hold the file detected and the values contain a list of 
          the virus types detected in the file.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (println (aviron/viruses (aviron/scan-path "/data/document.pdf")))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/ok?" 
          "aviron/virus?") }

  viruses [scan-result]

  { :pre [(instance-of? :ScanResult scan-result)] } 

  (. scan-result :getVirusFound))


;; -----------------------------------------------------------------------------
;; Clamd daemon management
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(clamd-pid)"
          "(clamd-pid pid-file)")
     :doc """
          Returns the clamd PID or `nil` the clamd daemon is not running.

          Without 'pid-file' argument runs a `pgrep clamd` shell command to get 
          the pid. With a 'pid-file' loads the pid from the pid file.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/clamd-pid))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/clamd-cpu-limit"
          "aviron/clamd-cpu-limit-off"
          "aviron/cpus") }

  clamd-pid 
  
  ([]          
    (. :ClamdAdmin :getClamdPID))

  ([pid-file]
    { :pre [(or (string? pid-file) (io/file? pid-file))] } 
    (. :ClamdAdmin :loadClamdPID (io/file pid-file))))


(defn
  ^{ :arglists '(
          "(clamd-cpu-limit clamd-pid limit)")
     :doc """
          Activates a CPU limit [1..LIMIT] percent on a clamd daemon process.
           
          The max value of LIMIT depends on the number of logical processors:
          * on a 8 core **MacBook Air** LIMIT is 800%
          * on a **Intel** single core with 2 hyperthreads LIMIT is 200%
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/clamd-cpu-limit (aviron/clamd-pid) 50))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/clamd-cpu-limit-off"
          "aviron/clamd-pid"
          "aviron/cpus") }

  clamd-cpu-limit [clamd-pid limit]

  { :pre [(string? clamd-pid) (long? limit) (pos? limit)] } 

  (. :ClamdAdmin :activateClamdCpuLimit clamd-pid limit))


(defn
  ^{ :arglists '(
          "(clamd-cpu-limit-off clamd-pid)")
     :doc """
          Deactivates a CPU limit on a clamd daemon process.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/clamd-cpu-limit-off (aviron/clamd-pid)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/clamd-cpu-limit"
          "aviron/clamd-pid"
          "aviron/cpus") }

  clamd-cpu-limit-off [clamd-pid]

  { :pre [(string? clamd-pid)] } 

  (. :ClamdAdmin :deactivateClamdCpuLimit clamd-pid))


(defn
  ^{ :arglists '(
          "(cpus)")
     :doc """
          Returns the number of available processors or the number of
          hyperthreads if the CPU supports hyperthreads. 
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/cpus))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/clamd-pid"
          "aviron/clamd-cpu-limit"
          "aviron/clamd-cpu-limit-off") }

  cpus []

  (long (. :ClamdAdmin :getNrOfCpus)))



;; -----------------------------------------------------------------------------
;; Clamd daemon CPU profiles
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create-cpu-profile name data)")
     :doc """
          Create a named CPU profile.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/create-cpu-profile "weekday"
                                       [ "00:00-05:59 @ 100%"
                                         "06:00-08:59 @  50%"
                                         "09:00-17:59 @   0%"
                                         "18:00-21:59 @  50%"
                                         "22:00-23:59 @ 100%" ]))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/get-cpu-profile-entries"
          "aviron/get-cpu-profile-entries-as-map"
          "aviron/get-cpu-profile-limit") }

  create-cpu-profile [name data]

  { :pre [(string? name) (sequential? data)] }

  (. :CpuProfile :new name (str/join "," data)))


(defn 
  ^{ :arglists '(
          "(get-cpu-profile-entries profile)")
     :doc """
          Returns the entries java CPU profile.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [profile (aviron/create-cpu-profile "weekday"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-08:59 @  50%"
                                                       "09:00-17:59 @   0%"
                                                       "18:00-21:59 @  50%"
                                                       "22:00-23:59 @ 100%" ])]
              (aviron/get-cpu-profile-entries profile)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/create-cpu-profile"
          "aviron/get-cpu-profile-entries-as-map"
          "aviron/get-cpu-profile-limit") }

  get-cpu-profile-entries [profile]

  { :pre [(instance-of? :CpuProfile profile)] }

  (into [] (. profile :getEntries)))


(defn
  ^{ :arglists '(
          "(get-cpu-profile-limit profile hour minute)")
     :doc """
          Returns the CPU limit defined by the profile for a given hour and
          minute.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [profile (aviron/create-cpu-profile "weekday"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-08:59 @  50%"
                                                       "09:00-17:59 @   0%"
                                                       "18:00-21:59 @  50%"
                                                       "22:00-23:59 @ 100%" ])]
              (aviron/get-cpu-profile-limit profile 18 45)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/create-cpu-profile"
          "aviron/get-cpu-profile-entries"
          "aviron/get-cpu-profile-entries-as-map") }

  get-cpu-profile-limit [profile hour minute]  

  { :pre [(instance-of? :CpuProfile profile) 
          (long? hour) (pos? hour)
          (long? minute)  (pos? minute)] }

  (. profile :getLimit hour minute))



;; -----------------------------------------------------------------------------
;; Dynamic CPU limiter
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create-dynamic-cpu-limiter)"
          "(create-dynamic-cpu-limiter profiles)"
          "(create-dynamic-cpu-limiter limit-fn)")
     :doc """
          Creates a new dynamic CPU limiter.
          
          Without an argument creates a limiter with a default profile (100% CPU 
          usage).

          Otherwise creates a limiter with a list of explicit profiles for each 
          day in the week (Mon to Sun) or a limiter based on a limiter function 
          that computes the CPU limit for a timestamp.
          """
     :examples '(
          """
          ;; [1] Limiter with default profile
          (do
            (load-module :aviron)
            (let [limiter (aviron/create-dynamic-cpu-limiter)
                  ts      (time/local-date-time 2025 7 21 12 0 0)]
              (aviron/compute-dynamic-cpu-limit limiter ts)))
          """
          """
          ;; [2] Limiter with profiles for each day in the week (Mon to Sun)
          (do
            (load-module :aviron)
            (let [weekday (aviron/create-cpu-profile "weekday"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-21:59 @   0%"
                                                       "22:00-23:59 @ 100%" ])
                  weekend (aviron/create-cpu-profile "weekend"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-21:59 @  60%"
                                                       "22:00-23:59 @ 100%" ])
                  limiter (aviron/create-dynamic-cpu-limiter 
                                 (concat (repeat 5 weekday) (repeat 2 weekend)))
                  ts-mon      (time/local-date-time 2025 7 21 12 0 0)
                  ts-sat      (time/local-date-time 2025 7 26 12 0 0)]
              (println "Monday:  " (aviron/compute-dynamic-cpu-limit limiter ts-mon))
              (println "Saturday:" (aviron/compute-dynamic-cpu-limit limiter ts-sat))))
          """
          """
          ;; [3] Limiter based on a limiter function that computes the CPU limit 
          ;;     for a timestamp
          (do
            (load-module :aviron)
            (defn limit-fn [ts] 100I)  ;; Important: must return an integer!
            (let [limiter (aviron/create-dynamic-cpu-limiter limit-fn)
                  ts      (time/local-date-time 2025 7 21 12 0 0)]
              (aviron/compute-dynamic-cpu-limit limiter ts)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/compute-dynamic-cpu-limit") }

  create-dynamic-cpu-limiter 
  
  ([]
    (. :DynamicCpuLimit :new))

  ([profiles-or-fn]
    { :pre [(or (and (sequential? profiles-or-fn)
                     (== 7 (count profiles-or-fn)) 
                     (every? #(instance-of? :CpuProfile %) profiles-or-fn))
                (fn? profiles-or-fn))] }
    (if (sequential? profiles-or-fn)
      (. :DynamicCpuLimit :new profiles-or-fn)
      (. :DynamicCpuLimit :new (java/as-function profiles-or-fn)))))


(defn 
  ^{ :arglists '(
          "(compute-dynamic-cpu-limit limiter)"
          "(compute-dynamic-cpu-limit limiter timestamp)")
     :doc """
          Compute the CPU limit based on dynamic CPU limiter.
          
          Without an argument computes the CPU limit for the current date/time.

          Otherwise computes the CPU limit for the given timestamp (type 
          `time/local-date-time`).
          """
     :examples '(
          """
          ;; [1] Compute limit for current time based on a limit compute 
          ;;     function
          (do
            (load-module :aviron)
            (defn limit-fn [ts] 100I)  ;; Important: must return an integer!
            (let [limiter (aviron/create-dynamic-cpu-limiter limit-fn)]
              (aviron/compute-dynamic-cpu-limit limiter)))
          """
          """
          ;; [2] Compute limit for a specific timestamp based on a limit compute 
          ;;     function
          (do
            (load-module :aviron)
            (defn limit-fn [ts] 100I)  ;; Important: must return an integer!
            (let [limiter (aviron/create-dynamic-cpu-limiter limit-fn)
                  ts      (time/local-date-time 2025 7 26 10 30 0)]
              (aviron/compute-dynamic-cpu-limit limiter ts)))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/create-dynamic-cpu-limiter") }

  compute-dynamic-cpu-limit 

  ([limiter]
    { :pre [(instance-of? :DynamicCpuLimit limiter)] }
    (. limiter :computeCpuLimit))

  ([limiter ts]
    { :pre [(time/local-date-time? ts)] }
    (. limiter :computeCpuLimit ts)))



;; -----------------------------------------------------------------------------
;; Clamd daemon CPU limiter
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create-clamd-cpu-limiter)"
          "(create-clamd-cpu-limiter profiles)"
          "(create-clamd-cpu-limiter limit-fn)")
     :doc """
          Creates a new CPU limiter to operate on clamd daemons.
          
          Without an argument creates a limiter with a default profile (100% CPU 
          usage).

          Otherwise creates a limiter with a list of explicit profiles for each 
          day in the week (Mon to Sun) or a limiter based on a limiter function 
          that computes the CPU limit for a timestamp.

          Note: Uses internally the dynamic CPU limiter to compute the new
                CPU limits for the clamd daemon.
          """
     :examples '(
          """
          ;; [1] Limiter with default profile
          (do
            (load-module :aviron)
            (aviron/create-clamd-cpu-limiter))
          """
          """
          ;; [2] Limiter with profiles for each day in the week (Mon to Sun)
          (do
            (load-module :aviron)
            (let [weekday (aviron/create-cpu-profile "weekday"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-21:59 @   0%"
                                                       "22:00-23:59 @ 100%" ])
                  weekend (aviron/create-cpu-profile "weekend"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-21:59 @  60%"
                                                       "22:00-23:59 @ 100%" ])]
              (aviron/create-clamd-cpu-limiter (concat (repeat 5 weekday) 
                                                       (repeat 2 weekend)))))
          """
          """
          ;; [3] Limiter based on a limiter function that computes the CPU limit for 
          ;; a timestamp
          (do
            (load-module :aviron)
            (defn limit-fn [ts] 100I)
            (aviron/create-clamd-cpu-limiter limit-fn))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/clamd-activate-cpu-limit"
          "aviron/clamd-deactivate-cpu-limit"
          "aviron/clamd-last-seen-limit"
          "aviron/clamd-limit-for-timestamp") }

  create-clamd-cpu-limiter 
  
  ([]
    (. :ClamdCpuLimiter :new))

  ([profiles-or-fn]
    { :pre [(or (and (sequential? profiles-or-fn)
                     (== 7 (count profiles-or-fn)) 
                     (every? #(instance-of? :CpuProfile %) profiles-or-fn))
                (fn? profiles-or-fn))] }
    (if (sequential? profiles-or-fn)
      (. :ClamdCpuLimiter :new (. :DynamicCpuLimit :new profiles-or-fn))
      (. :ClamdCpuLimiter :new (. :DynamicCpuLimit :new (java/as-function profiles-or-fn))))))


(defn 
  ^{ :arglists '(
          "(clamd-activate-cpu-limit limiter pid)"
          "(clamd-activate-cpu-limit limiter pid limit)")
     :doc """
          Activates a new CPU limit on the clamd daemon with the given 'pid'.

          Without passing a 'limit' computes the CPU limit based on the limiter's
          profile and the current date and time.

          With a 'limit' activates this CPU limit on the clamd process.
          """
     :examples '(
          """
          ;; [1] Activating explicit CPU limit
          (do
            (load-module :aviron)
            (let [limiter    (aviron/create-clamd-cpu-limiter)
                  pid        (aviron/clamd-pid)
                  last-limit (aviron/clamd-last-seen-limit limiter)
                  new-limit  60
                  activated? (aviron/clamd-activate-cpu-limit limiter pid new-limit)]
              (when activated?
                (println "Adjusted clamd CPU limit: ~{last-limit}% -> ~{new-limit}%"))))
          """,
          """
          ;; [2] Activating current limit from CPU profile
          (do
            (load-module :aviron)
            (let [profile (aviron/create-cpu-profile "anyday"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-08:59 @  50%"
                                                       "09:00-17:59 @   0%"
                                                       "18:00-21:59 @  50%"
                                                       "22:00-23:59 @ 100%" ])
                  limiter    (aviron/create-clamd-cpu-limiter (repeat 7 profile))
                  pid        (aviron/clamd-pid)
                  last-limit (aviron/clamd-last-seen-limit limiter)
                  activated? (aviron/clamd-activate-cpu-limit limiter pid)
                  new-limit  (aviron/clamd-last-seen-limit limiter)]
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/create-clamd-cpu-limiter"
          "aviron/clamd-deactivate-cpu-limit"
          "aviron/clamd-last-seen-limit"
          "aviron/clamd-limit-for-timestamp") }

  clamd-activate-cpu-limit 

  ([limiter pid] 
    { :pre [(instance-of? :ClamdCpuLimiter limiter) (string? pid)] }
    (. limiter :activateClamdCpuLimit pid))

  ([limiter pid limit] 
    { :pre [(instance-of? :ClamdCpuLimiter limiter) (string? pid)
            (long? limit) (pos? limit)] }
    (. limiter :activateClamdCpuLimit pid limit)))


(defn 
  ^{ :arglists '(
          "(clamd-deactivate-cpu-limit limiter pid)")
     :doc """
          Deactivates any CPU limitation on the clamd deamon with the given 
          'pid'.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [limiter  (aviron/create-clamd-cpu-limiter)
                  pid      (aviron/clamd-pid)]
              (aviron/clamd-deactivate-cpu-limit limiter pid)))
          """)

     :see-also '(
          "aviron/create-client"
          "aviron/create-clamd-cpu-limiter"
          "aviron/clamd-activate-cpu-limit"
          "aviron/clamd-last-seen-limit"
          "aviron/clamd-limit-for-timestamp") }

  clamd-deactivate-cpu-limit [limiter pid]
  
  { :pre [(instance-of? :ClamdCpuLimiter limiter) (string? pid)] }

  (. limiter :deactivateClamdCpuLimit pid))


(defn 
  ^{ :arglists '(
          "(clamd-last-seen-limit limiter)")
     :doc """
          Returns the last seen (activated) CPU limit on the clamd daemon.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [limiter    (aviron/create-clamd-cpu-limiter)
                  pid        (aviron/clamd-pid)
                  last-limit (aviron/clamd-last-seen-limit limiter)
                  new-limit  60
                  activated? (aviron/clamd-activate-cpu-limit limiter pid new-limit)]
              (when activated?
                (println "Adjusted clamd CPU limit: ~{last-limit}% -> ~{new-limit}%"))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/create-clamd-cpu-limiter"
          "aviron/clamd-activate-cpu-limit"
          "aviron/clamd-deactivate-cpu-limit"
          "aviron/clamd-limit-for-timestamp") }

  clamd-last-seen-limit [limiter]

  { :pre [(instance-of? :ClamdCpuLimiter limiter)] }

  (. limiter :getLastSeenLimit))


(defn 
  ^{ :arglists '(
          "(clamd-limit-for-timestamp limiter)")
     :doc """
          Returns the limit for a given timestamp.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [profile (aviron/create-cpu-profile "anyday"
                                                     [ "00:00-05:59 @ 100%"
                                                       "06:00-08:59 @  50%"
                                                       "09:00-17:59 @   0%"
                                                       "18:00-21:59 @  50%"
                                                       "22:00-23:59 @ 100%" ])
                  limiter    (aviron/create-clamd-cpu-limiter (repeat 7 profile))]
              (aviron/clamd-limit-for-timestamp limiter (time/local-date-time 2025 7 1 18 30 0))))
          """)
     :see-also '(
          "aviron/create-client"
          "aviron/create-clamd-cpu-limiter"
          "aviron/clamd-activate-cpu-limit"
          "aviron/clamd-deactivate-cpu-limit"
          "aviron/clamd-limit-for-timestamp") }

  clamd-limit-for-timestamp [limiter ts] 

  { :pre [(instance-of? :ClamdCpuLimiter limiter)] }

  (. limiter :getLimitForTimestamp ts))



;; -----------------------------------------------------------------------------
;; Quarantine management
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(quarantine-active? client)" )
     :doc """
          Returns `true` if the quarantine is active else `false`
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/quarantine-active? client)))
          """) 
     :see-also '(
          "aviron/create-client"
          "aviron/list-quarantine-files"
          "aviron/remove-quarantine-file"
          "aviron/remove-all-quarantine-files" ) }

  quarantine-active? [client] 

    { :pre [(instance-of? :Client client)] }

    (. client :isQuarantineActive))


(defn
  ^{ :arglists '(
          "(list-quarantine-files client)" )
     :doc """
          Returns a list of the quarantine files.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/list-quarantine-files client)))
          """) 
     :see-also '(
          "aviron/create-client"
          "aviron/quarantine-active?"
          "aviron/remove-quarantine-file"
          "aviron/remove-all-quarantine-files" ) }

  list-quarantine-files [client] 

    { :pre [(instance-of? :Client client)] }

    (. client :listQuarantineFiles))


(defn
  ^{ :arglists '(
          "(remove-quarantine-file client f)" )
     :doc """
          Removes a quarantine file.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (if-let [f (first (aviron/list-quarantine-files client))]
                (aviron/remove-quarantine-file client f))))
          """) 
     :see-also '(
          "aviron/create-client"
          "aviron/quarantine-active?"
          "aviron/list-quarantine-files"
          "aviron/remove-all-quarantine-files" ) }

  remove-quarantine-file [client f] 

    { :pre [(instance-of? :Client client)] }
    
    (. client :removeQuarantineFile f))


(defn
  ^{ :arglists '(
          "(remove-all-quarantine-files client)" )
     :doc """
          Removes all quarantine files.
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/remove-all-quarantine-files client)))
          """) 
     :see-also '(
          "aviron/create-client"
          "aviron/quarantine-active?"
          "aviron/list-quarantine-files"
          "aviron/remove-quarantine-file" ) }

  remove-all-quarantine-files [client] 

    { :pre [(instance-of? :Client client)] }
    (. client :listQuarantineFiles))



;; -----------------------------------------------------------------------------
;; Utililies
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(version)")
     :doc """
          Returns the version of the Aviron Java library. 
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (aviron/version))
          """)
     :see-also '(
          "aviron/create-client") }

  version []

  library-version)


(defn
  ^{ :arglists '(
          "(print-config client)"
          "(print-config client ps)")
     :doc """
          Print the client configuration in human readable form to a 
          :java.io.PrintStream

          If the passed stream is `nil` prints to stdout
          """
     :examples '(
          """
          (do
            (load-module :aviron)
            (let [client (aviron/create-client)]
              (aviron/print-config client)))
          """)
     :see-also '(
          "aviron/create-client") }

  print-config

  ([client] 
    { :pre [(instance-of? :Client client)] }
    (. client :printConfig *out*))

  ([client ps] 
    { :pre [(instance-of? :Client client)] }
    (. client :printConfig ps)))


(def- library-version "1.4.0")
