;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Simple GREP utility that scans text and zip files

(ns grep)


(defn
  ^{ :arglists '("(grep dir file-glob line-pattern & options)")
     :doc
        """
        Search for lines that match a regular expression in text files. The
        search starts from a base directory and chooses all files that match
        a globbing pattern.

        Options:

        | :print b    | e.g :print false, defaults to true |

        With the print option `:print true`, `grep` prints the matches in a
        human readable form, one line per match in the format
        `"{{filename}}:{{lineno}}:{{line}}"`.

        With the print option `:print false`, `grep` prints the matches in a
        machine readable form. It returns a list of tuples
        `[{{filename}}, {{lineno}}, {{line}}]`.
        """
     :examples '(
        """
        (do
          (load-module :grep)
          (grep/grep "/Users/foo/logs" "*.log" ".*Error.*"))
        """ )
     :see-also '("grep/grep-zip", "io/file-matches-glob?") }

  grep [dir file-glob line-pattern & options]

  (let [opts       (apply hash-map options)
        print?     (:print opts true)
        line-regex (regex/pattern line-pattern)]
    (->> (grep-in-dir dir file-glob line-regex)
         (sort-by (juxt first second))
         (process-matches print?))))


(defn
  ^{ :arglists '(
        "(grep/grep-zip dir zipfile-glob file-glob line-pattern & options)")
     :doc
        """
        Search for lines that match a regular expression in text files within
        ZIP files. The search chooses all files in the ZIP that match a
        globbing pattern.
        The search starts from a base directory and chooses all ZIP files that
        match the zipfile globbing pattern.

        Options:

        | :print b    | e.g :print false, defaults to true |

        With the print option `:print true`, `grep-zip` prints the matches in a
        human readable form, one line per match in the format
        `"{{zipfile}}!{{filename}}:{{lineno}}:{{line}}"`.

        With the print option `:print false`, `grep-zip` prints the matches in a
        machine readable form. It returns a list of tuples
        `[{{zipname}}, {{filename}}, {{lineno}}, {{line}}]`.
        """
    :examples '(
       """
       (do
         (load-module :grep)
         (grep/grep-zip "/Users/foo/logs" "logs*.zip" "**/*.log" ".*Error.*"))
       """ )
    :see-also '("grep/grep", "io/file-matches-glob?") }

  grep-zip [dir zipfile-glob file-glob line-pattern & options]

  (let [opts       (apply hash-map options)
        print?     (:print opts true)
        line-regex (regex/pattern line-pattern)]
    (->> (io/list-files-glob dir zipfile-glob)
         (map #(grep-in-zipfile % file-glob line-regex))
         (apply concat)
         (sort-by (juxt first second third))
         (process-matches print?))))


;; -----------------------------------------------------------------------------
;; Implementation
;; -----------------------------------------------------------------------------

(deftype :named-file [name :string, data :any])

(defn- strip-leading-dir [file dir]
  (-> (str/strip-start (io/file-path file) (io/file-path dir))
      (str/strip-start "/")))

(defn- numbered-lines [lines]
  (map vector (lazy-seq 1 inc) lines))

(defn- filter-lines [line-matcher lines]
  (filter #(regex/matches? line-matcher (second %)) lines))

(defn- read-lines [line-matcher file]
  (->> (io/slurp-lines file)
       (numbered-lines)
       (filter-lines line-matcher)))

(defn- grep-in-file [line-regex nfile]
  (let [matcher (regex/matcher line-regex "")]
    { (:name nfile) (read-lines matcher (:data nfile)) }))

(defn- grep-in-files [line-regex nfiles]
  (->> (pmap #(grep-in-file line-regex %) nfiles)
       (apply merge {})
       (filter-kv (fn [k v] (not-empty? v)))
       (flatten-matches)))

(defn- grep-in-dir [dir file-glob line-regex]
  ;; return a list of tuples [filename line-no matched-line]
  (->> (io/list-files-glob dir file-glob)
       (map (fn [f] (named-file. (io/file-name f) f)))
       (grep-in-files line-regex)))

(defn- grep-in-zipfile [zip file-glob line-regex]
  ;; return a list of tuples [zipname filename line-no matched-line]
  (let [zipname (io/file-name zip)]
    (->> (io/unzip-all file-glob zip)
         (map (fn [f] (named-file. (key f) (val f))))
         (grep-in-files line-regex)
         (map #(cons zipname %)))))

(defn- flatten-matches [matches]
  ;; return a list of tuples [filename line-no matched-line]
  (->> (map #(cartesian-product (list (key %)) (val %)) matches)
       (apply concat)
       (map flatten)))

(defn- statistics [matches]
  (let [matches-file (filter #(== 3 (count %)) matches)
        matches-zip  (filter #(== 4 (count %)) matches)
        cnt-fn       (fn [f m] (->> m (map f) distinct count))]
    [(+ 0                           (cnt-fn first matches-zip))
     (+ (cnt-fn first matches-file) (cnt-fn second matches-zip))
     (+ (count matches-file)        (count matches-zip))]))

(defn- print-matches [matches]
  (let [fmt (fn [m] (if (== 3 (count m)) "%s:%s:%s\n" "%s!%s:%s:%s\n"))]
    (docoll #(apply printf (fmt %) %) matches)))

(defn- process-matches [print? matches]
  (if print?
    (let [[z f c] (statistics matches)]
      (print-matches matches)
      (printf *err* "Done. Zips: %d, Files: %d, Matches: %d%n" z f c))
    matches))
