;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; A stop watch


(ns stopwatch)

(import :com.github.jlangch.venice.util.StopWatch)


(defn 
  ^{ :arglists '(
          "(create)")
     :doc """
          Create a new stop watch and implicitely starts it by setting the start 
          time as now. The stop watch has a resolution of milliseconds.
          
          Returns the created stop watch.
          """
     :examples (list
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))))
          """)
     :see-also '(
          "stopwatch/copy", "stopwatch/start", "stopwatch/stop", 
          "stopwatch/resume", "stopwatch/split", "stopwatch/elapsed", 
          "stopwatch/elapsed-formatted") }

  create []

  (. :StopWatch :new))


(defn 
  ^{ :arglists '(
          "(copy sw)")
     :doc """
          Copies a stop watch with its internal state.
          
          Returns the copied stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw-1 (sw/create)]
              (sleep 500)
              (let [sw-2 (sw/copy sw-1)]
                (sw/stop sw-1)
                (sw/stop sw-2)
                (println (str "sw-1: " (sw/elapsed sw-1) "ms"))
                (println (str "sw-2: " (sw/elapsed sw-2) "ms")))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/start", "stopwatch/stop", 
          "stopwatch/resume", "stopwatch/split", "stopwatch/elapsed", 
          "stopwatch/elapsed-formatted") }

  copy [sw]

  (. sw :copy))


(defn 
  ^{ :arglists '(
          "(start sw)")
     :doc """
          Restart a stop watch by resetting the start time to now.
          
          Returns the stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/start sw)
              (sleep 200)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/copy", "stopwatch/stop", 
          "stopwatch/resume", "stopwatch/split", "stopwatch/elapsed", 
          "stopwatch/elapsed-formatted") }

  start [sw]

  (. sw :start))


(defn 
  ^{ :arglists '(
          "(stop sw)")
     :doc """
          Stops a stop watch. Remembers the elapsed time and sets the start
          time to now.
          
          Returns the stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))))
          """,
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))
              (sleep 300)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/copy", "stopwatch/start",
          "stopwatch/resume", "stopwatch/split", "stopwatch/elapsed", 
          "stopwatch/elapsed-formatted") }

  stop [sw]

  (. sw :stop))


(defn 
  ^{ :arglists '(
          "(resume sw)")
     :doc """
          Resumes a stop watch. Sets the start time to now.
          
          Returns the stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/resume sw)
              (sleep 300)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/copy", "stopwatch/start", "stopwatch/stop", 
          "stopwatch/split", "stopwatch/elapsed", 
          "stopwatch/elapsed-formatted") }

  resume [sw]

  (. sw :resume))


(defn 
  ^{ :arglists '(
          "(split sw)" "(split sw time-unit)")
     :doc """
          Returns the split time (now - start time) in milli seconds.
          
          time-unit:
          
          * `:milliseconds`
          * `:seconds`
          * `:minutes`
          * `:hours`
          * `:days`
          
          Returns the split time.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (println (str (sw/split sw) "ms"))
              (sleep 300)
              (println (str (sw/split sw) "ms"))
              (println (str (sw/split sw :MILLISECONDS) "ms"))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/copy", "stopwatch/start", "stopwatch/stop", 
          "stopwatch/resume", "stopwatch/elapsed", 
          "stopwatch/elapsed-formatted") }

  split

  ([sw] (. sw :splitTime :milliseconds))
  ([sw time-unit] (. sw :splitTime (time-unit-upper-case time-unit))))
 

(defn 
  ^{ :arglists '(
          "(elapsed sw)" "(elapsed sw time-unit)")
     :doc """
          Returns the elapsed time (now - last stop time) in milli seconds.
          
          time-unit:
          
          * `:milliseconds`
          * `:seconds`
          * `:minutes`
          * `:hours`
          * `:days`
          
          Returns the elapsed time.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))
              (println (str (sw/elapsed sw :MILLISECONDS) "ms"))))
          """,
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))
              (sleep 300)
              (sw/stop sw)
              (println (str (sw/elapsed sw) "ms"))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/copy", "stopwatch/start", "stopwatch/stop", 
          "stopwatch/resume", "stopwatch/split", "stopwatch/elapsed-formatted") }

  elapsed

  ([sw] (. sw :elapsed :milliseconds))
  ([sw time-unit] (. sw :elapsed (time-unit-upper-case time-unit))))
 

(defn 
  ^{ :arglists '(
          "(elapsed-formatted sw)")
     :doc """
          Returns the elapsed time (now - last stop time) formatted.
          
          Format:Â¶
          * 245ms - for elapsed times < 1s
          * 45s 245ms - for elapsed times < 1h
          * 10m 45s - for elapsed times >= 1h
          
          Returns the formatted elapsed time.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
              (sleep 500)
              (sw/stop sw)
              (println (sw/elapsed-formatted sw)))))
          """)
     :see-also '(
          "stopwatch/create", "stopwatch/copy", "stopwatch/start", "stopwatch/stop", 
          "stopwatch/resume", "stopwatch/split", "stopwatch/elapsed") }

  elapsed-formatted [sw]

  (. sw :elapsedMillisFormatted))


(defn- time-unit-upper-case [u]
  (keyword (str/upper-case (name u))))
 