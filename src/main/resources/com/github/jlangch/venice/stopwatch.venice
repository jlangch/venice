;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; A stop watch


(ns stopwatch)

(import :com.github.jlangch.venice.util.StopWatch)


(defn 
  ^{ :arglists '(
          "(create)")
     :doc """
          Create a new stop watch and implicitely starts it by setting the start 
          time as now. The stop watch has a resolution of milliseconds.

          Returns the created stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  create []
  (. :StopWatch :new))

(defn 
  ^{ :arglists '(
          "(copy)")
     :doc """
          Copies a stop watch with its internal state.
 
          Returns the copied stop watch.
         """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw-1 (sw/create)]
               (sleep 500)
               (let [sw-2 (sw/copy sw-1)]
                 (sw/stop sw-1)
                 (sw/stop sw-2)
                 (println "sw-1: ~(sw/elapsed sw-1) ms")
                 (println "sw-2: ~(sw/elapsed sw-2) ms"))))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  copy [sw]
  (. sw :copy))

(defn 
  ^{ :arglists '(
          "(start)")
     :doc """
          Restart a stop watch by resetting the start time to now.
 
          Returns the stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/start sw)
               (sleep 200)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  start [sw]
  (. sw :start))

(defn 
  ^{ :arglists '(
          "(stop)")
     :doc """
          Stops a stop watch. Remembers the elapsed time and sets the start
          time to now.
 
          Returns the stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """,
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")
               (sleep 300)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  stop [sw]
  (. sw :stop))

(defn 
  ^{ :arglists '(
          "(resume)")
     :doc """
          Resumes a stop watch. Sets the start time to now.
 
          Returns the stop watch.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/resume sw)
               (sleep 300)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  resume [sw]
  (. sw :resume))

(defn 
  ^{ :arglists '(
          "(split)")
     :doc """
          Returns the split time (now - start time) in milli seconds.
  
          Returns the split time.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (println "~(sw/split sw) ms")
               (sleep 300)
               (println "~(sw/split sw) ms")))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  split [sw]
  (. sw :splitTime :MILLISECONDS))
 
(defn 
  ^{ :arglists '(
          "(elapsed)")
     :doc """
          Returns the elapsed time (now - last stop time) in milli seconds.
  
          Returns the elapsed time.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """,
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")
               (sleep 300)
               (sw/stop sw)
               (println "~(sw/elapsed sw) ms")))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  elapsed [sw]
  (. sw :elapsedMillis))
 
(defn 
  ^{ :arglists '(
          "(elapsed-formatted)")
     :doc """
          Returns the elapsed time (now - last stop time) formatted.
          
          Format:Â¶
          * 245ms - for elapsed times < 1s
          * 45s 245ms - for elapsed times < 1h
          * 10m 45s - for elapsed times >= 1h
          
          Returns the formatted elapsed time.
          """
     :examples '(
          """
          (do
            (load-module :stopwatch ['stopwatch :as 'sw])
            (let [sw (sw/create)]
               (sleep 500)
               (sw/stop sw)
               (println (sw/elapsed-formatted sw))))
          """)
     :see-also '(
          "create", "start", "stop", "resume", "split") }
  elapsed-formatted [sw]
  (. sw :elapsedMillisFormatted))
 