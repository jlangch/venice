;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; A super simple logger

(ns logger)



;; -----------------------------------------------------------------------------
;; Logger
;; -----------------------------------------------------------------------------

(defn console-logger 
  ([] (console-logger nil))
  
  ([formatter]
    { :pre [(or (nil? formatter) (fn? formatter))] }
    (let [fmt  (coalesce formatter format-msg)]
      (register-logger
        { :id         :console
          :type       :console
          :formatter  fmt
          :handler    (fn [level principal msg exc] 
                        { :pre [(some? (level #{:debug :info :warn :error :fatal}))] }
                        (println (fmt level principal msg exc)))
          :rotate     (fn [] false) })
      nil)))


(defn file-logger 
  ([id file] 
    (file-logger id file -1 nil :none nil))

  ([id file max-size] 
    (file-logger id file max-size nil :none nil))

  ([id file max-size formatter] 
    (file-logger id file max-size formatter :none nil))

  ([id file max-size formatter rotate-mode rotate-dir]
    { :pre [(and (keyword? id) (not (= id :console)))
            (or (string? file) (io/file? file))
            (long? max-size) 
            (or (nil? formatter) (fn? formatter))
            (keyword? rotate-mode)
            (some? (rotate-mode #{:none :daily :monthly}))
            (or (nil? rotate-dir) (string? rotate-dir) (io/file? rotate-dir))] }
    (when (not (io/exists-dir? (io/file-parent file)))
      (throw (ex :VncException 
                "Failed to create file logger ~{id}. The files's parent directory does not exist!")))
    (let [max-size      (if (pos? max-size) (max 100 max-size) -1)    ;; -1, 100, 101, ...
          max-size-hyst (if (pos? max-size) (/ (* max-size 9) 10) -1) ;; 10% hystersis
          fmt           (coalesce formatter format-msg)
          mutex         0]
      (register-logger
        { :id                 id
          :type               :file
          :file               (io/file file)
          :max-size           max-size 
          :max-size-hystersis max-size-hyst
          :formatter          fmt
          :rotate-mode        rotate-mode
          :rotate-dir         rotate-dir
          :handler            (fn [level principal msg exc] 
                                { :pre [(some? (level #{:debug :info :warn :error :fatal}))] }
                                (locking mutex
                                  (io/spit file (fmt level principal msg exc) :append true)
                                  (when (and (pos? max-size) (> (io/file-size file) max-size))
                                    (io/truncate-from-start-keep-lines file max-size-hyst)))) 
          :rotate             (fn [] 
                                (case rotate-mode
                                  :none    nil
                                  :daily   (locking mutex 
                                             (rotate-by-day id file rotate-dir))
                                  :monthly (if (first-day-of-month?)
                                             (locking mutex 
                                               (rotate-by-month id file rotate-dir))
                                             false)
                                  nil))}))))


(defn logger [id]
  { :pre [(keyword? id)] }
  (let [l (id @loggers (:console @loggers))
        h (:handler l)]
    (fn ([level msg]               (h level nil msg nil))
        ([level principal msg]     (h level principal msg nil))
        ([level principal msg exc] (h level principal msg exc)))))

(defn- register-logger [logger]
  (swap! loggers assoc (:id logger) logger)
  (when (and auto-start-rotation-scheduler? (requires-rotation?))
    (start-rotation-scheduler)))



;; -----------------------------------------------------------------------------
;; Log file rotation
;; -----------------------------------------------------------------------------

(defn rotation-scheduler-running? []
  (deref rotation-scheduler-started?))


(defn rotate [id]
  { :pre [(keyword? id)] }
  (let [l (id @loggers (:console @loggers))
        r (:rotate l)]
    (r)))


(defn rotate-all []
  (doseq [r (map :rotate (vals @loggers))] (try (r) (catch :Exception ex))))


(defn start-rotation-scheduler []
  (if (compare-and-set! rotation-scheduler-started? false true)
    (do
      (cron/schedule-at-round-times-in-day
          rotate-all
          (. :java.time.Duration :ofMinutes 10)    ;; sync period
          (. :java.time.Duration :ofHours 24))     ;; schedule period
      true)
    false)) 


(defn- rotate-by-day [id file archive-dir]
  { :pre [(or (string? file) (io/file? file))] }
  (let [prev-day      (time/minus (time/local-date) :days 1)
        archive-base  (str/format "%s-%d-%02d-%02d" 
                                  (io/file-basename file) 
                                  (time/year prev-day)
                                  (time/month prev-day)
                                  (time/day-of-month prev-day))]
    (rotate-log id file archive-dir archive-base)))


(defn- rotate-by-month [id file archive-dir]
  { :pre [(or (string? file) (io/file? file))] }
  (let [prev-day      (time/minus (time/local-date) :days 1)
        archive-base  (str/format "%s-%d-%02d" 
                                  (io/file-basename file) 
                                  (time/year prev-day) 
                                  (time/month prev-day))]
    (rotate-log id file archive-dir archive-base)))


(defn- rotate-log [id file archive-dir archive-base]
  (when (not (io/exists-dir? archive-dir))
    (throw (ex :VncException 
               "Log rotation failed. The archive dir ~{archive-dir} does not exist!")))
  (if (io/exists-file? file)
    (loop [x 0]
      (when (> x 50)   ;; set an upper limit
        (throw (ex :VncException 
                  "Log rotation failed. Too many target archive files!")))
      (let [suffix  (if (zero? x) ".log" (str/format "-r%02d.log" x))
            archive (io/file archive-dir (str archive-base suffix))
            log     (logger id)]
        (if (io/exists-file? archive)
          (recur (inc x))
          (do 
            (io/move-file file archive)
            (log :info :system "Rotated log file")
            true))))
    false))

(defn requires-rotation? []
  (->> (vals @loggers)
       (map :rotate-mode)
       (filter #(or (= % :daily) (= % :monthly)))
       (not-empty?)))



;; -----------------------------------------------------------------------------
;; Formatter
;; -----------------------------------------------------------------------------

(defn format-msg [level principal msg exc]
  (str/format "%s|%s|%s|%s%n"
              (format-timestamp (time/local-date-time)) 
              (format-level level)
              (if (keyword? principal) (name principal) (str principal))
              (if (nil? exc) msg "~{msg}\n~(format-ex exc)")))

(defn format-level [level]
  (str/upper-case (name level)))

(defn format-ex [e]
  (cond
    (nil? exc)       ""
    (ex-venice? exc) (ex-venice-stacktrace exc)
    :else            (ex-java-stacktrace exc)))

(defn format-timestamp [ts]
  (time/format ts "yyyy-MM-dd HH:mm:ss.SSS"))



;; -----------------------------------------------------------------------------
;; Util
;; -----------------------------------------------------------------------------

(defn first-day-of-month? [] 
  (time/first-day-of-month? (time/local-date-time)))



;; -----------------------------------------------------------------------------
;; Main
;; -----------------------------------------------------------------------------

;; if true, start a rotation scheduler implicitely if a logger with file
;; rotation has been registered
(def- auto-start-rotation-scheduler? false)

;; a map of all registered loggers (key: id, value: config map)
(def- loggers (atom {}))

;; if true the rotation scheduler has been started 
(def- rotation-scheduler-started? (atom false))

;; register a default console logger
(register-logger (console-logger nil))
