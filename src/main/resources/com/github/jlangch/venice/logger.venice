;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; A super simple logger

(ns logger)


(defn handler 
  ([file] 
    (handler file -1 nil))

  ([file max-size] 
    (handler file max-size nil))

  ([file max-size formatter] 
    { :pre [(or (string? file) (io/file? file))
            (long? max-size) 
            (or (nil? formatter) (fn? formatter))] }
    (let [max-size      (if (pos? max-size) (max 100 max-size) -1)    ;; -1, 100, 101, ...
          max-size-hyst (if (pos? max-size) (/ (* max-size 9) 10) -1) ;; 10% hystersis
          formatter     (coalesce formatter format-msg)]
      { :file               (io/file file)
        :max-size           max-size 
        :max-size-hystersis max-size-hyst
        :formatter          formatter })))


(defn log 
  ([handler level msg]
    (log handler level nil msg nil))

  ([handler level principal msg]
    (log handler level principal msg nil))

  ([handler level principal msg exc]
    (locking mutex
      (let [f   (:file handler)
            m   (:max-size-hystersis handler -1)
            fmt (:formatter handler format-msg)]
        (io/spit f (fmt level principal msg exc) :append true)
        (when (and (pos? m) (> (io/file-size f) m))
          (io/truncate-from-start-keep-lines f m))))))


;; -----------------------------------------------------------------------------
;; Log file rotation
;; -----------------------------------------------------------------------------

(defn rotate-log-file-by-day [handler archive-dir]
  { :pre [(map? handler) (some? archive-dir)] }

  (when (not (io/exists-dir? archive-dir))
    (throw (ex :VncException 
               "Log rotation failed. The archive dir ~{archive-dir} does not exist!")))

  (locking mutex
    (let [file          (:file handler)
          prev-day      (time/minus (time/local-date) :days 1)
          archive-base  (str/format "%s-%d-%02d-%02d" 
                                    (io/file-basename file) 
                                    (time/year prev-day)
                                    (time/month prev-day)
                                    (time/day-of-month prev-day)) ]
      (when (io/exists-file? file)
        (rotate-log-file file archive-dir archive-base)
        (logger/log handler :info :system "Rotated log file")))))


(defn rotate-log-file-by-month [handler archive-dir]
  { :pre [(map? handler) (some? archive-dir)] }

  (when (not (io/exists-dir? archive-dir))
    (throw (ex :VncException 
               "Log rotation failed. The archive dir ~{archive-dir} does not exist!")))

  (locking mutex
    (let [file          (:file handler)
          prev-day      (time/minus (time/local-date) :days 1)
          archive-base  (str/format "%s-%d-%02d" 
                                    (io/file-basename file) 
                                    (time/year prev-day) 
                                    (time/month prev-day))]
      (when (io/exists-file? file)
        (rotate-log-file file archive-dir archive-base)
        (logger/log handler :info :system "Rotated log file")))))


(defn- rotate-log-file [file archive-dir archive-base]
  (loop [x 0]
    (when (> x 50)   ;; set an upper limit
      (throw (ex :VncException 
                 "Log rotation failed. Too many target archive files!")))
    (let [suffix  (if (zero? x) ".log" (str/format "-r%02d.log" x))
          archive (io/file archive-dir (str archive-base suffix))]
      (if (io/exists-file? archive)
        (recur (inc x))
        (io/move-file file archive)))))
  

;; -----------------------------------------------------------------------------
;; Formatter
;; -----------------------------------------------------------------------------

(defn format-msg [level principal msg exc]
  (str/format "%s|%s|%s|%s%n"
              (format-timestamp (time/local-date-time)) 
              (format-level level)
              (if (keyword? principal) (name principal) (str principal))
              (if (nil? exc) msg "~{msg}\n~(format-ex exc)")))

(defn format-level [level]
  (str/upper-case (name level)))

(defn format-ex [e]
  (cond
    (nil? exc)       ""
    (ex-venice? exc) (ex-venice-stacktrace exc)
    :else            (ex-java-stacktrace exc)))

(defn format-timestamp [ts]
  (time/format ts "yyyy-MM-dd HH:mm:ss.SSS"))


(def- mutex nil)