;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; A super simple logger

(ns logger)


(def linefeed (str/platform-lf))


;; -----------------------------------------------------------------------------
;; Logger
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(console-logger)",
          "(console-logger formatter)")
     :doc """
          Create a console logger with either the default log message formatter
          or a custom formatter.

          The console logger has the fix id `:console`
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            ;; create the console logger
            (logger/console-logger)

            ;; get the :console logger
            (def log-console (logger/logger :console))

            ;; log some messages
            (log-console :info "test message")
            (log-console :info  "kermit" "test message")
            (log-console :info  "kermit" "test message" (ex :VncException "test exception")))
          """
          """
          (do
            (load-module :logger)

            ;; custom formatter
            (defn custom-msg-formatter [level principal msg exc]
              (str/format "%s [%s] [%s] %s%n"
                          (time/format (time/local-date-time) "yyyy-MM-dd HH:mm:ss.SSS") 
                          (logger/format-level level)
                          (if (keyword? principal) (name principal) (str principal))
                          (if (nil? exc) msg "~{msg}~(str/platform-lf)~(logger/format-ex exc)")))

            ;; create the console logger with a custom formatter
            (logger/console-logger custom-msg-formatter)

            ;; get the :console logger
            (def log-console (logger/logger :console))

            ;; log some messages
            (log-console :info "test message")
            (log-console :info  "kermit" "test message")
            (log-console :info  "kermit" "test message" (ex :VncException "test exception")))
          """)
     :see-also '(
          "logger/logger"
          "logger/file-logger"
          "logger/format-level"
          "logger/format-ex") }

  console-logger 

  ([] (console-logger nil))

  ([formatter]
    { :pre [(or (nil? formatter) (fn? formatter))] }
    (let [fmt (coalesce formatter format-msg)]
      (register-logger
        { :id         :console
          :type       :console
          :formatter  fmt
          :handler    (fn [level principal msg exc] 
                        { :pre [(some? (level #{:debug :info :warn :error :fatal}))] }
                        (spit-to-stdout (format fmt level principal msg exc)))
          :rotate     (fn [] false) } )
      nil)))


(defn 
  ^{ :arglists '(
          "(file-logger id file)"
          "(file-logger id file max-size)"
          "(file-logger id file max-size formatter)"
          "(file-logger id file max-size formatter rotate-mode rotate-dir)")
     :doc """
          Create a file logger.

          Arguments:

          | id          | The mandatory logger ID. A keyword like :venice |
          | file        | The mandatory file to log to. The parent dir must exist |
          | max-size    | The max size of the file in bytes. If the size is \
                          reached the file will be auto truncated |
          | formatter   | A custom formatter|
          | rotate-mode | A file rotation mode {:none, :daily, :montly}. \
                          Defaults to :none|
          | rotate-dir  | The file rotation directory. The directory must be \
                          specified and must exist if the rotate mode is :daily \
                          or :monthly |
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            ;; create the file loggers
            (logger/file-logger :venice "/data/logs/venice.log")
            (logger/file-logger :database "/data/logs/database.log" 20_000_000)

            ;; get the loggers
            (def log-venice (logger/logger :venice))
            (def log-database (logger/logger :database))

            ;; log some messages
            (log-venice :info "test message")
            (log-venice :info  "kermit" "test message")
            (log-venice :info  "kermit" "test message" (ex :VncException "test exception"))
            (log-database :info "test message"))
          """
          """
          (do
            (load-module :logger)

            ;; create the rotating file logger
            (logger/file-logger :venice "/data/logs/venice.log" 
                                20_000_000 
                                nil
                                :daily "/data/logs/archive")

            ;; get the logger
            (def log (logger/logger :venice))

            ;; log some messages
            (log :info "test message")
            (log :info  "kermit" "test message")
            (log :info  "kermit" "test message" (ex :VncException "test exception")))
          """
          """
          (do
            (load-module :logger)

            ;; custom formatter
            (defn custom-msg-formatter [level principal msg exc]
              (str/format "%s [%s] [%s] %s%n"
                          (time/format (time/local-date-time) "yyyy-MM-dd HH:mm:ss.SSS") 
                          (logger/format-level level)
                          (if (keyword? principal) (name principal) (str principal))
                          (if (nil? exc) msg "~{msg}~(str/platform-lf)~(logger/format-ex exc)")))

            ;; create the file logger with a custom formatter
            (logger/file-logger :venice "/data/logs/venice.log" nil custom-msg-formatter)

            ;; get the :venice logger
            (def log (logger/logger :venice))

            ;; log some messages
            (log :info "test message")
            (log :info  "kermit" "test message")
            (log :info  "kermit" "test message" (ex :VncException "test exception")))
          """)
     :see-also '(
          "logger/logger"
          "logger/console-logger"
          "logger/format-level"
          "logger/format-ex") }

  file-logger 
  
  ([id file] 
    (file-logger id file -1 nil :none nil))

  ([id file max-size] 
    (file-logger id file max-size nil :none nil))

  ([id file max-size formatter] 
    (file-logger id file max-size formatter :none nil))

  ([id file max-size formatter rotate-mode rotate-dir]
    { :pre [(and (keyword? id) (not (= id :console)))
            (or (string? file) (io/file? file))
            (long? max-size) 
            (or (nil? formatter) (fn? formatter))
            (keyword? rotate-mode)
            (some? (rotate-mode #{:none :daily :monthly}))
            (or (nil? rotate-dir) (string? rotate-dir) (io/file? rotate-dir))] }
    (when (not (io/exists-dir? (io/file-parent file)))
      (throw (ex :VncException 
                "Failed to create file logger ~{id}. The files's parent directory does not exist!")))
    (let [max-size      (if (pos? max-size) (max 100 max-size) -1)    ;; -1, 100, 101, ...
          max-size-hyst (if (pos? max-size) (/ (* max-size 9) 10) -1) ;; 10% hystersis
          fmt           (coalesce formatter format-msg)
          mutex         0]
      (register-logger
        { :id                 id
          :type               :file
          :file               (io/file file)
          :max-size           max-size 
          :max-size-hystersis max-size-hyst
          :formatter          fmt
          :rotate-mode        rotate-mode
          :rotate-dir         rotate-dir
          :handler            (fn [level principal msg exc] 
                                { :pre [(some? (level #{:debug :info :warn :error :fatal}))] }
                                (locking mutex
                                  (spit-to-file file (format fmt level principal msg exc))
                                  (when (and (pos? max-size) (> (io/file-size file) max-size))
                                    (try
                                      (io/truncate-from-start-keep-lines file max-size-hyst)
                                      (catch :Exception ex 
                                        (spit-to-file file (format fmt :error :system 
                                                                   "Failed to truncate log file" 
                                                                   nil)))))))
          :rotate             (fn [] 
                                (let [log (logger id)]
                                  (case rotate-mode
                                    :none    nil
                                    :daily   (locking mutex (rotate-log-by-day id file rotate-dir))
                                    :monthly (if (first-day-of-month?)
                                              (locking mutex (rotate-log-by-month id file rotate-dir))
                                              (do
                                                (log :debug :system "No monthly log file rotation today")
                                                false))
                                    nil))) } )
      nil)))


(defn 
  ^{ :arglists '(
          "(logger id)")
     :doc """
          Returns the logger withe the specified ID.

          If there is no logger with the id returns the default :console logger. 
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            ;; create a file logger
            (logger/file-logger :venice "/data/logs/venice.log")

            ;; get the logger
            (def log (logger/logger :venice))

            ;; log some messages
            (log :info "test message 1")
            (log :info "test message 2"))
          """)
     :see-also '(
          "logger/console-logger"
          "logger/file-logger"
          "logger/format-level"
          "logger/format-ex") }

  logger [id]

  { :pre [(keyword? id)] }
  (let [l (id @loggers (:console @loggers))
        h (:handler l)]
    (fn ([level msg]               (h level nil msg nil))
        ([level principal msg]     (h level principal msg nil))
        ([level principal msg exc] (h level principal msg exc)))))

(defn- register-logger [logger]
  (swap! loggers assoc (:id logger) logger)
  (when (and @auto-start-rotation-scheduler? (requires-rotation?))
    (start-rotation-scheduler)))



;; -----------------------------------------------------------------------------
;; Log file rotation
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(rotation-scheduler-running?)")
     :doc """
          Returns `true` if a rotation scheduler is running else `false`. 

          The scheduler is started when the first file logger that has file
          rotation enabled is created!
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/enable-auto-start-rotation-scheduler true)

            (logger/file-logger :venice "/logs/venice.log" -1 nil :daily "/logs/archive")

            (logger/rotation-scheduler-running?))
          """)
     :see-also '(
          "logger/enable-auto-start-rotation-scheduler"
          "logger/start-rotation-scheduler"
          "logger/rotate"
          "logger/rotate-all"
          "logger/requires-rotation?") }

  rotation-scheduler-running? []

  (deref rotation-scheduler-started?))


(defn 
  ^{ :arglists '(
          "(enable-auto-start-rotation-scheduler activate)")
     :doc """
          Enables or disables the auto start of the rotation scheduler. Default
          is deactivated.

          Must be called before any file loggers are created.
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/enable-auto-start-rotation-scheduler true)

            (logger/file-logger :venice "/logs/venice.log" -1 nil :daily "/logs/archive")

            (def log(logger/logger :venice))

            (log :info "test message 1")
            (log :info "test message 2"))
          """)
     :see-also '(
          "logger/rotation-scheduler-running?"
          "logger/start-rotation-scheduler"
          "logger/rotate"
          "logger/rotate-all"
          "logger/requires-rotation?") }

  enable-auto-start-rotation-scheduler [activate]

  (reset! auto-start-rotation-scheduler? activate))


(defn 
  ^{ :arglists '(
          "(start-rotation-scheduler)")
     :doc """
          Manually start the rotation scheduler. 
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/start-rotation-scheduler)

            (logger/file-logger :venice "/logs/venice.log" -1 nil :daily "/logs/archive")

            (def log(logger/logger :venice))

            (log :info "test message 1")
            (log :info "test message 2"))
          """)
     :see-also '(
          "logger/rotation-scheduler-running?"
          "logger/enable-auto-start-rotation-scheduler"
          "logger/rotate"
          "logger/rotate-all"
          "logger/requires-rotation?") }
  
  start-rotation-scheduler []

  (if (compare-and-set! rotation-scheduler-started? false true)
    (do
      (cron/schedule-at-round-times-in-day
          rotate-all
          (. :java.time.Duration :ofMinutes 10)    ;; sync period
          (. :java.time.Duration :ofHours 24))     ;; schedule period
      true)
    false)) 


(defn 
  ^{ :arglists '(
          "(rotate id)")
     :doc """
          Manually rotates the log file of the logger with the ID 'id' if the 
          logger has file rotation enabled.
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/file-logger :venice "/logs/venice.log" -1 nil :daily "/logs/archive")

            (def log(logger/logger :venice))

            (log :info "test message 1")
            (log :info "test message 2")

            (logger/rotate :venice))
          """)
     :see-also '(
          "logger/rotation-scheduler-running?"
          "logger/enable-auto-start-rotation-scheduler"
          "logger/start-rotation-scheduler"
          "logger/rotate-all"
          "logger/requires-rotation?") }

  rotate [id]

  { :pre [(keyword? id)] }
  (let [l (id @loggers (:console @loggers))
        r (:rotate l)]
    (r)))


(defn 
  ^{ :arglists '(
          "(rotate-all)")
     :doc """
          Manually rotates the log files of all loggers that have file rotation 
          enabled.
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/file-logger :venice "/logs/venice.log" -1 nil :daily "/logs/archive")

            (def log(logger/logger :venice))

            (log :info "test message 1")
            (log :info "test message 2")

            (logger/rotate-all))
          """)
     :see-also '(
          "logger/rotation-scheduler-running?"
          "logger/enable-auto-start-rotation-scheduler"
          "logger/start-rotation-scheduler"
          "logger/rotate"
          "logger/requires-rotation?") }

  rotate-all []

  (doseq [r (map :rotate (vals @loggers))] (try (r) (catch :Exception ex))))


(defn 
  ^{ :arglists '(
          "(requires-rotation?)")
     :doc """
          Returns `true` if there is at least on logger that has log file 
          rotation enabled. 
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/file-logger :venice "/logs/venice.log" -1 nil :daily "/logs/archive")

            (def log(logger/logger :venice))

            (log :info "test message 1")
            (log :info "test message 2")

            (logger/requires-rotation?))
          """)
     :see-also '(
          "logger/rotation-scheduler-running?"
          "logger/enable-auto-start-rotation-scheduler"
          "logger/start-rotation-scheduler"
          "logger/rotate"
          "logger/rotate-all") }

  requires-rotation? []

  (->> (vals @loggers)
       (map :rotate-mode)
       (filter #(or (= % :daily) (= % :monthly)))
       (not-empty?)))


(defn- rotate-log-by-day [id file archive-dir]
  (try
    (let [prev-day      (time/minus (time/local-date) :days 1)
          archive-base  (str/format "%s-%d-%02d-%02d" 
                                    (io/file-basename file) 
                                    (time/year prev-day)
                                    (time/month prev-day)
                                    (time/day-of-month prev-day))]
      (rotate-log id file archive-dir archive-base))
    (catch :Exception e 
        (log :error :system (str "Log daily rotation failed. " (ex-message e)))
        false)))


(defn- rotate-log-by-month [id file archive-dir]
  (try
    (let [prev-day      (time/minus (time/local-date) :days 1)
          archive-base  (str/format "%s-%d-%02d" 
                                    (io/file-basename file) 
                                    (time/year prev-day) 
                                    (time/month prev-day))]
      (rotate-log id file archive-dir archive-base))
    (catch :Exception e 
        (log :error :system (str "Log monthly rotation failed. " (ex-message e)))
        false)))


(defn- rotate-log [id file archive-dir archive-base]
  (when (not (io/exists-dir? archive-dir))
    (throw (ex :VncException "The archive dir ~{archive-dir} does not exist!")))
  (if (io/exists-file? file)
    (loop [x 0]
      (when (> x 50)   ;; set an upper limit
        (throw (ex :VncException "Too many archive index files!")))
      (let [suffix  (if (zero? x) ".log" (str/format "-r%02d.log" x))
            archive (io/file archive-dir (str archive-base suffix))
            log     (logger id)]
        (if (io/exists-file? archive)
          (recur (inc x))
          (do 
            (io/move-file file archive)
            (log :info :system "Rotated log file")
            true))))
    false))



;; -----------------------------------------------------------------------------
;; Formatter
;; -----------------------------------------------------------------------------

(defn format [formatter level principal msg exc]
  (try
    (formatter level principal msg exc)
    (catch :Exception e "[Failed to format the log message]")))


(defn format-msg [level principal msg exc]
  (str/format "%s|%s|%s|%s%n"
              (time/format (time/local-date-time) "yyyy-MM-dd HH:mm:ss.SSS") 
              (format-level level)
              (if (keyword? principal) (name principal) (str principal))
              (if (nil? exc) msg "~{msg}~{linefeed}~(format-ex exc)")))


(defn 
  ^{ :arglists '(
          "(format-level level)")
     :doc """
          Formats a log level. level mus be a keyword!
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/format-level :info)
            (logger/format-level :warn))
          """) }

  format-level [level]

  (if (keyword? level)
    (str/upper-case (name level))
    "???"))


(defn 
  ^{ :arglists '(
          "(format-ex e)")
     :doc """
          Formats an exception. The exception my be a Venice exception or a
          Java exception. 
          
          Returns a Venice stack trace in the former case and a Java stack trace 
          in the ladder.
          """ 
     :examples '(
          """
          (do
            (load-module :logger)

            (logger/format-ex (ex :VncException "test")))
          """) }

  format-ex [e]

  (cond
    (nil? e)       ""
    (ex-venice? e) (ex-venice-stacktrace e)
    (ex? e)        (ex-java-stacktrace e)
    :else.         ""))



;; -----------------------------------------------------------------------------
;; Util
;; -----------------------------------------------------------------------------

(defn first-day-of-month? [] 
  (time/first-day-of-month? (time/local-date-time)))

(defn spit-to-stdout [text]
  (print text))

(defn spit-to-file [file text]
  (io/spit file text :append true))


;; -----------------------------------------------------------------------------
;; Main
;; -----------------------------------------------------------------------------

;; if true, start a rotation scheduler implicitely if a logger with file
;; rotation has been registered
(def- auto-start-rotation-scheduler? (atom true))

;; a map of all registered loggers (key: id, value: data map)
(def- loggers (atom {}))

;; if true the rotation scheduler has been started 
(def- rotation-scheduler-started? (atom false))

;; register a default console logger
(register-logger (console-logger nil))
