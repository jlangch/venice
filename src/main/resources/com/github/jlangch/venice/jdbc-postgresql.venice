;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; JDBC PostgreSQL utils

;;;; See: 
;;;; https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html


(ns jdbc-postgresql)


(import :java.sql.DriverManager)
(import :java.sql.Connection)
(import :java.sql.Statement)

(import :java.util.Properties)



(defonce default-host "localhost")
(defonce default-port 5432)

(defn 
  ^{ :arglists '(
          "(create-connection user password)"
          "(create-connection host port user password)"
          "(create-connection host port database user password)"
          "(create-connection host port database user password properties)" )
     :doc """
          Creates a PostgreSQL connection. 
        
          Arguments:

          | [![width: 20%]] | [![width: 80%]] |
          | *user*        | A mandatory ser name |
          | *password*    | A mandatory password |
          | *host*        | An optional host. Defaults to "localhost" |
          | *port*        | An optional port. Defaults to 5432 |
          | *database*    | A mandatory database name |
          | *properties*  | Optional properties (a map). Â¶\
                            E.g.: { "ssl" "true", "options" "-c statement_timeout=90000" } |
          """
     :examples '(
          """
          (do
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbc])
           
            (try-with [conn (jdbc/create-connection "pg" "pg" "test")
                       st   (create-statement conn)
                       rs   (execute-query st "SELECT * FROM mytable WHERE columnfoo = 500")]
              (loop []
                (when (. rs :next) (println (. rs :getString 1))))))
          """) 
     :see-also '(
          "jdbc-postgresql/create-database"
          "jdbc-postgresql/drop-database" ) }

  create-connection 

  ([user password]
    (assert (string? user))
    (assert (string? password))
    (let [url "jdbc:postgresql:/"]
      (. :DriverManager :getConnection url user (or password ""))))

  ([host port user password]
    (assert (string? host))
    (assert (or (int? port) (long? port)))
    (assert (string? user))
    (assert (string? password))
    (let [url "jdbc:postgresql://~{host}:~(long port)/"]
      (. :DriverManager :getConnection url user (or password ""))))

  ([host port database user password]
    (assert (string? host))
    (assert (or (int? port) (long? port)))
    (assert (string? database))
    (assert (string? user))
    (assert (string? password))
    (let [url "jdbc:postgresql://~{host}:~(long port)/~{database}"]
      (. :DriverManager :getConnection url user (or password ""))))

  ([host port database user password properties]
    (assert (string? host))
    (assert (or (int? port) (long? port)))
    (assert (string? database))
    (assert (string? user))
    (assert (string? password))
    (assert (map? properties))
    (assert (every? string? (keys properties)))
    (assert (every? string? (vals properties)))
    (let [url   "jdbc:postgresql://~{host}:~(long port)/~{database}"
          props (as-properties user password properties)]
      (. :DriverManager :getConnection url props))))

 
(defn- as-properties [user password properties]
  (let [props  (. :Properties :new)]
    (. props :setProperty "user" user)
    (. props :setProperty "password" (or password ""))
    (doseq [[n v] (seq properties)] (. props :setProperty n v))))



;; -----------------------------------------------------------------------------
;; Create / Drop database
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create-database conn database)"
          "(create-database conn database force)" )
     :doc """
          Creates a new database. If force flag is true drops the database first
          if it exists. 
          """
     :examples '(
          """
          (do
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbc])
            (try-with [conn (jdbc/create-connection "pg" "pg")]
              (jdbc/create-database conn "test")))
          """,
          """
          (do
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbc])
            (try-with [conn (jdbc/create-connection "pg" "pg")]
              (jdbc/create-database conn "test" true)))
          """) 
     :see-also '(
          "jdbc-postgresql/create-connection"
          "jdbc-postgresql/drop-database" ) }

  create-database 

  ([conn database]
    (create-database conn database false))

  ([conn database force]
    (assert (instance-of? :Connection conn))
    (assert (string? database))
    (assert (boolean? force))
    (when force
      (drop-database conn database))
    (try-with [st (create-statement conn)]
      (execute st (str "CREATE DATABASE " database)))))


(defn 
  ^{ :arglists '(
          "(drop-database conn database)"
          "(drop-database conn database force)" )
     :doc """
          Drops a database if it exists. 

          The force option will attempt to terminate all existing connections 
          to the database.
          """
     :examples '(
          """
          (do
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbc])
            (try-with [conn (jdbc/create-connection "pg" "pg")]
              (jdbc/drop-database conn "test")))
          """) 
     :see-also '(
          "jdbc-postgresql/create-connection"
          "jdbc-postgresql/create-database" ) }

  drop-database

  ([conn database]
    (drop-database conn database false))
      
  ([conn database force]
    (assert (instance-of? :Connection conn))
    (assert (string? database))
    (assert (boolean? force))
    
    (try-with [st (create-statement conn)]
      (execute st (str/format "DROP DATABASE IF EXISTS %s%s"
                              database
                              (if force " FORCE" ""))))))



;; -----------------------------------------------------------------------------
;; Helpers 
;; -----------------------------------------------------------------------------

(defn create-statement [conn]
   (. conn :createStatement))


(defn execute [stmt sql]
  (. stmt :execute sql))


(defn execute-query [stmt sql]
  (let [rs         (. stmt :executeQuery sql)
        meta-data  (. rs :getMetaData)
        col-count  (. meta-data :getColumnCount)]
    (loop [rs rs, rows []]
      (if (. rs :next)
        (recur rs (conj rows (row-names rs col-count)))
        { :names row-names, :rows rows}))))
 

(defn execute-update [stmt sql]
  (. stmt :executeUpdate sql))


(defn row-names [rs]
  (let [rs         (. stmt :executeQuery sql)
        meta-data  (. rs :getMetaData)
        col-count  (. meta-data :getColumnCount)]
  (loop [names [], col 1]
    (if (<= count col-count)
      (let [name (. meta-data :getColumnName col)]
        (recur (conj names name) (inc col)))
        names))))


(defn row-values [rs col-count]
  (loop [row [], col 1]
    (if (<= count col-count)
      (let [val (map-value (. rs :getObject col))]  
        (recur (conj row val) (inc col)))
        row)))


(defn- map-value [val]
  (cond 
    (sql-date? val)  (convert-sql-date-to-local-date-time val)
    :else            val))


(defn- sql-date? [val]
  (instance-of? :java.sql.Date val))


(defn- convert-sql-date-to-local-date-time [d]
  (if (nil? d) nil (time/local-date-time d)))


(defn- convert-sql-date-to-local-date [d]
  (if (nil? d) nil (time/local-date d)))


