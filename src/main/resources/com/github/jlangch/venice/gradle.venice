;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Gradle utilities


(ns gradle)

(defmacro
  ^{ :arglists '("(with-home gradle-dir proj-dir & forms)")
     :doc """
          Sets the Gradle home and the project directory for all
          subsequent forms.
          """
     :examples '(
          """
          (gradle/with-home "/Users/foo/Documents/Tools/gradle-5.6.2"
                            "/Users/foo/Documents/Projects/my-project"
            (gradle/version))
          """) }

  with-home [gradle-dir proj-dir & forms]

  `(binding [*gradle-home*      ~gradle-dir
             *gradle-script*    (gradle/gradle-script-path ~gradle-dir)
             *gradle-proj-home* ~proj-dir]
    (do ~@forms)))


(defn
  ^{ :arglists '("(gradle/version)")
     :doc "Returns the Gradle version"
     :examples '(
          """
          (gradle/with-home "/Users/foo/Documents/Tools/gradle-5.6.2"
                            "/Users/foo/Documents/Projects/my-project"
            (gradle/version))
          """) }

  version []

  (-<> ((gradle/exec) (str *gradle-script* " -version") :throw-ex true)
       (:out <>)
       (str/split-lines <>)
       (filter #(str/starts-with? % "Gradle ") <>)
       (map #(str/subs % 7) <>)
       (first <>)))


(defn
  ^{ :arglists '(
          "(gradle/task name & options)"
          "(gradle/task name out-fn & options)"
          "(gradle/task name out-fn err-fn throw-ex & options)")
     :doc "Runs a gradle task"
     :examples '(
          """
          (gradle/with-home "/Users/foo/Documents/Tools/gradle-5.6.2"
                            "/Users/foo/Documents/Projects/my-project"
            (gradle/task compile)
            (gradle/task compile "--warning-mode=all" "--stacktrace")
            (gradle/task compile println)
            (gradle/task compile println println true)
            (gradle/task compile println println true "--stacktrace"))
          """) }
  task

  ([name & options]
    (gradle/task name println println true options))

  ([name out-fn & options]
    (gradle/task name out-fn out-fn true options))

  ([name out-fn err-fn throw-ex & options]
    ;; Gradle options
    ;;   --debug
    ;;   --warning-mode=all
    ;;   --stacktrace
    ;;   --info
    ;;   --debug
    ;;   -Dorg.gradle.java.home=...
    ((gradle/exec) (str/join " " (conj (cons *gradle-script* options) name))
                   :dir *gradle-proj-home*
                   :out-fn out-fn
                   :err-fn err-fn
                   :throw-ex throw-ex)))

(defn gradlew-script-path [proj-home]
  (case (os-type)
    :mac-osx (str proj-home "/gradlew")
    :linux   (str proj-home "/gradlew")
    :windows (str proj-home "/gradlew.bat")))

(defn gradle-script-path [gradle-home]
  (case (os-type)
    :mac-osx (str gradle- "/bin/gradle")
    :linux   (str gradle- "/bin/gradle")
    :windows (str gradle- "/bin/gradle.bat")))


(defn exec []
  (case (os-type)
    :mac-osx (partial sh "/bin/sh" "-c")
    :linux   (partial sh "/bin/sh" "-c")
    :windows (partial sh "cmd" "/C")))
