;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ASCII table


(ns ascii-table)

;;           standard         double          bold          alpha  
;;
;;        +---+---+---+   ╔═══╤═══╤═══╗   ┏━━━┯━━━┯━━━┓   ABBBCBBBCBBBD
;; head   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   E   F   F   G
;;        +---+---+---+   ╠═══╪═══╪═══╣   ┣━━━┿━━━┿━━━┫   HIIIJIIIJIIIK
;; body   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   L   M   M   N
;;        +---+---+---+   ╟───┼───┼───╢   ┠───┼───┼───┫   OPPPQPPPQPPPR
;; body   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   L   M   M   N
;;        +---+---+---+   ╠═══╪═══╪═══╣   ┣━━━┿━━━┿━━━┫   STTTUTTTUTTTV
;; foot   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   W   X   X   Y
;;        +---+---+---+   ╚═══╧═══╧═══╝   ┗━━━┷━━━┷━━━┛   Z111211121113


;; https://www.charset.org/utf-8/10

                                 ;0   4  7   11 14  18  22 25                      
(def border-chars                ;|---|--|---|--|---|---|--|---
  { :none                        "•••••••••••••••••••••••••••••"
    :standard                    "+-++|||+-++|||+-+++-++|||+-++"
    :standard-no-data            "+-++|||+-++|||••••+-++|||+-++"
    :standard-no-data-no-outside "•••••|••-+••|••••••-+••|•••••"
    :standard-no-outside         "•••••|••-+••|••-+••-+••|•••••"
    :standard-minimal            "•-••••••-••••••••••-••••••-••"
    :double                      "╔═╤╗║│║╠═╪╣║│║╟─┼╢╠═╪╣║│║╚═╧╝"
    :double-no-data              "╔═╤╗║│║╠═╪╣║│║••••╠═╪╣║│║╚═╧╝"
    :bold                        "┏━┯┓┃│┃┣━┿┫┃│┃┠─┼┨┣━┿┫┃│┃┗━┷┛"
    :bold-no-data                "┏━┯┓┃│┃┣━┿┫┃│┃••••┣━┿┫┃│┃┗━┷┛"
    :thin                        "┌─┬┐│││├─┼┤│││├─┼┤├─┼┤│││└─┴┘"
    :thin-no-data                "┌─┬┐│││├─┼┤│││••••├─┼┤│││└─┴┘"
    :matrix                      "•••••••••••│ │    •••••••••••"
    :minimal                     "•─••••••─••••••••••─••••••─••"
    :alpha                       "ABCDEFGHIJKLMNOPQRSTUVWXYZ123"
    :alpha-minimal               "•B••••••I••••••••••T••••••1••" })

(def nil-char #\•)

(def alignments #{:left :center :right})
(def overflows #{:newline :clip-left :clip-right :ellipsis-left :ellipsis-right})
(def borders (into #{} (keys border-chars)))

(def min-col-width 1)
(def max-col-width 80)
(def min-padding  0)
(def max-padding 10)


(defn 
  ^{ :arglists '(
          "(ascii-table/render header data footer border padding)"
          "(ascii-table/render columns data border padding)")
     :doc "Renders an ascii table."
     :examples (list
          """
          (do
            (load-module :ascii-table)
            (println (ascii-table/render nil 
                                         [["1 1" "1 2"] ["2 1" "2 2"]] 
                                         nil 
                                         :standard
                                         1)))
          """,
          """
          (do
            (load-module :ascii-table)
            (println (ascii-table/render ["head 1" "head 2"] 
                                         [["1 1" "1 2"] ["2 1" "2 2"]] 
                                         ["foot 1" "foot 2"] 
                                         :standard
                                         1)))
          """,
          """
          (do
            (load-module :ascii-table)
            (println (ascii-table/render [{:width  6} {:width  6}] 
                                         [["1 1" "1 2"] ["2 1" "2 2"]] 
                                         :double
                                         1)))
          """,
          """
          (do
            (load-module :ascii-table)
            (println (ascii-table/render [{:header {:text "head 1"
                                                    :align :left
                                                    :overflow :newline }
                                           :footer {:text "4"
                                                    :align :left
                                                    :overflow :newline}
                                           :body   {:align :left
                                                    :overflow :newline}
                                           :width  8}
                                          {:header {:text "head 2"
                                                    :align :right
                                                    :overflow :newline}
                                           :footer {:text "6"
                                                    :align :right
                                                    :overflow :newline}
                                           :body   {:align :right
                                                    :overflow :newline}
                                           :width  8}] 
                                         [["1" "2"] ["3" "4"]] 
                                         :double
                                         1)))
          """ ) }
  render 

  ([header data footer border padding]
    (assert (or (nil? header) (sequential? header)) "header must be a list or a vector of strings")
    (assert (sequential? data) "data must be a 2 dimensional sequence of strings")
    (assert (or (nil? footer) (sequential? footer)) "footer must be a list or a vector of strings")
    (assert (long? padding) "padding must be a long")
    (let [data (as-strings data)]
      (render-table (build-columns header data footer) data border padding)))

  ([columns data border padding]
    (assert (sequential? columns) "columns must be a sequence of maps")
    (assert (sequential? data) "data must be a 2 dimensional sequence of strings")
    (assert (long? padding) "padding must be a long")
    (let [data (as-strings data)]
      (render-table columns data border padding))))


(defn demo-styles []
  (println (render [{:header {:text "header 1\n[kg]", :align :left, :overflow :newline}
                     :body   {:align :left, :overflow :newline}
                     :footer {:text "footer 1" :align :left, :overflow :newline}
                     :width 14}
                    {:header {:text "header 2\n[kg]", :align :center, :overflow :newline}
                     :body   {:align :center, :overflow :newline}
                     :footer {:text "footer 2" :align :center, :overflow :newline}
                     :width 14}
                    {:header {:text "header 3\n[kg]", :align :right, :overflow :newline}
                     :body   {:align :right, :overflow :newline}
                     :footer {:text "footer 3" :align :right, :overflow :newline}
                     :width 14}]
                   [[1 2 3] 
                    [100 200 300] 
                    [(str/lorem-ipsum :chars 35)
                     (str/lorem-ipsum :chars 35)
                     (str/lorem-ipsum :chars 35)]] 
                   :double
                   1)))


(defn demo-two-column-text []
  (println (render [{:body  {:align :left, :overflow :newline}
                     :width 30}
                    {:body  {:align :left, :overflow :newline}
                     :width 30}] 
                   [[(str/lorem-ipsum :chars 190) 
                     (str/lorem-ipsum :chars 140)]] 
                   :thin
                   1)))



(defn render-table [columns data border padding]
  (let [columns (if (= :matrix border) (style-for-matrix columns) columns)]
     (->> (render-table-rows columns data border padding)
          (flatten)
          (map #(if (or (empty? %) (match? % #"[ ]+$")) nil %))
          (filter some?)
          (str/join "\n"))))

(defn render-table-rows [columns data border padding]
  (let [columns (map validate-column columns)
        padding (min-max min-padding max-padding padding)
        border  (validate-border border)
        bc      (fn [i] (let [c (nth border i)] 
                          (if (= nil-char c) "" (str c))))]
    [
      ;; header
      (render-border-row columns padding (bc 1) (bc 0) (bc 2) (bc 3))     
      (when (header? columns)
        (conj
          (render-data-rows columns :header padding (header-cells columns) 
                                                    (bc 4) (bc 5) (bc 6))
          (render-border-row columns padding (bc 8) (bc 7) (bc 9) (bc 10))))

      ;; body
      (when (not-empty? data)
        (let [body-border (render-border-row columns padding 
                                             (bc 15) (bc 14) (bc 16) (bc 17))]
          (->> (map #(render-data-rows columns :body padding % 
                                       (bc 11) (bc 12) (bc 13)) 
                    data)
              (interpose body-border)
              (flatten))))
     
      ;; footer
      (when (footer? columns)
        (cons
          (render-border-row columns padding (bc 19) (bc 18) (bc 20) (bc 21))
          (render-data-rows columns :footer padding (footer-cells columns) 
                                                    (bc 22) (bc 23) (bc 24))))
      (render-border-row columns padding (bc 26) (bc 25) (bc 27) (bc 28))
    ]))

(defn render-border-row [columns padding fill left middle right]
  (let [col-widths (map :width columns)
        pad        (str/repeat fill padding)]
    (render-row (map #(str/repeat fill %) col-widths) 
                (str left pad) (str pad middle pad) (str pad right))))

(defn render-data-rows [columns section padding cells left middle right]
  (let [col-widths (map :width columns)
        pad        (str/repeat " " padding)
        cells      (format-row columns section cells)
        left       (str left pad)
        middle     (str pad middle pad)
        right      (str pad right)]
    (->> (transpose cells)  ;; cell matrix transpose
         (map #(render-row % left middle right)))))

(defn render-row [cells left middle right]
  (str left (str/join middle cells) right))

(defn format-row [columns section cells]
  (->> (adjust-row-cells columns cells)
       (format-row-cells columns section)
       (adjust-row-cells-height columns section)))

(defn adjust-row-cells [columns cells]
  (let [cells          (sublist cells 0 (count columns))  
        add-cell-count (max 0 (- (count columns) (count cells)))]
    (concat cells (repeat add-cell-count [ "" ]))))

(defn format-row-cells [columns section cells]
  (map-indexed (fn [i v] (let [col (nth columns i)]
                           (str/align (:width col) 
                                      (-> col section :align) 
                                      (-> col section :overflow)  
                                      v)))
               cells))        

(defn adjust-row-cells-height [columns section cells]
  (let [cells      (map str/split-lines cells)
        cell-lines (map-indexed (fn [i v] (+ v (-> (nth columns i) 
                                                   section 
                                                   :pad-rows)))
                                (map count cells))
        max-lines  (apply max cell-lines)]
    (map-indexed (fn [i v] (let [width (:width (nth columns i))]
                             (concat v (repeat (max 0 (- max-lines (count v))) 
                                               (str/repeat " " width)))))
                 cells)))

(defn header? [columns]
  (->> (header-cells columns) (filter not-empty?) not-empty?))

(defn footer? [columns]
  (->> (footer-cells columns) (filter not-empty?) not-empty?))

(defn build-columns [header data footer]
  (let [cols (max (count header) 
                  (apply max (map count data))
                  (count footer))]
    (map (fn [c] (build-column (nth header c nil)
                               (nth footer c nil)
                               (nth data c nil)))
         (range cols))))

(defn build-column [header footer data]
  (let [width (max (max-line-length (str header)) 
                   (max-line-length (str footer))
                   (max-line-length data))]
    { :header  { :text (or header "") }
      :footer  { :text (or footer "") }
      :width   width }))

(defn max-line-length [text]
  (if (sequential? text)
    (->> (map max-line-length text)
         (apply max))
    (max 0 (apply max (map count (str/split-lines text))))))

(defn line-count [text]
  (count (str/split-lines text)))

(defn ends-with-lf [text]
  (str/ends-with? text *newline*))

(defn min-max [min-val max-val val]
  (min val (max val min-val) max-val))

(defn header-cells [columns]
  (map #(-> % :header :text) columns))

(defn footer-cells [columns]
  (map #(-> % :footer :text) columns))

(defn validate-column [column]
  (let [column    (or column {})
        min-width (max (:min-width column) min-col-width)
        max-width (min (:max-width column) max-col-width)
        width     (:width column)]
    { :header    {:text     (or (str (-> column :header :text)) "")
                  :align    (validate-align (-> column :header :align))
                  :overflow (validate-overflow (-> column :header :overflow))                  
                  :pad-rows (validate-pad-rows (-> column :header :pad-rows))}
      :body      {:align    (validate-align (-> column :body :align))
                  :overflow (validate-overflow (-> column :body :overflow))                  
                  :pad-rows (validate-pad-rows (-> column :body :pad-rows))}
      :footer    {:text     (or (str (-> column :footer :text)) "")
                  :align    (validate-align (-> column :footer :align))
                  :overflow (validate-overflow (-> column :footer :overflow))                  
                  :pad-rows (validate-pad-rows (-> column :footer :pad-rows))}                   
      :min-width min-width
      :max-width max-width
      :width     (min-max min-width max-width width) }))

(defn validate-align [align]
  (if (keyword? align) (align alignments :left) :left))

(defn validate-overflow [overflow]
  (if (keyword? overflow) (overflow overflows :newline) :newline))

(defn validate-pad-rows [pad-rows]
  (if (long? pad-rows) (max 0 pad-rows) 0))

(defn validate-border [border]
  (case (type border)
    :core/keyword (let [chars  (border border-chars)]
                    (when (nil? chars)
                      (throw (ex :VncException 
                                  (str "Invalid border type. Use one of " borders))))
                    chars)           
    :core/string  (let [chars  border]
                    (when-not (= 29 (count chars))
                      (throw (ex :VncException 
                                  (str "Invalid custom border. Must have 29 chars"))))
                    chars)
    (throw (ex :VncException 
               """
               Invalid border. Pass a keyword like :standard, :double, :bold 
               or a string with 29 custom border characters!
               """))))
 
(defn as-strings [data]
   (map #(map str %) data))

(defn style-for-matrix [columns]
  (->> columns
       (map #(assoc-in % [:header :text] nil))     ; no header
       (map #(assoc-in % [:footer :text] nil))     ; no footer
       (map #(assoc-in % [:body :align] :right))   ; all cells right aligned
       (map #(assoc-in % [:body :overflow] :ellipsis-right))))

(defn transpose [matrix]
  (apply map vector matrix))

(defn print-debug-text [text]
  (docoll #(println (str "⏵" % "⏴")) 
          (if (coll? text) text (str/split-lines text))))
