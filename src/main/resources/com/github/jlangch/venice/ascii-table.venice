;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ASCII table


(ns ascii-table)

;;           standard         double          bold          alpha  
;;
;;        +---+---+---+   ╔═══╤═══╤═══╗   ┏━━━┯━━━┯━━━┓   ABBBCBBBCBBBD
;; head   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   E   M   M   E
;;        +---+---+---+   ╠═══╪═══╪═══╣   ┣━━━┿━━━┿━━━┫   KGGGJGGGJGGGL
;; body   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   E   M   M   E
;;        +---+---+---+   ╟───┼───┼───╢   ┠───┼───┼───┫   KGGGJGGGJGGGL
;; body   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   E   M   M   E
;;        +---+---+---+   ╠═══╪═══╪═══╣   ┣━━━┿━━━┿━━━┫   KGGGJGGGJGGGL
;; foot   |   |   |   |   ║   │   │   ║   ┃   │   │   ┃   E   M   M   E
;;        +---+---+---+   ╚═══╧═══╧═══╝   ┗━━━┷━━━┷━━━┛   NBBBOBBBOBBBP

;; https://www.charset.org/utf-8/10


(def border-chars { :standard  "+-++|+-+++++|++++✗"
                    :double    "╔═╤╗║╟─┬╢╪╠╣│╚╧╝┼"
                    :bold      "┏━┯┓┃┠─┬┨┿┣┫│┗┷┛┼"
                    :alpha     "ABCDEFGHIJKLMNOPQ" } )

(def alignments #{:left :center :right})
(def overflow #{:newline :clip-left :clip-right :ellipsis-left :ellipsis-right})
(def modes #{:standard :double :bold :alpha})

(def min-col-width 1)
(def min-col-width 80)

(def col  { :header        "Name"
            :footer        "Total"
            :header-align  :left
            :data-align    :left
            :footer-align  :left
            :overflow      :newline
            :min-width     1
            :max-width     20 } )

(defn render [header data footer]
  )

(defn render [columns data]
  )



(defn format-cell [text rows cols width align overflow padding]
  (-> (str/align width align overflow text)
      (expand-lines rows cols)
      (pad-lines padding)))

(defn pad-lines [text padding]
  (let [lines    (str/split-lines text)
        pad-str  (str/repeat " " padding)]
   (apply str (map #(str pad-str % pad-str) lines))))

(defn expand-lines [text total-lines width]
  (let [lines       (into [] (str/split-lines text))
        empty-line  (str/repeat " " width)
        add-count   (max 0 (- total-lines (count lines)))]
    (into lines (repeat add-count empty-line))))

(defn max-line-length [text]
  (max 0 (apply max (map count (str/split-lines text)))))

(defn line-count [text]
  (count (str/split-lines text)))

(defn ends-with-lf [text]
  (str/ends-with? text *newline*))

(defn print-debug-text [text]
  (docoll #(println (str "⏵" % "⏴")) (str/split-lines text)))
