;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Gradle Wrapper utilities 


(ns gradlew)


(defn 
  ^{ :arglists '("(gradlew/version)")
     :doc 
        """
        Returns the Gradle version

        **Note: Use this module only for projects based on the Gradle wrapper**
        """
     :examples '(
        """
        (do
          (load-module :gradlew)
          (gradlew/version "/Users/foo/projects/bar"))
        """) }

  version [proj-home]

  (let [gradle-script (gradlew-script-path proj-home)]
    (->> ((exec) (str gradle-script " --version") :dir proj-home :throw-ex true)
         (:out)
         (str/split-lines)
         (filter #(str/starts-with? % "Gradle "))
         (map #(str/subs % 7))
         (first))))


(defn 
  ^{ :arglists '("(gradlew/run proj-home out-fn err-fn & args)")
     :doc 
        """
        Runs one or more Gradle tasks.

        **Note: Use this module only for projects based on the Gradle wrapper**

        Arguments:

        | proj-home  | The project directory |
        | out-fn     | a function with a single string argument that receives \
                       line by line from the process' stdout. |
        | err-fn     | a function with a single string argument that receives \
                       line by line from the process' stderr. |
        | args       | Any number of task names and Gradle options |
        """
     :examples '(
        """
        (do
          (load-module :gradlew)
          (let [java-home (system-env :JAVA_11_HOME)]
            (gradlew/run "/Users/foo/projects/bar"
                         println
                         println
                         ;; tasks
                         "clean"
                         "build"
                         ;; options
                         "--warning-mode=all" 
                         "--console=plain" 
                         "--stacktrace"
                         (str "-Dorg.gradle.java.home=\\"" java-home "\\"")))
        """) }

  run [proj-home out-fn err-fn & args]

  (let [tasks    (filter #(not (str/starts-with? % "-")) args)
        options  (filter #(str/starts-with? % "-") args)
        script   (gradlew-script-path proj-home)]
    (assert (io/exists-file? script) "Gradle wrapper '~{script}' not existing!")
    ((exec) (str/join " " (concat [script] options tasks))
            :dir proj-home
            :out-fn out-fn
            :err-fn err-fn
            :throw-ex true)))


(defn 
  ^{ :arglists '("(gradlew/run* proj-home out-fn err-fn & args)")
     :doc 
        """
        Runs one or more Gradle tasks and prints a list of the tasks and the
        options taken from the passed arguments. 

        **Note: Use this module only for projects based on the Gradle wrapper**

        Apart from printing the passed tasks and options the function is 
        identical to `gradlew/run`.

        Arguments:

        | proj-home | The project directory |
        | out-fn    | a function with a single string argument that receives \
                        line by line from the process' stdout. May be nil. |
        | err-fn    | a function with a single string argument that receives \
                        line by line from the process' stderr. May be nil. |
        | args      | Any number of task names and Gradle options |
        """
     :examples '(
        """
        (do
          (load-module :gradlew)
          (let [java-home  (system-env :JAVA_11_HOME)]
            (gradlew/run* "/Users/foo/projects/bar"
                          println
                          println
                          ;; tasks
                          "clean"
                          "build"
                          ;; options
                          "--warning-mode=all" 
                          "--console=plain" 
                          "--stacktrace"
                          (str "-Dorg.gradle.java.home=\\"" java-home "\\"")))
        """) }

  run* [proj-home out-fn err-fn & args]

  (let [tasks    (filter #(not (str/starts-with? % "-")) args)
        options  (filter #(str/starts-with? % "-") args)
        script   (gradlew-script-path proj-home)]
    (assert (io/exists-file? script) "Gradle wrapper '~{script}' not existing!")
    (println (str "Gradle script:  " script))
    (println (str "Gradle tasks:   " (str/join ", " tasks)))
    (println (str "Gradle options: " options))
    ((exec) (str/join " " (concat [script] options tasks))
            :dir proj-home
            :out-fn out-fn
            :err-fn err-fn
            :throw-ex true)))


(defn- gradlew-script-path [proj-home]
  (case (os-type)
    :mac-osx (str proj-home "/gradlew")
    :linux   (str proj-home "/gradlew")
    :windows (str proj-home "\\gradlew.bat")))


(defn- exec []
  (case (os-type)
    :mac-osx (partial sh "/bin/sh" "-c")
    :linux   (partial sh "/bin/sh" "-c")
    :windows (partial sh "cmd" "/C")))