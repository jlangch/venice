;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; An ASCII canvas


(ns ascii-canvas)

(import :com.github.jlangch.venice.util.AsciiCanvas)


(defn create [w h]
  (. :AsciiCanvas :create w h))

(defn width [canvas]
  (. canvas :width))

(defn height [canvas]
  (. canvas :height))

(defn char-at [canvas x y]
  (. canvas :getCharAt x y))

(defn clear [canvas]
  (. canvas :clear))

(defn draw 
  ([canvas ch x y]        (. canvas :draw ch x y))
  ([canvas ch format x y] (. canvas :draw ch format x y)))

(defn draw-text
  ([canvas text x y]        (. canvas :drawText text x y))
  ([canvas text format x y] (. canvas :drawText text format x y)))

(defn draw-horizontal-right
  ([canvas s x y]        (. canvas :drawHorizontalRight s x y))
  ([canvas s format x y] (. canvas :drawHorizontalRight s format x y)))

(defn draw-horizontal-left
  ([canvas s x y]        (. canvas :drawHorizontalLeft s x y))
  ([canvas s format x y] (. canvas :drawHorizontalLeft s format x y)))

(defn draw-vertical-up
  ([canvas s x y]        (. canvas :drawVerticalUp s x y))
  ([canvas s format x y] (. canvas :drawVerticalUp s format x y)))

(defn draw-vertical-down
  ([canvas s x y]        (. canvas :drawVerticalDown s x y))
  ([canvas s format x y] (. canvas :drawVerticalDown format x y)))

(defn draw-box
  ([canvas x y w h border]        (. canvas :drawBox x y w h border))
  ([canvas x y w h border format] (. canvas :drawBox x y w h border format)))
