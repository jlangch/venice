;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice crypt functions


(ns crypt)

(import :java.util.Base64)
(import :java.security.MessageDigest)
(import :java.security.spec.AlgorithmParameterSpec)

(import :javax.crypto.Cipher)
(import :javax.crypto.SecretKey)
(import :javax.crypto.SecretKeyFactory)
(import :javax.crypto.spec.IvParameterSpec)
(import :javax.crypto.spec.PBEKeySpec)
(import :javax.crypto.spec.PBEParameterSpec)
(import :javax.crypto.spec.SecretKeySpec)
(import :javax.net.ssl.SSLServerSocketFactory)


(defn
  ^{ :arglists '("(crypt/md5-hash data)"
                 "(crypt/md5-hash data salt)")
     :doc """
          Hashes a string or a bytebuf using MD5 with an optional salt.

          Note: MD5 is not safe any more use PBKDF2 instead!
          """
     :examples (list
          """
          (-> (crypt/md5-hash "hello world")
              (str/bytebuf-to-hex :upper))
          """,
          """
          (-> (crypt/md5-hash "hello world" "-salt-")
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/md5-hash

  ([data] (hash "MD5" data nil))
  ([data salt] (hash "MD5" data salt)))


(defn
  ^{ :arglists '("(crypt/sha1-hash data)"
                 "(crypt/sha1-hash data salt)")
     :doc "Hashes a string or a bytebuf using SHA1 with an optional salt."
     :examples (list
          """
          (-> (crypt/sha1-hash "hello world")
              (str/bytebuf-to-hex :upper))
          """,
          """
          (-> (crypt/sha1-hash "hello world" "-salt-")
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/sha1-hash

  ([data] (hash "SHA-1" data nil))
  ([data salt] (hash "SHA-1" data salt)))


(defn
  ^{ :arglists '("(crypt/sha512-hash data)"
                 "(crypt/sha512-hash data salt)")
     :doc "Hashes a string or a bytebuf using SHA512 with an optional salt."
     :examples (list
          """
          (let [s (-> (crypt/sha512-hash "hello world")
                      (str/bytebuf-to-hex :upper))]
            (str (str/nfirst s 32) "..." (str/nlast s 32)))
          """,
          """
          (let [s (-> (crypt/sha512-hash "hello world" "-salt-")
                      (str/bytebuf-to-hex :upper))]
            (str (str/nfirst s 32) "..." (str/nlast s 32)))
          """ ) }

  crypt/sha512-hash

  ([data] (hash "SHA-512" data nil))
  ([data salt] (hash "SHA-512" data salt)))


(defn
  ^{ :arglists '("(crypt/pbkdf2-hash data salt)"
                 "(crypt/pbkdf2-hash data salt iterations key-length)")
     :doc """
          Hashes a string using PBKDF2. iterations defaults to 1000,
          key-length defaults to 256.
          """
     :examples (list
          """
          (-> (crypt/pbkdf2-hash "hello world" "-salt-")
              (str/bytebuf-to-hex :upper))
          """,
          """
          (-> (crypt/pbkdf2-hash "hello world" "-salt-" 1000 256)
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/pbkdf2-hash

  ([text salt]
    (crypt/pbkdf2-hash text salt 1000 256))

  ([text salt iterations key-length]
    (assert (string? text)
            "The passed text must be a string")
    (assert (or (string? salt) (nil? salt))
            "The passed salt must be either a string or nil")
    (assert (or (long? iterations) (int? iterations))
            "The passed iterations must be either a long or an integer")
    (assert (or (long? key-length) (int? key-length))
            "The passed key-length must be either a long or an integer")
    (try
      (let [spec (. :PBEKeySpec :new
                    text
                    (if (nil? salt) (bytebuf) (bytebuf-from-string salt :UTF-8))
                    iterations
                    key-length)]
        (-> (. :SecretKeyFactory :getInstance "PBKDF2WithHmacSHA512")
            (. :generateSecret spec)
            (. :getEncoded)))
      (catch :Exception ex
             (throw (ex :VncException "Failed to compute PBKDF2 hash." ex))))))


(defn
  ^{ :arglists '("(crypt/encrypt algorithm passphrase & options)")
     :doc """
          Returns a new thread safe function to encrypt a string or a bytebuf
          given the algorithm and passphrase. If a string is passed it is
          encrypted and returned as a base64 encoded string. If a bytebuf
          is passed the encryped bytebuf is returned.

          Supported algorithms: "DES", "3DES", "AES256"

          Options:

          *:url-safe {true/false}*¶
          The boolean option directs the base64 encoder to emit
          standard or URL safe base64 encoded strings.
          If `true` the base64 encoder will emit '-' and '_'
          instead of the usual '+' and '/' characters.¶
          Defaults to false.¶
          Note: no padding is added when encoding using the URL-safe alphabet.
          """
     :examples (list
          """
          (do
            (load-module :crypt)
            (def encrypt (crypt/encrypt "3DES" "secret" :url-safe true))
            (encrypt "hello") ; => "ndmW1NLsDHA"
            (encrypt "world") ; => "KPYjndkZ8vM"
            (encrypt (bytebuf [1 2 3 4]))) ; => [128 216 205 163 62 43 52 82]
          """ ) }

  crypt/encrypt

  [algorithm passphrase & options]

  (let [url-safe (:url-safe (apply hash-map options) false)]
    (create-encrypt-fn algorithm passphrase url-safe)))


(defn
  ^{ :arglists '("(crypt/decrypt algorithm passphrase & options)")
  :doc """
       Returns a new thread safe function to decrypt a string or a bytebuf \
       given the algorithm and passphrase. If a string is passed it is base64 \
       decoded, decrypted, and returned as string. If a bytebuf is passed the \
       decrypted bytebuf is returned.

       Supported algorithms: "DES", "3DES", "AES256"

       Options:

       *:url-safe {true/false}*¶
       The boolean option directs the base64 decoder to decode
       standard or  URL safe base64 encoded strings.
       If enabled (true) the base64 decoder will convert '-' and '_'
       characters back to '+' and '/' before decoding.¶
       Defaults to false.
       """
     :examples (list
          """
          (do
            (load-module :crypt)
            (def decrypt (crypt/decrypt "3DES" "secret" :url-safe true))
            (decrypt "ndmW1NLsDHA") ; => "hello"
            (decrypt "KPYjndkZ8vM") ; => "world"
            (decrypt (bytebuf [128 216 205 163 62 43 52 82]))) ; => [1 2 3 4]
          """ ) }

  crypt/decrypt

  [algorithm passphrase & options]

  (let [url-safe (:url-safe (apply hash-map options) false)]
    (create-decrypt-fn algorithm passphrase url-safe)))


(defn
  ^{ :arglists '("(crypt/ciphers opt)")
  :doc "Returns a list of the ciphers the Java VM supports"
  :examples (list
        """
        (do
          (load-module :crypt)
          (crypt/ciphers :default))
        """,
        """
        (do
          (load-module :crypt)
          (crypt/ciphers :available))
        """,
        """
        (do
          (load-module :crypt)
          (docoll println (crypt/ciphers :available)))
        """ ) }

  crypt/ciphers [opt]

  (let [ssf    (cast :SSLServerSocketFactory
                     (. :SSLServerSocketFactory :getDefault))
        method (if (= opt :default)
                   :getDefaultCipherSuites
                   :getSupportedCipherSuites)]

    (sort (. ssf method))))


;; -----------------------------------------------------------------------------
;; Utils
;; -----------------------------------------------------------------------------

(defn- salt []
  (bytebuf [0xA9 0x9B 0xC8 0x32 0x56 0x35 0xE3 0x03]))


(defn- to-bytes [data]
  (if (string? data) (bytebuf-from-string data :UTF-8) data))


(defn- url-encode [s]
  (-> s
      (str/replace-all  "+" "-")
      (str/replace-all  "/" "_")))


(defn- url-decode [s]
  (-> s
      (str/replace-all  "-" "+")
      (str/replace-all  "_" "/")))


(defn- base64-encode [bytes url-safe]
  (if url-safe
    (-> (. :Base64 :getEncoder)
        (. :withoutPadding)
        (. :encodeToString bytes)
        (url-encode))
    (-> (. :Base64 :getEncoder)
        (. :encodeToString bytes))))


(defn- base64-decode [s url-safe]
  (-> (. :Base64 :getDecoder)
      (. :decode (to-bytes (if url-safe (url-decode s) s)))))


(defn-
  crypt/hash

  ([algorithm data]
    (hash algorithm data nil))

  ([algorithm data salt]
    (assert (or (string? data) (bytebuf? data))
            "The passed data must be either a string or a bytebuf")
    (assert (or (string? salt) (bytebuf? salt) (nil? salt))
            "The passed salt must be either a string, a bytebuf or nil")
    (try
      (let [md (. :MessageDigest :getInstance algorithm)]
        (. md :reset)
        (when (some? salt)
          (. md :update (to-bytes salt)))
        (. md :update (to-bytes data))
        (. md :digest))
      (catch :Exception ex
             (throw (ex :VncException
                        (str "Failed to compute " algorithm " hash.")
                        ex))))))


;; -----------------------------------------------------------------------------
;; Cipher
;; -----------------------------------------------------------------------------

(def ENCRYPT_MODE 1)
(def DECRYPT_MODE 2)


(defmulti create-encrypt-fn (fn [algorithm passphrase url-safe] (name algorithm)))

(defmethod create-encrypt-fn :default [algorithm passphrase url-safe]
  (throw (ex :VncException
             (str "Invalid cipher alogorithm '" algorithm "'"))))


(defmulti create-decrypt-fn (fn [algorithm passphrase url-safe] (name algorithm)))

(defmethod create-decrypt-fn :default [algorithm passphrase url-safe]
  (throw (ex :VncException
             (str "Invalid cipher alogorithm '" algorithm "'"))))


(defn- cipher-encrypt [cipher data url-safe]
  (try
    (locking cipher
      (cond
        (empty? data)   data
        (string? data)  (-<> (to-bytes data)
                             (. cipher :doFinal <>)
                             (base64-encode <> url-safe))
        (bytebuf? data) (. cipher :doFinal data)
        :else           (throw (ex :VncException
                                   "Invalid datatype for data."))))
  (catch :Exception ex
    (throw (ex :VncException "Failed to encrypt data." ex)))))


(defn- cipher-decrypt [cipher data url-safe]
  (try
    (locking cipher
      (cond
        (empty? data)   data
        (string? data)  (-<> (base64-decode data url-safe)
                             (. cipher :doFinal <>)
                             (bytebuf-to-string <> :UTF-8))
        (bytebuf? data) (. cipher :doFinal data)
        :else           (throw (ex :VncException
                                   "Invalid datatype for data."))))
  (catch :Exception ex
    (throw (ex :VncException "Failed to decrypt data." ex)))))



;; -----------------------------------------------------------------------------
;; DES
;; -----------------------------------------------------------------------------

(defn- iterations-DES [] 19)


(defn- create-secret-key-DES [passphrase]
  (let [factory    (. :SecretKeyFactory :getInstance "PBEWithMD5AndDES")
        key-spec   (. :PBEKeySpec :new passphrase (salt) (iterations-DES))
        secret     (. factory :generateSecret key-spec)]
    secret))


(defn- create-cipher-DES [mode secret-key param-spec]
  (doto (. :Cipher :getInstance (. secret-key :getAlgorithm))
        (. :init mode secret-key param-spec)))


(defmethod create-encrypt-fn "DES" [algorithm passphrase url-safe]
  (let [secret-key (create-secret-key-DES passphrase)
        param-spec (. :PBEParameterSpec :new (salt) (iterations-DES))
        cipher     (create-cipher-DES ENCRYPT_MODE secret-key param-spec)]
    (fn [data] (cipher-encrypt cipher data url-safe))))


(defmethod create-decrypt-fn "DES" [algorithm passphrase url-safe]
  (let [secret-key (create-secret-key-DES passphrase)
        param-spec (. :PBEParameterSpec :new (salt) (iterations-DES))
        cipher     (create-cipher-DES DECRYPT_MODE secret-key param-spec)]
    (fn [data] (cipher-decrypt cipher data url-safe))))



;; -----------------------------------------------------------------------------
;; 3DES
;; -----------------------------------------------------------------------------

(defn- iterations-3DES [] 19)


(defn- create-secret-key-3DES [passphrase]
  (let [factory    (. :SecretKeyFactory :getInstance "PBEWithMD5AndTripleDES")
        key-spec   (. :PBEKeySpec :new passphrase (salt) (iterations-3DES))
        secret     (. factory :generateSecret key-spec)]
    secret))


(defn- create-cipher-3DES [mode secret-key param-spec]
  (doto (. :Cipher :getInstance (. secret-key :getAlgorithm))
        (. :init mode secret-key param-spec)))


(defmethod create-encrypt-fn "3DES" [algorithm passphrase url-safe]
  (let [secret-key (create-secret-key-3DES passphrase)
        param-spec (. :PBEParameterSpec :new (salt) (iterations-3DES))
        cipher     (create-cipher-3DES ENCRYPT_MODE secret-key param-spec)]
    (fn [data] (cipher-encrypt cipher data url-safe))))


(defmethod create-decrypt-fn "3DES" [algorithm passphrase url-safe]
  (let [secret-key (create-secret-key-3DES passphrase)
        param-spec (. :PBEParameterSpec :new (salt) (iterations-3DES))
        cipher     (create-cipher-3DES DECRYPT_MODE secret-key param-spec)]
    (fn [data] (cipher-decrypt cipher data url-safe))))



;; -----------------------------------------------------------------------------
;; AES256
;; -----------------------------------------------------------------------------

(defn- create-iv-spec-AES256 []
  (let [iv (bytebuf [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])]
    (. :IvParameterSpec :new iv)))


(defn- create-secret-key-AES256 [passphrase]
  (let [factory    (. :SecretKeyFactory :getInstance "PBKDF2WithHmacSHA256")
        key-spec   (. :PBEKeySpec :new passphrase (salt) 65536 256)
        secret     (. factory :generateSecret key-spec)
        secret-key (. :SecretKeySpec :new (. secret :getEncoded) "AES")]
    secret-key))


(defn- create-cipher-AES256 [mode secret-key iv-spec]
  (doto (. :Cipher :getInstance "AES/CBC/PKCS5PADDING")
        (. :init mode secret-key iv-spec)))


(defmethod create-encrypt-fn "AES256" [algorithm passphrase url-safe]
  (let [secret-key (create-secret-key-AES256 passphrase)
        iv-spec    (create-iv-spec-AES256)
        cipher     (create-cipher-AES256 ENCRYPT_MODE secret-key iv-spec)]
    (fn [data] (cipher-encrypt cipher data url-safe))))


(defmethod create-decrypt-fn "AES256" [algorithm passphrase url-safe]
  (let [secret-key (create-secret-key-AES256 passphrase)
        iv-spec    (create-iv-spec-AES256)
        cipher     (create-cipher-AES256 DECRYPT_MODE secret-key iv-spec)]
    (fn [data] (cipher-decrypt cipher data url-safe))))
