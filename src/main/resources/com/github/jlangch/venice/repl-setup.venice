;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; REPL setup


(ns repl-setup)

(load-module :installer)
(load-module :jansi-install)
(load-module :maven)
(load-module :ansi)


(def initial-modules [ :jansi-install ])

(def scripts [ "chart.venice"
               "chart-swing.venice"
               "dining-philosophers.venice"
               "expr-parser-1.venice"
               "expr-parser-2.venice"
               "expr-parser-3.venice"
               "fibonacci.venice"
               "shebang-demo.venice"
               "sudoku.venice"
               "tomcat-geoip-map.venice"
               "zip-tomcat-logs.venice"
               "webapp/demo-webapp.venice"
               "webapp/rest-webapp.venice"
               "webapp/two-servlet-webapp.venice"
               "webapp/sse-webapp.venice"
               "webapp/async-webapp.venice"
               "webapp/login-webapp.venice"
               "webapp/fileserve-webapp.venice"
               "webapp/upload-webapp.venice"
               "pdf/pdf-example.venice"
               "pdf/pdf-fonts.venice"
               "pdf/pdf-tables.venice"
               "pdf/pdf-images.venice"
               "pdf/pdf-table-of-content.venice"
               "pdf/pdf-footers.venice"
               "pdf/pdf-watermarks.venice"
               "pdf/pdf-text2pdf.venice"
               "pdf/pdf-merge.venice"
               "pdf/pdf-copy.venice" ])


(defn- cr-lf [text]
  (str/cr-lf text (if (os-type? :windows) :cr-lf :lf)))


(defn install-maven [dir]
  (println "Installing Maven ~{maven/maven-version} locally in the REPL/tools ...")
  (if (io/internet-avail?)
    (maven/install maven/maven-version dir)
    (println *err* "Internet is not available!"))
  (println))


(defn download-modules-libs [dir modules_ silent]
  (when-not (empty? modules_)
    (println "Downloading modules Java 3rdparty libraries...")
    (if (io/internet-avail?)
       (docoll #(installer/install-module % :dir dir :silent silent) modules_)
       (println *err* "Internet is not available!")))
  (println))


(defn setup-scripts [scripts-dir]
  (println "Extracting example scripts...")
  (let [repl-path   (io/file-path scripts-dir)
        load-script (fn [script]
                      (-<> (io/load-classpath-resource script)
                           (bytebuf-to-string <> :utf-8)
                           (repl-setup/cr-lf <>)
                           (str/replace-all <>  "{{INSTALL_PATH}}" repl-path)))]
    (docoll #(io/spit (io/file scripts-dir %)
                      (load-script %)
                      :encoding (charset-default-encoding))
            scripts)
    ;; Shebang demo
    (if (os-type? :windows) 
      (io/delete-file (io/file scripts-dir "shebang-demo.venice"))
      (when (io/exists-file? (io/file scripts-dir "shebang-demo.venice"))
        (println "Making \"scripts/shebang-demo.venice\" executable...")
        (sh "/bin/sh" "-c" "chmod u+x shebang-demo.venice" :dir repl-path)))))


(defn change-repl-launcher-color [cfg color-mode]
  (if (== :none color-mode)
    cfg  ;; do not change
    (let [color-switch (case color-mode
                             :light  "-colors"
                             :dark   "-colors-darkmode"
                                     "-colors")]
      (if (str/contains? cfg "-colors-darkmode")
        (str/replace-last cfg "-colors-darkmode" color-switch)
        (str/replace-last cfg "-colors" color-switch)))))


(defn setup-repl-config [libs-dir]
  (when-not (io/exists-file? (io/file libs-dir "repl.json"))
    (println "Setting up 'repl.json'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.json")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (io/spit (io/file libs-dir "repl.json") 
                  <> 
                  :encoding (charset-default-encoding)))))


(defn- setup-repl-launcher-windows [install-dir color-mode]
  (when-not (io/exists-file? (io/file install-dir "repl.env.bat"))
    (println "Setting up 'repl.env.bat'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.win.env")
        (bytebuf-to-string <> :utf-8)
        (repl-setup/cr-lf <>)
        (io/spit (io/file install-dir "repl.env.bat") 
                  <> 
                  :encoding (charset-default-encoding))))
  (when-not (io/exists-file? (io/file install-dir "repl.bat"))
    (println "Setting up 'repl.bat'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.bat")
        (bytebuf-to-string <> :utf-8)
        (repl-setup/cr-lf <>)
        (str/replace-all <> "{{INSTALL_PATH}}" (io/file-path install-dir))
        (change-repl-launcher-color <> color-mode)
        (io/spit (io/file install-dir "repl.bat") 
                 <> 
                 :encoding (charset-default-encoding)))))


(defn- setup-repl-launcher-unix [install-dir color-mode]
  (when-not (io/exists-file? (io/file install-dir "repl.env"))
    (println "Setting up 'repl.env'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.unix.env")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (io/spit (io/file install-dir "repl.env") 
                  <> 
                  :encoding (charset-default-encoding))))
  (when-not (io/exists-file? (io/file install-dir "repl.sh"))
    (println "Setting up 'repl.sh'...")
    (println "REPL install dir:" (io/file-path install-dir))
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.sh")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (str/replace-all <> "{{INSTALL_PATH}}" (io/file-path install-dir))
         (change-repl-launcher-color <> color-mode)
         (io/spit (io/file install-dir "repl.sh") 
                  <> 
                  :encoding (charset-default-encoding)))
    (when (io/exists-file? (io/file install-dir "repl.sh"))
      (sh "/bin/sh" "-c" "chmod u+x repl.sh" :dir (io/file-path install-dir)))))


(defn setup-repl-launcher [install-dir color-mode]
  (if (os-type? :windows)
    (setup-repl-launcher-windows install-dir color-mode)
    (setup-repl-launcher-unix install-dir color-mode)))


(defn- setup-runscript-launcher-unix [install-dir]
  (when-not (io/exists-file? (io/file install-dir "run-script.sh"))
    (println "Setting up 'run-script.sh'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/run-script.sh")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (str/replace-all <> "{{INSTALL_PATH}}" (io/file-path install-dir))
         (io/spit (io/file install-dir "run-script.sh") <> :encoding (charset-default-encoding)))
    (when (io/exists-file? (io/file install-dir "run-script.sh"))
      (sh "/bin/sh" "-c" "chmod u+x run-script.sh" :dir (io/file-path install-dir)))))


(defn- setup-runscript-launcher-windows [install-dir]
  )


(defn setup-runscript-launcher [install-dir]
  (if (os-type? :windows)
    (setup-runscript-launcher-windows install-dir)
    (setup-runscript-launcher-unix install-dir)))


(defn copy-venice-jar [libs-dir]
  (let [loc    (java-source-location :com.github.jlangch.venice.Venice)
        name   (when (some? loc) (io/file-name loc))
        target (io/file libs-dir name)]
    (when (str/ends-with? name ".jar")
       (try
         (println (str "Copying Venice JAR '" name "' to libs"))
         (io/copy-file loc target :replace true)
         (catch :Exception e
           (if (io/exists-file? target)
             (println *err*
                      (str "Failed to copy '"
                           name
                           "' to libs. It exists already and can not be overwritten!"))
             (println *err*(str "Failed to copy '" name "' to libs!"))))))))


(defn check-jansi-installed [libs-dir]
  (when (os-type? :windows)
    (let [lib-jansi          (first (jansi-install/libraries))
          jansi-name         (maven/artifact-filename lib-jansi ".jar")
          jansi-jar          (io/file libs-dir jansi-name)]
      (if (io/exists-file? jansi-jar)
        (println "Checking ~{jansi-jar} ... OK")
        (do
          (println )
          (print-msg-box :warn
                        """
                        The Jansi JAR could not be downloaded. Without this \
                        JAR the REPL has limited features!
                        """)
          (println))))))


(defn- print-success-message [install-dir]
  (let [launch-script (if (os-type? :windows) "repl.bat" "./repl.sh")]
    (println )
    (print-msg-box :info
                   """
                   The Venice REPL has been successfully configured and setup. \
                   The original Venice JAR is not needed anymore, it has been \
                   copied to the 'libs' directory that holds all JAR files and \
                   resources.

                   !!! Start the REPL with ~{launch-script}
                   """)))


(defn venice-maven-url [version]
  (str maven/repo
       "/com/github/jlangch/venice/~{version}/venice-~{version}.jar"))


(defn download-venice-jar [version dir]
  (let [jar-name (str "venice-" version ".jar")
        url      (venice-maven-url version)]
    (->> (io/download url :binary true)
         (io/spit (io/file dir jar-name)))))


(defn setup [& options]
  (let [options       (apply hash-map options)
        color-mode    (:color-mode options :none)      ;; {:none :light :dark}
        silent        (not (:ansi-terminal options false))   ;; {true false}
        charset       (name (charset-default-encoding))
        install-dir   (io/file-canonical (io/file (:install-dir  options ".")))
        libs-dir      (io/file install-dir "libs")
        scripts-dir   (io/file install-dir "scripts")
        tmp-dir       (io/file install-dir "tmp")
        tools-dir     (io/file install-dir "tools")]
    (println)
    (println (str "Setting up the REPL on '" (os-name) "' " (os-version)))
    (println "Install dir: " install-dir)
    (println "Using the platforms's default charset" charset)
    (println)

    (when-not (io/exists-dir? install-dir)
      (print-msg-box :warn
                """
                The install dir '~{install-dir}' does not exist! \
                REPL not installed!
                """))

    (when (io/exists-dir? install-dir)
      (when-not (io/exists-dir? libs-dir)
        (io/mkdirs libs-dir))

      (when-not (io/exists-dir? scripts-dir)
        (io/mkdirs scripts-dir))

      (when-not (io/exists-dir? (io/file scripts-dir "pdf"))
       (io/mkdirs  (io/file scripts-dir "pdf")))

      (when-not (io/exists-dir? (io/file scripts-dir "webapp"))
        (io/mkdirs (io/file scripts-dir "webapp")))

      (when-not (io/exists-dir? tmp-dir)
        (io/mkdirs tmp-dir))

      (when-not (io/exists-dir? tools-dir)
        (io/mkdirs tools-dir))

      (let [{version :version, vendor :vendor} (java-version-info)]
        (println (str "Running on Java VM: " version " (" vendor ")"))
        (println))

      (repl-setup/copy-venice-jar libs-dir)
      (repl-setup/install-maven tools-dir)
      (repl-setup/download-modules-libs libs-dir initial-modules silent)
      (repl-setup/setup-repl-config libs-dir)
      (repl-setup/setup-repl-launcher install-dir color-mode)
      (repl-setup/setup-runscript-launcher install-dir)
      (repl-setup/setup-scripts scripts-dir)

      (print-success-message install-dir)

      (check-jansi-installed libs-dir)
      
      "Successfully installed at " (io/file-path install-dir))))
