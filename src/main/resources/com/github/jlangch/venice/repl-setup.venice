;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; REPL setup


(ns repl-setup)

(load-module :installer)
(load-module :jansi-install)
(load-module :maven)
(load-module :fonts)
(load-module :ansi)


(def modules-min [ :jansi-install ])

(def modules-ext [ :jansi-install
                   :xchart-install
                   :tomcat-install
                   :excel-install
                   :pdf-install ])

(def scripts [ "chart.venice"
               "chart-swing.venice"
               "dining-philosophers.venice"
               "expr-parser-1.venice"
               "expr-parser-2.venice"
               "expr-parser-3.venice"
               "fibonacci.venice"
               "sudoku.venice"
               "tomcat-geoip-map.venice"
               "zip-tomcat-logs.venice"
               "webapp/demo-webapp.venice"
               "webapp/login-webapp.venice"
               "pdf/pdf-example.venice"
               "pdf/pdf-fonts.venice"
               "pdf/pdf-tables.venice"
               "pdf/pdf-images.venice"
               "pdf/pdf-table-of-content.venice"
               "pdf/pdf-footers.venice"
               "pdf/pdf-watermarks.venice"
               "pdf/pdf-text2pdf.venice"
               "pdf/pdf-merge.venice"
               "pdf/pdf-copy.venice" ])


(defn- cr-lf [text]
  (str/cr-lf text (if (os-type? :windows) :cr-lf :lf)))


(defn download-modules-libs [dir modules_ silent]
  (when-not (empty? modules_)
    (println "Downloading modules Java 3rdparty libraries...")
    (if (io/internet-avail?)
       (docoll #(installer/install-module % :dir dir :silent silent) modules_)
       (println *err* "Internet is not available!")))
  (println))


(defn download-fonts [dir silent]
  (println (str "Downloading fonts..."))
  (if (io/internet-avail?)
    (installer/install-demo-fonts :dir dir :silent silent)
    (println *err* "Internet is not available!"))
  (println))


(defn setup-scripts [dir]
  (println "Extracting example scripts...")
  (let [load-script (fn [script]
                      (-<> (io/load-classpath-resource script)
                           (bytebuf-to-string <> :utf-8)
                           (repl-setup/cr-lf <>)))]
    (docoll #(io/spit (io/file dir %)
                      (load-script %)
                      :encoding (charset-default-encoding))
            scripts)))


(defn change-repl-launcher-color [cfg color-mode]
  (if (== :none color-mode)
    cfg  ;; do not change
    (let [color-switch (case color-mode
                             :light  "-colors"
                             :dark   "-colors-darkmode"
                                     "-colors")]
      (if (str/contains? cfg "-colors-darkmode")
        (str/replace-last cfg "-colors-darkmode" color-switch)
        (str/replace-last cfg "-colors" color-switch)))))


(defn setup-repl-config [dir]
  (let [config (io/file dir "repl.json")]
    (when-not (io/exists-file? config)
      (println "Setting up 'repl.json'...")
      (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.json")
           (bytebuf-to-string <> :utf-8)
           (repl-setup/cr-lf <>)
           (io/spit config <> :encoding (charset-default-encoding))))))


(defn- setup-repl-launcher-windows [color-mode]
  (when-not (io/exists-file? "repl.bat")
    (println "Setting up 'repl.bat'...")
    (println "REPL install dir:" (io/file-path (io/file-canonical ".")))
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.bat")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (str/replace-all <>
                          "{{INSTALL_PATH}}"
                          (str (io/file-path (io/file-canonical "."))))
         (change-repl-launcher-color <> color-mode)
         (io/spit "repl.bat" <> :encoding (charset-default-encoding)))))


(defn- setup-repl-launcher-unix [color-mode]
  (when-not (io/exists-file? "repl.sh")
    (println "Setting up 'repl.sh'...")
    (println "REPL install dir:" (io/file-path (io/file-canonical ".")))
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.sh")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (str/replace-all <>
                          "{{INSTALL_PATH}}"
                          (str (io/file-path (io/file-canonical "."))))
         (change-repl-launcher-color <> color-mode)
         (io/spit "repl.sh" <> :encoding (charset-default-encoding)))
    (when (io/exists-file? "repl.sh"))
      (sh "/bin/sh" "-c" "chmod u+x repl.sh" :dir (io/file "."))))


(defn setup-repl-launcher [color-mode]
  (if (os-type? :windows)
    (setup-repl-launcher-windows color-mode)
    (setup-repl-launcher-unix color-mode)))


(defn copy-venice-jar [dir]
  (let [loc    (java-source-location :com.github.jlangch.venice.Venice)
        name   (when (some? loc) (io/file-name loc))
        target (io/file dir name)]
    (when (str/ends-with? name ".jar")
       (try
         (println (str "Copying Venice JAR '" name "' to libs"))
         (io/copy-file loc target :replace true)
         (catch :Exception e
           (if (io/exists-file? target)
             (println *err*
                      (str "Failed to copy '"
                           name
                           "' to libs. It exists already and can not be overwritten!"))
             (println *err*(str "Failed to copy '" name "' to libs!"))))))))


(defn check-jansi-installed [dir]
  (when (os-type? :windows)
    (let [lib-jansi          (first (jansi-install/libraries))
          jansi-name         (maven/artifact-filename lib-jansi ".jar")
          jansi-jar          (io/file dir jansi-name)]
      (if (io/exists-file? jansi-jar)
        (println "Checking ~{jansi-jar} ... OK")
        (do
          (println )
          (print-msg-box :warn
                        """
                        The Jansi JAR could not be downloaded. Without this \
                        JAR the REPL has limited features!
                        """)
          (println))))))


(defn print-success-message []
  (let [launch-script (if (os-type? :windows) "repl.bat" "./repl.sh")]
    (println )
    (print-msg-box :info
                   """
                   The Venice REPL has been successfully configured and setup. \
                   The original Venice JAR is not needed anymore, it has been \
                   copied to the 'libs' directory that holds all JAR files and \
                   resources.

                   !!! Start the REPL with ~{launch-script}
                   """)))


(defn setup [& options]
  (let [options       (apply hash-map options)
        setup-mode    (:setup-mode options :minimal)   ;; {:minimal :extended}
        color-mode    (:color-mode options :none)      ;; {:none :light :dark}
        silent        (not (:ansi-terminal options false))   ;; {true false}
        modules_      (if (= setup-mode :extended) modules-ext modules-min)
        charset       (name (charset-default-encoding))]
    (when-not (io/exists-dir? "./libs")
      (io/mkdirs "./libs"))

    (when-not (io/exists-dir? "./scripts")
      (io/mkdirs "./scripts"))

    (when-not (io/exists-dir? "./scripts/pdf")
      (io/mkdirs "./scripts/pdf"))

    (when-not (io/exists-dir? "./scripts/webapp")
      (io/mkdirs "./scripts/webapp"))

    (when-not (io/exists-dir? "./tmp")
      (io/mkdirs "./tmp"))

    (println)
    (println (str "Setting up the REPL on '" (os-name) "' " (os-version)))
    (println "Using the platforms's default charset" charset)
    (println)
    (let [{version :version, vendor :vendor} (java-version-info)]
      (println (str "Running on Java VM: " version " (" vendor ")"))
      (println))

    (repl-setup/copy-venice-jar "libs")
    (repl-setup/download-modules-libs "libs" modules_ silent)
    (when (= setup-mode :extended) (repl-setup/download-fonts "libs" silent))
    (repl-setup/setup-repl-config "libs" )
    (repl-setup/setup-repl-launcher color-mode)
    (repl-setup/setup-scripts "scripts")

    (print-success-message)

    (check-jansi-installed "libs")))
