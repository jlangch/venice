;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; REPL setup


(ns repl-setup)

(load-module :maven)
(load-module :ansi)


(def lib-jansi "org.fusesource.jansi:jansi:2.4.0")

(def libs-min [ lib-jansi ])

(def libs-ext [ lib-jansi,
                "org.knowm.xchart:xchart:3.8.1",
                "org.apache.tomcat.embed:tomcat-embed-core:9.0.65",
                "org.apache.tomcat.embed:tomcat-embed-websocket:9.0.65",
                "javax.annotation:javax.annotation-api:1.3.2",
                "org.xhtmlrenderer:flying-saucer-core:9.1.22",
                "org.xhtmlrenderer:flying-saucer-pdf-openpdf:9.1.22",
                "com.github.librepdf:openpdf:1.3.28",
                "com.github.librepdf:pdf-toolbox:1.3.28" ])

(def fonts-base-url "https://github.com/")

(def fonts-min [])

(def fonts-ext [ "googlefonts/opensans/tree/main/fonts/ttf/OpenSans-Regular.ttf"
                 "googlefonts/opensans/tree/main/fonts/ttf/OpenSans-Italic.ttf"
                 "googlefonts/opensans/tree/main/fonts/ttf/OpenSans-Light.ttf"
                 "googlefonts/opensans/tree/main/fonts/ttf/OpenSans-Bold.ttf"
                 "google/fonts/tree/main/ofl/sourcecodepro/SourceCodePro[wght].ttf"
                 "google/fonts/tree/main/ofl/audiowide/Audiowide-Regular.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Black.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-BlackItalic.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Bold.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-BoldItalic.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Italic.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Light.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-LightItalic.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Medium.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-MediumItalic.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Regular.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-Thin.ttf"
                 "google/fonts/tree/main/apache/roboto/static/Roboto-ThinItalic.ttf" ])

(def scripts [ "chart.venice"
               "chart-swing.venice"
               "dining-philosophers.venice"
               "expr-parser.venice"
               "fibonacci.venice"
               "sudoku.venice"
               "tomcat-geoip-map.venice"
               "zip-tomcat-logs.venice"
               "webapp/demo-webapp.venice"
               "webapp/login-webapp.venice"
               "pdf/pdf-example.venice"
               "pdf/pdf-fonts.venice"
               "pdf/pdf-tables.venice"
               "pdf/pdf-images.venice"
               "pdf/pdf-table-of-content.venice"
               "pdf/pdf-footers.venice"
               "pdf/pdf-watermarks.venice"
               "pdf/pdf-text2pdf.venice"
               "pdf/pdf-merge.venice"
               "pdf/pdf-copy.venice" ])


(defn- cr-lf [text]
  (str/cr-lf text (if (os-type? :windows) :cr-lf :lf)))


(defn- missing-libs [dir libs]
  (->> libs
       (map (fn [a] (cons a (maven/parse-artefact a maven/repo ".jar"))))
       (filter #(not (io/exists-file? (io/file dir (third %)))))
       (map first)))


(defn download-libs [dir libs show-progress]
  (let [artefacts (repl-setup/missing-libs dir libs)]
    (when-not (empty? artefacts)
      (println "Downloading Java libraries...")
      (if (io/internet-avail?)
         (docoll #(maven/download % :dir dir
                                    :silent (not show-progress))
                 artefacts)
         (println *err* "Internet is not available!")))))


(defn- missing-fonts [dir fonts]
  (->> fonts
       (map (fn [f] [f (io/file-name f)]))
       (filter #(not (io/exists-file? (io/file dir (second %)))))
       (map first)))


(defn- download-font [uri dir font-name show-progress]
  (let [target (io/file dir font-name)
        progress-fn (if show-progress
                      (ansi/progress-bar
                              :caption     (str "   " font-name " ")
                              :start-msg   "   "
                              :end-msg     (str "   " font-name " ok")
                              :failed-msg  (str "   " font-name " failed"))
                      nil)]
    (try
      (io/spit target (io/download uri
                          :binary true
                          :user-agent "Mozilla"
                          :progress-fn progress-fn))
      (catch :VncException ex
             (println *err* (ex-venice-stacktrace ex))))))


(defn download-fonts [dir fonts show-progress]
  (let [required-fonts (repl-setup/missing-fonts dir fonts)]
    (when-not (empty? required-fonts)
      (println (str "Downloading fonts from '" fonts-base-url "'..."))
      (if (io/internet-avail?)
          (docoll #(repl-setup/download-font (str fonts-base-url %)
                                             dir
                                             (io/file-name %)
                                             show-progress)
                  required-fonts)
          (println *err* "Internet is not available!")))))


(defn setup-scripts [dir]
  (println "Extracting example scripts...")
  (let [load-script (fn [script]
                      (-<> (io/load-classpath-resource script)
                           (bytebuf-to-string <> :utf-8)
                           (repl-setup/cr-lf <>)))]
    (docoll #(io/spit (io/file dir %)
                      (load-script %)
                      :encoding (charset-default-encoding))
            scripts)))


(defn change-repl-launcher-color [cfg color-mode]
  (if (== :none color-mode)
    cfg  ;; do not change
    (let [color-switch (case color-mode
                             :light  "-colors"
                             :dark   "-colors-darkmode"
                                     "-colors")]
      (if (str/contains? cfg "-colors-darkmode")
        (str/replace-last cfg "-colors-darkmode" color-switch)
        (str/replace-last cfg "-colors" color-switch)))))


(defn setup-repl-config [dir]
  (let [config (io/file dir "repl.json")]
    (when-not (io/exists-file? config)
      (println "Setting up 'repl.json'...")
      (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.json")
           (bytebuf-to-string <> :utf-8)
           (repl-setup/cr-lf <>)
           (io/spit config <> :encoding (charset-default-encoding))))))


(defn- setup-repl-launcher-windows [color-mode]
  (when-not (io/exists-file? "repl.bat")
    (println "Setting up 'repl.bat'...")
    (println "REPL install dir:" (io/file-path (io/file-canonical ".")))
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.bat")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (str/replace-all <>
                          "{{INSTALL_PATH}}"
                          (str (io/file-path (io/file-canonical "."))))
         (change-repl-launcher-color <> color-mode)
         (io/spit "repl.bat" <> :encoding (charset-default-encoding)))))


(defn- setup-repl-launcher-unix [color-mode]
  (when-not (io/exists-file? "repl.sh")
    (println "Setting up 'repl.sh'...")
    (println "REPL install dir:" (io/file-path (io/file-canonical ".")))
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.sh")
         (bytebuf-to-string <> :utf-8)
         (repl-setup/cr-lf <>)
         (str/replace-all <>
                          "{{INSTALL_PATH}}"
                          (str (io/file-path (io/file-canonical "."))))
         (change-repl-launcher-color <> color-mode)
         (io/spit "repl.sh" <> :encoding (charset-default-encoding)))
    (when (io/exists-file? "repl.sh"))
      (sh "/bin/sh" "-c" "chmod u+x repl.sh" :dir (io/file "."))))


(defn setup-repl-launcher [color-mode]
  (if (os-type? :windows)
    (setup-repl-launcher-windows color-mode)
    (setup-repl-launcher-unix color-mode)))


(defn package-resources [lib-dir font-dir]
  (let [target (io/file lib-dir "resources.jar")
        res-venice-png "com/github/jlangch/venice/images/venice.png"]
      (println (str "Packaging resources (fonts, images) to '" target "'..."))
      (let [zip-entries  (conj (->> (io/list-files font-dir)
                                    (map #(vector (str "fonts/" (io/file-name %)) %))
                                    (flatten))
                                "images/venice.png"
                                (io/load-classpath-resource res-venice-png))]
        (io/spit target (apply io/zip zip-entries)))))


(defn copy-venice-jar [dir]
  (let [loc    (java-source-location :com.github.jlangch.venice.Venice)
        name   (when (some? loc) (io/file-name loc))
        target (io/file dir name)]
    (when (and (str/starts-with? name "venice-") (str/ends-with? name ".jar"))
       (try
         (println (str "Copying '" name "' to libs"))
         (io/copy-file loc target :replace true)
         (catch :Exception e
           (if (io/exists-file? target)
             (println *err*
                      (str "Failed to copy '"
                           name
                           "' to libs. It exists already and can not be overwritten!"))
             (println *err*(str "Failed to copy '" name "' to libs!"))))))))


(defn check-jansi-installed [dir]
  (when (os-type? :windows)
    (let [[_ _ _ jansi-name] (maven/parse-artefact lib-jansi ".jar")
          jansi-jar (io/file dir jansi-name)]
      (when-not (io/exists-file? jansi-jar)
        (println )
        (println *err*
                 """
                 -------------------------------------------------------------
                 !WARNING! The Jansi JAR could not be downloaded. Without this
                           JAR the REPL has limited features!
                 -------------------------------------------------------------
                 """)
        (println )))))


(defn print-success-message []
  (let [launch-script (if (os-type? :windows) "repl.bat" "./repl.sh")]
    (println )
    (println """
             ----------------------------------------------------------------
             The Venice REPL has been successfully configured and setup. The
             original Venice JAR is not needed anymore, it has been copied to
             the 'libs' directory that holds all JAR files and resources.

             !!! Start the REPL with ~{launch-script}
             ----------------------------------------------------------------
             """)))


(defn setup [& options]
  (let [options       (apply hash-map options)
        setup-mode    (:setup-mode options :minimal)   ;; {:minimal :extended}
        color-mode    (:color-mode options :none)      ;; {:none :light :dark}
        show-progress (:ansi-terminal options false)   ;; {true false}
        libs          (if (= setup-mode :extended) libs-ext libs-min)
        fonts         (if (= setup-mode :extended) fonts-ext fonts-min)
        charset       (name (charset-default-encoding))]
    (when-not (io/exists-dir? "./libs")
      (io/mkdirs "./libs"))

    (when-not (io/exists-dir? "./scripts")
      (io/mkdirs "./scripts"))

    (when-not (io/exists-dir? "./scripts/pdf")
      (io/mkdirs "./scripts/pdf"))

    (when-not (io/exists-dir? "./scripts/webapp")
      (io/mkdirs "./scripts/webapp"))

    (when-not (empty? fonts)
      (when-not (io/exists-dir? "./fonts")
        (io/mkdirs "./fonts")))

    (when-not (io/exists-dir? "./tmp")
      (io/mkdirs "./tmp"))

    (println)
    (println (str "Setting up the REPL on '" (os-name) "' " (os-version)))
    (println "Using the platforms's default charset" charset)
    (println)
    (let [{version :version, vendor :vendor} (java-version-info)]
      (println (str "Running on Java VM: " version " (" vendor ")"))
      (println))

    (repl-setup/copy-venice-jar "libs")
    (repl-setup/download-libs "libs" libs show-progress)
    (repl-setup/download-fonts "fonts" fonts show-progress)
    (repl-setup/setup-repl-config "libs" )
    (repl-setup/setup-repl-launcher color-mode)
    (repl-setup/setup-scripts "scripts")

    (when (= setup-mode :extended)
      (repl-setup/package-resources "libs" "fonts"))

    (print-success-message)

    (check-jansi-installed "libs")))
