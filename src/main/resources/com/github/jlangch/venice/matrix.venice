;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; 2D-Matrix functions

(ns matrix)


(defn 
  ^{ :arglists '(
          "(matrix/validate m)")
     :doc """
          Validates a matrix. A matrix is a vector of vectors [[1 2] [3 4]]

          * All rows must have the same number of columns
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/validate [[1 2 3] 
                              [4 5 6]]))
          """ ) }

  validate [m]

  (when-not (vector? m)
    (throw (ex :VncException "A matrix must be a vector of vectors!")))
  (when-not (empty? m)
    (when-not (apply = (map #(vector? %) m))
      (throw (ex :VncException "A matrix must be a vector of vectors!")))
    (when-not (apply = (map #(count %) m))
      (throw (ex :VncException "All matrix' rows must have the same number of columns!"))))
  m)

(defn 
  ^{ :arglists '(
          "(matrix/transpose m)")
     :doc """
          Transposes a matrix. A matrix is a vector of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 1 2 3 |   =>   | 1 4 |
            ;; | 4 5 6 |        | 2 5 |
            ;;                  | 3 6 |
            (matrix/transpose [[1 2 3] 
                               [4 5 6]]))
          """ ) }

  transpose [m]
  
  (validate m)
  (apply map vector m))


(defn 
  ^{ :arglists '(
          "(matrix/add-column-start m c)")
     :doc """
          Add a column to a matrix. A matrix is a vector of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 2 3 4 |  +  | 1 5 |  =>  | 1 2 3 4 |
            ;; | 6 7 8 |                  | 5 6 7 8 |
                                        
            (matrix/add-column-start [[2 3 4] [6 7 8]] [1 5])
          """ ) }

  add-column-start [m c]

  (validate m)
  (as-> (map vector c m) mat
        (map #(cons (first %) (second %)) mat)))


(defn 
  ^{ :arglists '(
          "(matrix/add-column-end m c)")
     :doc """
          Add a column to a matrix. A matrix is a vector of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 1 2 3 |  +  | 4 8 |  =>   | 1 2 3 4 |
            ;; | 5 6 7 |                   | 5 6 7 8 |
                                        
            (matrix/add-column-end [[1 2 3] [5 6 7]] [4 8])
          """ ) }

  add-column-end [m c]

  (validate m)
  (as-> (map vector c m) mat
        (map #(conj (second %) (first %)) mat)))


(defn 
  ^{ :arglists '(
          "(matrix/add-row-start m r)")
     :doc """
          Add a row to a matrix. A matrix is a vector of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 4 5 6 |  +  | 1 2 3 |  =>   | 1 2 3 |
            ;; | 7 8 9 |                     | 4 5 6 |
            ;;                               | 7 8 9 |

            (matrix/add-row-start [[ 4 5 6 ] [7 8 9]] [1 2 3])
          """ ) }

  add-row-start [m r]

  (validate m)
  (cons r m))


(defn 
  ^{ :arglists '(
          "(matrix/add-row-end m r)")
     :doc """
          Add a row to a matrix. A matrix is a vector of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 1 2 3 |  +  | 7 8 9 |  =>   | 1 2 3 |
            ;; | 4 5 6 |                     | 4 5 6 |
            ;;                               | 7 8 9 |

            (matrix/add-row-end [[1 2 3] [ 4 5 6]] [7 8 9])
          """ ) }

  add-row-end [m r]

  (validate m)
  (conj m r))
