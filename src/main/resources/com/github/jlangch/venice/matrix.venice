;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; 2D-Matrix functions

(ns matrix)


(defn 
  ^{ :arglists '(
          "(matrix/validate m)")
     :doc """
          Validates a matrix. A matrix is a vector of vectors [[1 2] [3 4]]

          Returns the matrix if valid else throws an exception.

          * A matrix must be an empty vector or a vector of vectors!
          * All rows must have the same number of columns
         """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/validate [[1 2 3] 
                              [4 5 6]]))
          """ ) }

  validate [m]

  (when-not (vector? m)
    (throw (ex :VncException "A matrix must be a vector of vectors!")))
  (when-not (empty? m)
    (when-not (apply = (map #(vector? %) m))
      (throw (ex :VncException "A matrix must be a vector of vectors!")))
    (when-not (apply = (map #(count %) m))
      (throw (ex :VncException "All matrix rows must have the same number of columns!"))))
  m)


(defn 
  ^{ :arglists '(
          "(matrix/rows m)")
     :doc """
          Returns the number of rows in the matrix
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/rows [[1 2 3] 
                          [4 5 6]]))
          """ ) }

  rows [m]

  (validate m)
  (count m))


(defn 
  ^{ :arglists '(
          "(matrix/columns m)")
     :doc """
          Returns the number of columns in the matrix
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/columns [[1 2 3] 
                             [4 5 6]]))
          """ ) }

  columns [m]

  (validate m)
  (if (empty? m) 0 (count (first m))))


(defn 
  ^{ :arglists '(
          "(matrix/element m row col)")
     :doc """
          Returns the matrix element at the row and column
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/element [[1 2 3] [4 5 6]] 1 2))
          """ ) }

  element [m row col]

  (validate m)
  (assert (< -1 row (rows m)) "Invalid row index ~{row}")
  (assert (< -1 col (columns m)) "Invalid column index ~{col}")
  (get-in m [row col]))


(defn 
  ^{ :arglists '(
          "(matrix/assoc-element m row col val)")
     :doc """
          Replaces an element in the matrix
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/assoc-element [[1 2 3] [4 5 6]] 1 2 9))
          """ ) }

  assoc-element [m row col val]

  (validate m)
  (assert (< -1 row (rows m)) "Invalid row index ~{row}")
  (assert (< -1 col (columns m)) "Invalid column index ~{col}")
  (assoc-in m [row col] val))


(defn 
  ^{ :arglists '(
          "(matrix/row m n)")
     :doc """
          Returns the matrix row n
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/row [[1 2 3] [4 5 6]] 1))
          """ ) }

  row [m n]

  (validate m)
  (assert (< -1 n (rows m)) "Invalid row index ~{n}")
  (nth m n))


(defn 
  ^{ :arglists '(
          "(matrix/column m n)")
     :doc """
          Returns the matrix column n
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/column [[1 2 3] [4 5 6]] 1))
          """ ) }

  column [m n]

  (validate m)
  (assert (< -1 n (columns m)) "Invalid column index ~{n}")
  (into [] (map #(nth % n) m)))


(defn 
  ^{ :arglists '(
          "(matrix/transpose m)")
     :doc """
          Transposes a matrix. A matrix is a vector of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 1 2 3 |   =>   | 1 4 |
            ;; | 4 5 6 |        | 2 5 |
            ;;                  | 3 6 |
            (matrix/transpose [[1 2 3] 
                               [4 5 6]]))
          """ ) }

  transpose [m]
  
  (validate m)
  (apply map vector m))


(defn 
  ^{ :arglists '(
          "(matrix/add-column-at-start m c)")
     :doc """
          Add a column to a matrix before the first column. A matrix is a vector 
          of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 2 3 4 |  +  | 1 5 |  =>  | 1 2 3 4 |
            ;; | 6 7 8 |                  | 5 6 7 8 |
                                        
            (matrix/add-column-at-start [[2 3 4] [6 7 8]] [1 5]))
          """ ) }

  add-column-at-start [m c]

  (validate m)
  (if (empty? m)
    (map #(vector %) c)
    (do
      (assert (= (count c) (rows m)) "The new column must have ~(rows m) rows")
      (as-> (map vector c m) mat
            (map #(cons (first %) (second %)) mat)))))


(defn 
  ^{ :arglists '(
          "(matrix/add-column-at-end m c)")
     :doc """
          Add a column to a matrix after the last column. A matrix is a vector 
          of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 1 2 3 |  +  | 4 8 |  =>   | 1 2 3 4 |
            ;; | 5 6 7 |                   | 5 6 7 8 |
                                        
            (matrix/add-column-at-end [[1 2 3] [5 6 7]] [4 8]))
          """ ) }

  add-column-at-end [m c]

  (validate m)
  (if (empty? m)
    (map #(vector %) c)
    (do
      (assert (= (count c) (rows m)) "The new column must have ~(rows m) rows")
      (as-> (map vector c m) mat
            (map #(conj (second %) (first %)) mat)))))


(defn 
  ^{ :arglists '(
          "(matrix/add-row-at-start m r)")
     :doc """
          Add a row to a matrix before the first row. A matrix is a vector of 
          vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 4 5 6 |  +  | 1 2 3 |  =>   | 1 2 3 |
            ;; | 7 8 9 |                     | 4 5 6 |
            ;;                               | 7 8 9 |

            (matrix/add-row-at-start [[ 4 5 6 ] [7 8 9]] [1 2 3]))
          """ ) }

  add-row-at-start [m r]

  (validate m)
  (when-not (empty? m)
    (assert (= (count r) (columns m)) "The new row must have ~(columns m) columns"))
  (cons r m))


(defn 
  ^{ :arglists '(
          "(matrix/add-row-at-end m r)")
     :doc """
          Add a row to a matrix after the last row. A matrix is a vector of 
          vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)

            ;; | 1 2 3 |  +  | 7 8 9 |  =>   | 1 2 3 |
            ;; | 4 5 6 |                     | 4 5 6 |
            ;;                               | 7 8 9 |

            (matrix/add-row-at-end [[1 2 3] [ 4 5 6]] [7 8 9]))
          """ ) }

  add-row-at-end [m r]

  (validate m)
  (when-not (empty? m)
    (assert (= (count r) (columns m)) "The new row must have ~(columns m) columns"))
  (conj m r))


(defn 
  ^{ :arglists '(
          "(matrix/remove-column m n)")
     :doc """
          Add a column to a matrix before the first column. A matrix is a vector 
          of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/remove-column [[2 3 4] [6 7 8]] 1))
          """ ) }

  remove-column [m n]

  (validate m)
  (assert (< -1 n (columns m)) "Invalid column index ~{n}")
  (into [] (map #(dissoc % n) m)))


(defn 
  ^{ :arglists '(
          "(matrix/remove-row m n)")
     :doc """
          Add a column to a matrix before the first column. A matrix is a vector 
          of vectors [[1 2] [3 4]]
          """
     :examples (list
          """
          (do
            (load-module :matrix)
            (matrix/remove-row [[1 2] [3 4] [5 6]] 1))
          """ ) }

  remove-row [m n]

  (validate m)
  (assert (< -1 n (rows m)) "Invalid row index ~{n}")
  (dissoc m n))
