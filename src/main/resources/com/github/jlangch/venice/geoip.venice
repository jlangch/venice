;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; GEOIP functions. Maps IP adresses to country and location (latitude,
;;;; longitude).
;;;;
;;;; E.g.: "91.223.55.1"  => ["91.223.55.1", "PL", "Poland", ["51.919438", "19.145136"]]
;;;;
;;;;
;;;; To download the free MaxMind GeoLite databases you need a license key that
;;;; can be obtained from the MaxMind 'https://www.maxmind.com/en/home' home
;;;; page.
;;;; Doc: https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/
;;;;
;;;; You can use Venice's :mercator extension module to create a world map with
;;;; the IP locations:
;;;;
;;;;      (do
;;;;        (load-module :mercator)
;;;;        (load-module :geoip)
;;;;
;;;;        (defn draw [format file locations]
;;;;          (-> (mercator/load-mercator-image)
;;;;              (mercator/draw-locations locations)
;;;;              (mercator/crop-image 400 600)
;;;;              (mercator/save-image format file)))
;;;;
;;;;        (def rv (geoip/ip-to-country-loc-resolver
;;;;                         "resources/geoip-country.zip"
;;;;                         (geoip/download-google-country-db)))
;;;;
;;;;        (->> ["91.223.55.1" "220.100.34.45" "167.120.90.10"]
;;;;             (map rv)
;;;;             (map :loc)
;;;;             (map geoip/map-location-to-numerics)
;;;;             (draw :png "./world-map.png")))
;;;;


(ns geoip)

(import :java.net.Inet4Address)
(import :java.net.Inet6Address)



;; MaxMind GEO IP database download URL.
;;
;; Placeholders:
;;   {db}  the DB type. One of GeoLite2-Country-CSV, GeoLite2-City-CSV
;;   {key} your MaxMind license key. There is a license for a light
;;         version of the databases that is free.
(def geoip/maxmind-geoip-url
       "https://download.maxmind.com/app/geoip_download?edition_id={db}&license_key={key}&suffix=zip")


;; Google country GPS data
;;
;; See: https://developers.google.com/public-data/docs/canonical/countries_csv
;;      https://github.com/google/dspl/tree/master/samples/google/canonical
(def geoip/google-country-url
       "https://raw.githubusercontent.com/google/dspl/master/samples/google/canonical/countries.csv")


(def geoip/stats (atom {}))

;; Private IPv4 Address Ranges (RFC 1918)
(def private-ip4-addresses [ "10.0.0.0/8"
                             "172.16.0.0/12"
                             "192.168.0.0/16" ])

;; Private IPv6 Address Ranges (RFC 4193)
(def private-ip6-addresses [ "fc00::/7" ])


(defn geoip/statistics [] @geoip/stats)


(defn
  ^{ :arglists '("(geoip/addr-ranges->trie ranges)")
     :doc """
          Creates a trie map from a sequence of address ranges.
          """
     :examples '(
           """
           (do
             (def private-ip4-trie (geoip/addr-ranges->trie geoip/private-ip4-addresses))

             (defn private-ip? [ip]
                (some? (cidr/lookup-reverse private-ip4-trie ip)))

             (private-ip? "192.168.0.1"))
           """) }

  addr-ranges->trie [ranges]

  (let [trie (cidr/trie)]
    (docoll #(cidr/insert trie (cidr/parse %) "") ranges)
    trie))


(defn
  ^{ :arglists '("(geoip/ip-to-country-loc-resolver geoip-zip location-csv)")
     :doc """
          Returns a resolve function that resolves an IP address to its
          associated country and latitude/longitude location. The resolve
          function returns the country and the latitude/longitude or nil
          if no data is found.

          The MindMax country geoip-zip may be a bytebuf, a file,
          a string (file path) or an InputStream.

          The resolver loads the MindMax IPv4 and IPv6 country and the Google
          country database and caches the data for IP address resolves.
          """
     :examples '(
           """
           (do
             (def rv (geoip/ip-to-country-loc-resolver
                                    "./geoip-country.zip"
                                    (geoip/download-google-country-db)))

             (rv "91.223.55.1")) ;; => {:ip "91.223.55.6"
                                 ;;     :loc ["51.919438" "19.145136"]
                                 ;;     :country-name "Poland"
                                 ;;     :country-iso "PL"}
           """)
      :see-also '(
           "geoip/download-maxmind-db-to-zipfile"
           "geoip/ip-to-country-resolver"
           "geoip/ip-to-city-loc-resolver"
           "geoip/ip-to-city-loc-resolver-mem-optimized"
           "geoip/country-to-location-resolver") }

  geoip/ip-to-country-loc-resolver [geoip-zip location-csv]

  (let [ip-to-country  (geoip/ip-to-country-resolver geoip-zip)
        country-to-loc (geoip/country-to-location-resolver location-csv)
        resolver       (fn [ip]
                         (let [country (ip-to-country ip)]
                           (when (some? country)
                             (assoc country
                                    :ip ip
                                    :loc (country-to-loc (:country-iso country))))))]
    resolver))


(defn
  ^{ :arglists '("(geoip/ip-to-city-loc-resolver geoip-zip)")
     :doc """
          Returns a resolve function that resolves an IP address to its
          associated city and latitude/longitude location. The resolve
          function returns the city and the latitude/longitude or nil
          if no data is found.

          The MindMax city geoip-zip may be a bytebuf, a file,
          a string (file path) or an InputStream.

          The resolver loads the MindMax IPv4 and IPv6 city database and
          caches the data for IP address resolves.

          As of July 2020 the MaxMind city database has:

          |       ---: | :---        |
          |  2'917'097 | IPv4 blocks |
          |    459'294 | IPv6 blocks |
          |    118'189 | cities      |

          Note:¶
          The MaxMind city IPv4 and IPv6 databases have 220MB of size on disk.
          It takes considerable time to load the data. Preprocessed and ready
          to work in the GEO IP modules ~3GB of memory is required.¶
          Once the resolver has loaded the data the lookups are very fast.
          """
     :examples '(
           """
           (do
             (def rv (geoip/ip-to-city-loc-resolver "./geoip-city.zip"))

             (rv "192.241.235.46")) ;; => {:ip "192.241.235.46"
                                    ;;     :loc ["37.7353" "-122.3732"]
                                    ;;     :country-name "United States"
                                    ;;     :country-iso "US"
                                    ;;     :region "California"
                                    ;;     :city "San Francisco"}
           """)
      :see-also '(
           "geoip/download-maxmind-db-to-zipfile"
           "geoip/ip-to-country-resolver"
           "geoip/ip-to-country-loc-resolver"
           "geoip/ip-to-city-loc-resolver-mem-optimized"
           "geoip/country-to-location-resolver") }

  geoip/ip-to-city-loc-resolver [geoip-zip]

  (let [zip-bytes   (if (bytebuf? geoip-zip)
                      geoip-zip
                      (io/slurp geoip-zip :binary true))
        cities      (geoip/parse-maxmind-city-db zip-bytes)
        tasks       [(future (partial geoip/parse-maxmind-city-ip-db
                                      :IPv4 zip-bytes cities))
                     (future (partial geoip/parse-maxmind-city-ip-db
                                      :IPv6 zip-bytes cities))]
        ip4-trie    (deref (first tasks))
        ip6-trie    (deref (second tasks))
        resolver    (fn [ip] (cidr/lookup-mixed ip4-trie ip6-trie ip))]
    (geoip/update-stats! :cities-maxmind (count cities))
    (geoip/update-stats! :ip4-to-city (cidr/size ip4-trie))
    (geoip/update-stats! :ip6-to-city (cidr/size ip6-trie))
    resolver))


  (defn
    ^{ :arglists '("(geoip/ip-to-city-loc-resolver-mem-optimized geoip-zip)")
       :doc """
            Returns a resolve function that resolves an IP address to its
            associated city and latitude/longitude location. The resolve
            function returns the city and the latitude/longitude or nil
            if no data is found.

            The MindMax city geoip-zip may be a bytebuf, a file,
            a string (file path) or an InputStream.

            The resolver loads the MindMax IPv4 and IPv6 city database and
            caches the data for IP address resolves.

            As of July 2020 the MaxMind city database has:

            |       ---: | :---        |
            |  2'917'097 | IPv4 blocks |
            |    459'294 | IPv6 blocks |
            |    118'189 | cities      |

            Note:¶
            The MaxMind city IPv4 and IPv6 databases have 220MB of size on disk.
            It takes considerable time to load the data. This is a memory
            optimized resolver version on the cost of performance.¶
            For best performance on the cost of memory use the resolver
            'geoip/ip-to-city-loc-resolver' instead!
            """
       :examples '(
             """
             (do
               (def rv (geoip/ip-to-city-loc-resolver-mem-optimized "./geoip-city.zip"))

               (rv "192.241.235.46")) ;; => {:ip "192.241.235.46"
                                      ;;     :loc ["37.7353" "-122.3732"]
                                      ;;     :country-name "United States"
                                      ;;     :country-iso "US"
                                      ;;     :region "California"
                                      ;;     :city "San Francisco"}
             """)
        :see-also '(
             "geoip/download-maxmind-db-to-zipfile"
             "geoip/ip-to-country-resolver"
             "geoip/ip-to-country-loc-resolver"
             "geoip/ip-to-city-loc-resolver"
             "geoip/country-to-location-resolver") }

    geoip/ip-to-city-loc-resolver-mem-optimized [geoip-zip]

    (let [zip-bytes   (if (bytebuf? geoip-zip)
                        geoip-zip
                        (io/slurp geoip-zip :binary true))
          cities      (geoip/parse-maxmind-city-db zip-bytes)
          tasks       [(future (partial geoip/parse-maxmind-city-ip-db
                                        :IPv4 zip-bytes nil))
                       (future (partial geoip/parse-maxmind-city-ip-db
                                        :IPv6 zip-bytes nil))]
          ip4-trie    (deref (first tasks))
          ip6-trie    (deref (second tasks))
          resolver    (fn [ip]
                        (let [data (cidr/lookup-mixed ip4-trie ip6-trie ip)
                              city (get cities (:city-id data))]
                          (merge data city)))]
      (geoip/update-stats! :cities-maxmind (count cities))
      (geoip/update-stats! :ip4-to-city (cidr/size ip4-trie))
      (geoip/update-stats! :ip6-to-city (cidr/size ip6-trie))
      resolver))


(defn
  ^{ :arglists '("(geoip/country-to-location-resolver location-csv)")
     :doc """
          Returns a resolve function that resolves countries given by a country
          2-digit ISO code to its latitude/longitude location. The resolve
          function returns the latitude/longitude or nil if the country is
          not supported.

          The resolver loads Google country database and caches the data
          for location resolves.
          """
     :examples '(
           """
           (do
             (def rv (geoip/country-to-location-resolver geoip/download-google-country-db))
             (rv "PL")) ;; => ["51.919438", "19.145136"]
           """)
      :see-also '(
           "geoip/download-maxmind-db-to-zipfile"
           "geoip/ip-to-country-resolver"
           "geoip/ip-to-country-loc-resolver"
           "geoip/ip-to-city-loc-resolver"
           "geoip/ip-to-city-loc-resolver-mem-optimized") }

  geoip/country-to-location-resolver [location-csv]

  (let [locations   (geoip/parse-google-countries-csv location-csv)
        resolver    (fn [country-iso] (get locations country-iso))]
    (geoip/update-stats! :countries-google (count locations))
    resolver))


(defn
  ^{ :arglists '("(geoip/ip-to-country-resolver geoip-zip)")
     :doc """
          Returns a resolve function that resolves an IP addresses to its
          associated country. The resolve function returns the country
          information for a given IP address.

          The MindMax country geoip-zip may be a bytebuf, a file,
          a string (file path) or an InputStream.

          The resolver loads the MindMax IPv4 and IPv6 country databases and
          caches the data for subsequent IP resolves.

          As of July 2020 the MaxMind country database has:

          |     ---: | :---        |
          |  303'448 | IPv4 blocks |
          |  107'641 | IPv6 blocks |
          |      253 | countries   |
          """
     :examples '(
           """
           (do
             (def rv (geoip/ip-to-country-resolver "./geoip-country.zip"))
             (rv "91.223.55.1")) ;; => { :country-name "Poland"
                                 ;;      :country-iso "PL" }
           """)
      :see-also '(
           "geoip/download-maxmind-db-to-zipfile"
           "geoip/ip-to-country-loc-resolver"
           "geoip/ip-to-city-loc-resolver"
           "geoip/ip-to-city-loc-resolver-mem-optimized"
           "geoip/country-to-location-resolver") }

  geoip/ip-to-country-resolver [geoip-zip]

  (let [zip-bytes   (if (bytebuf? geoip-zip)
                      geoip-zip
                      (io/slurp geoip-zip :binary true))
        countries   (geoip/parse-maxmind-country-db zip-bytes)
        tasks       [(future (partial geoip/parse-maxmind-country-ip-db
                                      :IPv4 zip-bytes countries))
                     (future (partial geoip/parse-maxmind-country-ip-db
                                      :IPv6 zip-bytes countries))]
        ip4-trie    (deref (first tasks))
        ip6-trie    (deref (second tasks))
        resolver    (fn ip-to-country-resolver_ [ip]
                      (cidr/lookup-mixed ip4-trie ip6-trie ip))]
    (geoip/update-stats! :countries-maxmind (count countries))
    (geoip/update-stats! :ip4-to-country (cidr/size ip4-trie))
    (geoip/update-stats! :ip6-to-country (cidr/size ip6-trie))
    resolver))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-country-ip-db ip-type zip maxmind-countries)")
     :doc """
          Parses the MaxMind country IP blocks database. Expects a Maxmind
          country IP database zip. ip-type is either :IPv4 or :IPv6. The zip
          may be a bytebuf, a file, a string (file path) or an InputStream.

          The maxmind-countries are optional and map the geoname-id to country
          data.

          Returns a trie datastructure with the CIDR address as the key and a
          map with country data as the value.

          maxmind-countries:

          ```
          { "49518" {:country-iso "RW" :country-name "Rwanda"}
            "51537" {:country-iso "SO" :country-name "Somalia"} }
          ```

          Return:

          ```
          { 223 [ [(cidr-parse "223.255.254.0/24") {:country-iso "SG"
                                                    :country-name"Singapore"}]
                  [(cidr-parse "223.255.255.0/24") {:country-iso "AU"
                                                    :country-name"Australia"}]
                ] }
          ```
          """
     :examples '(
           """
           (do
             (load-module :geoip)
             (geoip/download-maxmind-db-to-zipfile "./geoip-country.zip"
                                                   :country
                                                   "YOUR-MAXMIND-LIC-KEY")
             (geoip/parse-maxmind-country-ip-db
                 :IPv4
                 "./geoip-country.zip"
                 nil))
           """,
           """
           (do
             (load-module :geoip)
             (geoip/download-maxmind-db-to-zipfile "./geoip-country.zip"
                                                   :country
                                                   "YOUR-MAXMIND-LIC-KEY")
             (geoip/parse-maxmind-country-ip-db
                 :IPv6
                 "./geoip-country.zip"
                 (geoip/parse-maxmind-country-db "./geoip-country.zip")))
           """)
      :see-also '(
           "geoip/download-maxmind-db-to-zipfile"
           "geoip/parse-maxmind-country-db"
           "geoip/parse-maxmind-city-ip-db") }
  ;; Format MaxMind country IP blocks DB:
  ;;
  ;; network,geoname_id,registered_country_geoname_id,represented_country_geoname_id,is_anonymous_proxy,is_satellite_provider
  ;; 1.0.0.0/24,2077456,2077456,,0,0
  ;; 1.0.1.0/24,1814991,1814991,,0,0

  geoip/parse-maxmind-country-ip-db [ip-type zip maxmind-countries]

  (let [zip-entry-name (if (= ip-type :IPv6)
                           "GeoLite2-Country-Blocks-IPv6.csv"
                           "GeoLite2-Country-Blocks-IPv4.csv")
        ip-blocks      (->> (geoip/unzip-entry zip zip-entry-name)
                            (csv/read)
                            (filter #(and (not (nil? (nth % 1)))
                                          (= "0" (nth % 4))
                                          (= "0" (nth % 5)))))
        trie           (cidr/trie)]
    (docoll (fn [x] (cidr/insert
                        trie
                        (cidr/parse (first x))
                        (get maxmind-countries (second x) {})))
            ip-blocks)
    trie))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-city-ip-db ip-type zip maxmind-cities)")
     :doc """
          Parses the MaxMind city IP blocks database. Expects a MaxMind
          city IP database zip. ip-type is either :IPv4 or :IPv6. The zip may
          be a bytebuf, a file, a string (file path) or an InputStream.

          The maxmind-countries are optional and map the geoname-id to country
          data.

          Returns a trie datastructure with the CIDR address as the key and a
          map with city/country data as the value.

          maxmind-cities:

          ```
          { "2643743" {:country-iso "GB" :country-name "England"
                       :region "England"  :city "London"}
            "2661881" {:country-iso "CH" :country-name "Switzerland"
                       :region "Aargau"  :city "Aarau"} }
          ```
          """
     :examples '(
           """
           (do
             (load-module :geoip)
             (geoip/download-maxmind-db-to-zipfile "./geoip-city.zip"
                                                   :city
                                                   "YOUR-MAXMIND-LIC-KEY")
             (geoip/parse-maxmind-city-ip-db
                 :IPv4
                 "./geoip-city.zip"
                 nil))
           """,
           """
           (do
             (load-module :geoip)
             (geoip/download-maxmind-db-to-zipfile "./geoip-city.zip"
                                                   :city
                                                   "YOUR-MAXMIND-LIC-KEY")
             (geoip/parse-maxmind-city-ip-db
                 :IPv6
                 "./geoip-city.zip"
                 (geoip/parse-maxmind-city-db "./geoip-city.zip")))
           """)
      :see-also '(
           "geoip/download-maxmind-db-to-zipfile"
           "geoip/parse-maxmind-city-db"
           "geoip/parse-maxmind-country-ip-db") }
  ;; Format MaxMind city IP blocks DB:
  ;;
  ;; network,geoname_id,registered_country_geoname_id,represented_country_geoname_id,is_anonymous_proxy,is_satellite_provider,postal_code,latitude,longitude,accuracy_radius
  ;; 0.60.48.124/30,5164706,6252001,,0,0,44720,40.7961,-81.3798,200
  ;; 70.60.48.128/29,5164706,6252001,,0,0,44720,40.7961,-81.3798,200

  geoip/parse-maxmind-city-ip-db [ip-type zip maxmind-cities]

  (let [zip-entry-name (if (= ip-type :IPv6)
                           "GeoLite2-City-Blocks-IPv6.csv"
                           "GeoLite2-City-Blocks-IPv4.csv")
        ip-blocks      (->> (geoip/unzip-entry zip zip-entry-name)
                            (csv/read)
                            (filter #(and (not (nil? (nth % 1)))
                                          (= "0" (nth % 4))
                                          (= "0" (nth % 5)))))
        trie           (cidr/trie)]

    (if (some? maxmind-cities)
      (docoll (fn [x] (cidr/insert trie
                                   (cidr/parse (first x))
                                   (assoc (get maxmind-cities (second x))
                                          :loc [(nth x 7) (nth x 8)])))
              ip-blocks)
      (docoll (fn [x] (cidr/insert trie
                                   (cidr/parse (first x))
                                   { :loc [(nth x 7) (nth x 8)]
                                     :city-id (second x) }))
              ip-blocks))
    trie))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-country-db zip)")
     :doc """
          Parses the MaxMind country-location CSV file. Returns a map with
          the country geoname-id as key and the country data as value.

          Return:

          ```
             { "49518" {:country-iso "RW" :country-name "Rwanda"}
               "51537" {:country-iso "SO" :country-name "Somalia"} }
          ```
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/download-maxmind-db-to-zipfile "./geoip-country.zip"
                                                  :country
                                                  "YOUR-MAXMIND-LIC-KEY")
            (geoip/parse-maxmind-country-db "./geoip-country.zip"))
          """)
     :see-also '(
          "geoip/download-maxmind-db-to-zipfile"
          "geoip/parse-maxmind-city-db") }
  ;; format:
  ;;
  ;; geoname_id,locale_code,continent_code,continent_name,country_iso_code,country_name,is_in_european_union
  ;; 49518,en,AF,Africa,RW,Rwanda,0
  ;; 51537,en,AF,Africa,SO,Somalia,0

  geoip/parse-maxmind-country-db [zip]

  (->> (geoip/unzip-entry zip "GeoLite2-Country-Locations-en.csv")
       (csv/read)
       (map (juxt #(nth % 0)
                  #(hash-map :country-iso (nth % 4)
                             :country-name (nth % 5))))
       (into {})))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-city-db zip)")
     :doc """
          Parses the MaxMind city-location CSV file. Returns a map with the
          city geoname-id as key and the city/country data as value.

          Return:

          ```
          { "2643743" {:country-iso "GB" :country-name "England"
                       :region "England"  :city "London"}
            "2661881" {:country-iso "CH" :country-name "Switzerland"
                       :region "Aargau"  :city "Aarau"} }
          ```
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/download-maxmind-db-to-zipfile "./geoip-city.zip"
                                                  :city
                                                  "YOUR-MAXMIND-LIC-KEY")
            (geoip/parse-maxmind-city-db "./geoip-city.zip"))
          """)
     :see-also '(
          "geoip/download-maxmind-db-to-zipfile"
          "geoip/parse-maxmind-country-db") }
  ;; format:
  ;;
  ;; geoname_id,locale_code,continent_code,continent_name,country_iso_code,country_name,subdivision_1_iso_code,subdivision_1_name,subdivision_2_iso_code,subdivision_2_name,city_name,metro_code,time_zone,is_in_european_union
  ;; 2643743,en,EU,Europe,GB,"United Kingdom",ENG,England,,,London,,Europe/London,1
  ;; 2661881,en,EU,Europe,CH,Switzerland,AG,Aargau,,,Aarau,,Europe/Zurich,0

  geoip/parse-maxmind-city-db [zip]

  (->> (geoip/unzip-entry zip "GeoLite2-City-Locations-en.csv")
       (csv/read)
       (map (juxt #(nth % 0)
                  #(hash-map :country-iso (nth % 4)
                             :country-name (nth % 5)
                             :region (nth % 7)
                             :city (nth % 10))))
       (into {})))


(defn
  ^{ :arglists '("(geoip/download-google-country-db-to-csvfile csvfile)")
     :doc """
          Downloads the Google country GPS database to the given CSV file
          location. The database holds a mapping from country to location
          (latitude/longitude).

          The Google country database URL is defined in the global var
          'geoip/google-country-url'.
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/download-google-country-db-to-csvfile "./country-gps.csv"))
          """)
     :see-also '(
          "geoip/download-google-country-db") }

  geoip/download-google-country-db-to-csvfile [csvfile]

  (io/spit csvfile (geoip/download-google-country-db)))


(defn
  ^{ :arglists '("(geoip/download-google-country-db)")
     :doc """
          Downloads the Google country database. The database holds a mapping
          from country to location (latitude/longitude).

          The Google country database URL is defined in the global var
          'geoip/google-country-url'.

          Returns the downloaded CSV data as a bytebuf.
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/download-google-country-db))
          """)
     :see-also '(
          "geoip/download-google-country-db-to-csvfile")  }

  geoip/download-google-country-db []

  (io/download geoip/google-country-url :binary false))


(defn
  ^{ :arglists '("(geoip/download-maxmind-db-to-zipfile zipfile type lic-key)")
     :doc """
          Downloads the MaxMind country or city GEO IP database to the given
          ZIP file. The type is either :country or :city.

          The download requires your personal MaxMind license key. The
          license to download the free MaxMind GeoLite databases can be
          obtained from the [MaxMind](https://www.maxmind.com/en/home) home page.
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/download-maxmind-db-to-zipfile "./geoip-country.zip"
                                                  :country
                                                  "YOUR-MAXMIND-LIC-KEY"))
          """)
     :see-also '(
          "geoip/build-maxmind-country-db-url"
          "geoip/build-maxmind-city-db-url") }

  geoip/download-maxmind-db-to-zipfile [zipfile db-type lic-key]

  (io/spit zipfile (geoip/download-maxmind-db db-type lic-key)))


(defn
  ^{ :arglists '("(geoip/download-maxmind-db type lic-key)")
     :doc """
          Downloads the MaxMind country or city GEO IP database. Returns the
          DB as bytebuffer. The type is either :country or :city.

          The download requires your personal MaxMind license key. The
          license to download the free MaxMind GeoLite databases can be
          obtained from the [MaxMind](https://www.maxmind.com/en/home) home page.
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/download-maxmind-db :country "YOUR-MAXMIND-LIC-KEY"))
          """)
     :see-also '(
          "geoip/build-maxmind-country-db-url"
          "geoip/build-maxmind-city-db-url") }

  geoip/download-maxmind-db [type lic-key]

  (case type
    :country (io/download (geoip/build-maxmind-country-db-url lic-key) :binary true)
    :city    (io/download (geoip/build-maxmind-city-db-url lic-key) :binary true)
    (throw (ex :VncException (str "Invalid DB type " type "!")))))


(defn
  ^{ :arglists '("(geoip/build-maxmind-country-db-url lic-key)")
     :doc """
          Build the URL for the MaxMind country GEO IP database. The download
          requires a license key that is sent as part of the URL.

          The download requires your personal MaxMind license key. The
          license to download the free MaxMind GeoLite databases can be
          obtained from the [MaxMind](https://www.maxmind.com/en/home) home page.
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/build-maxmind-country-db-url "YOUR-MAXMIND-LIC-KEY"))
          """)
     :see-also '(
          "geoip/download-maxmind-db"
          "geoip/download-maxmind-db-to-zipfile") }

  geoip/build-maxmind-country-db-url [lic-key]

  (-> (str/replace-all geoip/maxmind-geoip-url "{db}" "GeoLite2-Country-CSV")
      (str/replace-all  "{key}" lic-key)))


(defn
  ^{ :arglists '("(geoip/build-maxmind-city-db-url lic-key)")
     :doc """
          Build the URL for downloading the MaxMind city GEO IP database.

          The download requires your personal MaxMind license key. The
          license to download the free MaxMind GeoLite databases can be
          obtained from the [MaxMind](https://www.maxmind.com/en/home) home page.
          """
     :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/build-maxmind-city-db-url "YOUR-MAXMIND-LIC-KEY"))
          """)
     :see-also '(
          "geoip/download-maxmind-db"
          "geoip/download-maxmind-db-to-zipfile") }

  geoip/build-maxmind-city-db-url [lic-key]

  (-> (str/replace-all geoip/maxmind-geoip-url "{db}" "GeoLite2-City-CSV")
      (str/replace-all  "{key}" lic-key)))


(defn
  ^{ :arglists '("(map-location-to-numerics loc)")
     :doc """
          Maps a location to numerical coordinates. A location is given as
          a vector of a latitude and a longitude.

          Returns a location vector with a numerical latitude and a longitude.
          """
    :examples '(
          """
          (do
            (load-module :geoip)
            (geoip/map-location-to-numerics ["51.919438", "19.145136"]))
          """) }

  geoip/map-location-to-numerics [loc]

  [(double (first loc)) (double (second loc))])



;; - private -------------------------------------------------------------------

(defn- geoip/update-stats! [key val]
  (swap! geoip/stats #(assoc % key val)))


(defn- geoip/find-ip-country [ip ip-data]
  (let [inet     (inet/inet-addr ip)
        high     (first (inet/inet-addr-to-bytes inet))
        ip-block (get ip-data high [])]
    (some (fn [x] (if (cidr/in-range? inet (first x)) (second x) nil))
          ip-block)))


(defn- geoip/parse-google-countries-csv [csv]
  ;; Format Google country location CSV:
  ;;
  ;; country,latitude,longitude,name
  ;; AD,42.546245,1.601554,Andorra
  ;; BE,50.503887,4.469936,Belgium
  ;;
  ;; returns { "AD" [42.546245, 1.601554]
  ;;           "BE" [50.503887, 4.469936] }
  (->> (csv/read csv)
       (map (juxt #(first %) #(vector (second %) (third % ))))  ; [iso, [lat, lon]]
       (into {})))


(defn- geoip/unzip-entry [zip entry-name]
 (let [entry (->> (io/zip-list-entry-names zip)
                  (filter #(str/ends-with? % entry-name))
                  (first))]
   (bytebuf-to-string (io/unzip zip entry) :utf-8)))
