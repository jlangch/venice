;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; JDBC core utils

;;;; See: 
;;;; https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html


(ns jdbc-core)

(load-module :ascii-table)

(import :com.github.jlangch.venice.TransactionException)

(import :java.sql.DriverManager)
(import :java.sql.Connection)
(import :java.sql.Statement)
(import :java.sql.PreparedStatement)
(import :java.sql.ResultSet)
(import :java.sql.ResultSetMetaData)
(import :java.sql.Types)
(import :java.sql.Clob)
(import :java.sql.Blob)



;; -----------------------------------------------------------------------------
;; Create / Drop database
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create-database conn database)"
          "(create-database conn database force)" )
     :doc """
          Creates a new database. If force flag is true drops the database first
          if it exists. 
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "pg" "pg")]
              (jdbc/create-database conn "test")))
          """,
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "pg" "pg")]
              (jdbc/create-database conn "test" true)))
          """) 
     :see-also '(
          "jdbc-core/drop-database" ) }

  create-database 

  ([conn database]
    (create-database conn database false))

  ([conn database force]
    (assert (instance-of? :Connection conn))
    (assert (string? database))
    (assert (boolean? force))
    (when force
      (drop-database conn database))
    (try-with [st (create-statement conn)]
      (execute st (str "CREATE DATABASE " database)))))


(defn 
  ^{ :arglists '(
          "(drop-database conn database)"
          "(drop-database conn database force)" )
     :doc """
          Drops a database if it exists. 

          The force option will attempt to terminate all existing connections 
          to the database.

          *Note: The force option is supported for PostgreSQL only and disconnects
          all connections prior to dropping the database!*
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "pg" "pg")]
              (jdbc/drop-database conn "test")))
          """) 
     :see-also '(
          "jdbc-core/create-database" ) }

  drop-database

  ([conn database]
    (drop-database conn database false))
      
  ([conn database force]
    (assert (instance-of? :Connection conn))
    (assert (string? database))
    (assert (boolean? force))
    
    (try-with [st (create-statement conn)]
      (if (postgresql? conn)
        (execute st (str/format "DROP DATABASE IF EXISTS %s%s"
                                database
                                (if force " FORCE" "")))
        (if force
          (throw (ex :VncException """
                                   Dropping a database with force flag true is \
                                   only supported for PostgreSQL yet!
                                   """))
          (execute st (str/format "DROP DATABASE IF EXISTS %s" database)))))))


(defn 
  ^{ :arglists '(
          "(postgresql? conn)" )
     :doc """
          Returns true if 'conn' is a PostgreSQL connection else false.
          """ }

  postgresql? [conn]

  (assert (instance-of? :Connection conn))

  (let [db-meta (meta-data conn)]
    (str/equals-ignore-case? "PostgreSQL" (:product-name db-meta))))




;; -----------------------------------------------------------------------------
;; Connection 
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(closed? conn)" )
     :doc """
          Returns true the connections is closed else false.
          """ }

  closed? [conn]

  (assert (instance-of? :Connection conn))
  (. conn :isClosed))



;; -----------------------------------------------------------------------------
;; Transactions 
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(tx-isolation conn)" )
     :doc """
          Returns transaction isolation level of the connection

          Levels:

            * `:tx-none`
            * `:tx-read-commited`
            * `:tx-read-uncommited`
            * `:tx-repeatable-read`
            * `:tx-serializable`
          """
     :examples '(
          """
          (jdbc-core/tx-isolation conn)
          """) 
     :see-also '(
          "jdbc-core/tx-isolation!"
          "jdbc-core/auto-commit?"
          "jdbc-core/auto-commit!"
          "jdbc-core/commit!"
          "jdbc-core/rollback!" ) }

  tx-isolation [conn]

  (assert (instance-of? :Connection conn))

  (let [level  (. conn :getTransactionIsolation)]
    (get (map-invert tx-isolation-levels) level level)))


(defn 
  ^{ :arglists '(
          "(tx-isolation! conn level)" )
     :doc """
          Set the transaction isolation level for the connection

          Levels:
          
            * `:tx-none`
            * `:tx-read-commited`
            * `:tx-read-uncommited`
            * `:tx-repeatable-read`
            * `:tx-serializable`
          """
     :examples '(
          """
          (jdbc-core/tx-isolation! conn :tx-repeatable-read)
          """) 
     :see-also '(
          "jdbc-core/tx-isolation"
          "jdbc-core/auto-commit?"
          "jdbc-core/auto-commit!"
          "jdbc-core/commit!"
          "jdbc-core/rollback!" ) }

  tx-isolation! [conn level]

  (assert (instance-of? :Connection conn))
  (assert (or (long? level) (keyword? level)))
  (if (long? level)
    (. conn :setTransactionIsolation level)
    (if-let [l (get tx-isolation-levels level)]
      (. conn :setTransactionIsolation l)
      (throw (ex :VncException "Invalid Tx isolation level '~{level}'")))))


(defn 
  ^{ :arglists '(
          "(auto-commit? conn)" )
     :doc """
          Returns true if auto commit is enabled on the connection else false
          """
     :examples '(
          """
          (jdbc-core/auto-commit? conn)
          """) 
     :see-also '(
          "jdbc-core/tx-isolation"
          "jdbc-core/tx-isolation!"
          "jdbc-core/auto-commit!"
          "jdbc-core/commit!"
          "jdbc-core/rollback!" ) }

  auto-commit? [conn]
  
  (assert (instance-of? :Connection conn))
  (. conn :getAutoCommit))


(defn 
  ^{ :arglists '(
          "(auto-commit! conn on)" )
     :doc """
          Activate/Deactivate auto commit on a connection
          """
     :examples '(
          """
          (jdbc-core/auto-commit! conn true)
          (jdbc-core/auto-commit! conn false)
          (jdbc-core/auto-commit! conn :on)
          (jdbc-core/auto-commit! conn :off)
          """) 
     :see-also '(
          "jdbc-core/tx-isolation"
          "jdbc-core/tx-isolation!"
          "jdbc-core/auto-commit?"
          "jdbc-core/commit!"
          "jdbc-core/rollback!" ) }

  auto-commit! [conn on]
  
  (assert (instance-of? :Connection conn))
  (assert (or (boolean? on) (keyword? on)))
  (case on
    true    (. conn :setAutoCommit true)
    false   (. conn :setAutoCommit false)
    :on     (. conn :setAutoCommit true)
    :off    (. conn :setAutoCommit false)
    (throw (ex :VncException "auto-commit! values are {true, false, :on, :off}"))))


(defn 
    ^{ :arglists '(
          "(commit! conn)" )
     :doc """
          Commit the current transaction on the connection
          """
     :examples '(
          """
          (jdbc-core/auto-commit! conn false)
          """) 
     :see-also '(
          "jdbc-core/tx-isolation"
          "jdbc-core/tx-isolation!"
          "jdbc-core/auto-commit?"
          "jdbc-core/auto-commit!"
          "jdbc-core/rollback!" ) }

  commit! [conn]
  
  (assert (instance-of? :Connection conn))
  (. conn :commit))


(defn 
    ^{ :arglists '(
          "(rollback! conn)" )
     :doc """
          Rollback the current transaction on the connection
          """
     :examples '(
          """
          (jdbc-core/rollback! conn)
          """) 
     :see-also '(
          "jdbc-core/tx-isolation"
          "jdbc-core/tx-isolation!"
          "jdbc-core/auto-commit?"
          "jdbc-core/auto-commit!"
          "jdbc-core/commit!" ) }

  rollback! [conn]
  
  (assert (instance-of? :Connection conn))
  (. conn :rollback))


;; -----------------------------------------------------------------------------
;; Templates 
;; -----------------------------------------------------------------------------

(defmacro
  ^{ :arglists '(
          "(with-conn conn & forms)")
     :doc """
          Sets the thread local var *conn* to the passed connection,
          wraps the connection in a `try-with` form to close the connection 
          automatically at the end of the template and runs the forms.

          The forms have access to the connection via the *conn* thread local 
          var.

          While thread local vars may work fine (most ORMs like *Hibernate* or
          *JPA* rely on thread local vars), using Venice *Components* for 
          connection management give a cleaner and more functional architecture.
          """
     :examples '(
          """
           (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (jdbc/with-conn [conn (jdbp/create-connection "localhost" 5432 
                                                          "test" "pg" "pg")]
              (try-with [stmt (jdbc/create-statement *conn*)])
                (-> (jdbc/execute-update stmt "INSERT INTO foo VALUES(100,3.1456)")
                    (jdbc-core/print-query-result)))))
         """) 
     :see-also '(
          "jdbc-core/with-tx" ) }

  with-conn [conn & forms]

  `(binding [*conn* conn] 
     (assert (core/instance-of? :java.sql.Connection *conn*))
     (try-with [conn# *conn*]  
       (do ~@forms))))


(defmacro
  ^{ :arglists '(
          "(with-tx conn & forms)")
     :doc """
          Runs the forms within a JDBC transaction, commits the transaction
          at the end or rolls the transaction back if the forms throw an 
          exception. 

          Restores the auto-commit mode on the connection at the end of the
          successful or failed transaction.

          Throws a `:com.github.jlangch.venice.TransactionException` after 
          rolling back.
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")]
              (jdbc/with-tx conn
                (try-with [stmt (jdbc/create-statement conn)])
                  (->  (jdbc/execute-update stmt "INSERT INTO foo VALUES(100,3.1415)")
                       (jdbc-core/print-query-result))))))
          """) 
     :see-also '(
          "jdbc-core/with-conn" ) }

  with-tx [conn & forms]

  `(binding [conn# ~conn] 
     (assert (core/instance-of? :java.sql.Connection conn#))
     (let [auto-commit# (jdbc-core/auto-commit? conn#)]
       (try
         (jdbc-core/auto-commit! conn# :off)
         (do ~@forms)
         (jdbc-core/commit! conn#)
         (catch :Exception e
           (try (jdbc-core/rollback! conn#) (catch :Exception _))
           (throw (ex :TransactionException 
                      "JDBC Transaction failed => rolled back!" 
                      e)))
         (finally 
           (jdbc-core/auto-commit! conn# auto-commit#))))))



;; -----------------------------------------------------------------------------
;; Statements 
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create-statement conn)" )
     :doc """
          Create a statement
          """
     :examples '(
          """
          (jdbc-core/create-statement conn)
          """) 
     :see-also '(
          "jdbc-core/prepare-statement" ) }

  create-statement [conn]
  
  (assert (instance-of? :Connection conn))
  (. conn :createStatement))


(defn 
  ^{ :arglists '(
          "(prepare-statement conn sql)"
          "(prepare-statement conn sql & options)" )
     :doc """
          Create a prepared statement

          ¶*Options:*

          | [![width: 10%]] | [![width: 90%]] |
          | :gen-key  | Provide access to the generated keys. ¶\
                        The generated keys can be retrieved by a call \
                        to `(jdbc-core/generated-keys stmt)`. ¶¶\
                        Values: ¶\
                        `true` \u00A0\u00A0\u00A0\u00A0Return all generated keys ¶\
                        `["id"]` Return only the generated keys in the specified \
                        list|
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn  (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       pstmt (jdbc/prepare-statement conn "INSERT INTO foo VALUES(?,?)")]
              (jdbc/ps-int pstmt 1 1I)
              (jdbc/ps-string pstmt 2 "Harry Potter")
              (jdbc/execute pstmt)))
          """) 
     :see-also '(
          "jdbc-core/create-statement" ) }

  prepare-statement 
  
  ([conn sql]
    (assert (instance-of? :Connection conn))
    (assert (string? sql))
    (. conn :prepareStatement sql))

  ([conn sql & options]
    (assert (instance-of? :Connection conn))
    (assert (string? sql))
    (let [opts    (apply hash-map options)
          gen-key (:gen-key opts false)]
      (if (boolean? gen-key)
        (if (true? gen-key)
          (. conn :prepareStatement sql (. :Statement :RETURN_GENERATED_KEYS))
          (. conn :prepareStatement sql))
        (case (type (first gen-key))
          :core/string (. conn :prepareStatement sql (string-array gen-key))
          :core/int    (. conn :prepareStatement sql (int-array gen-key))
          :core/long   (->> (map int cols)
                            (int-array)
                            (. conn :prepareStatement sql))
          (throw (ex :VncException 
                    "Invalid gen-key value. Must a string, int, or long!")))))))



;; -----------------------------------------------------------------------------
;; Execute queries 
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(execute pstmt)"
          "(execute stmt sql)" )
     :doc """
          Executes the SQL statement in prepared statement or executes an SQL
          statement on a JDBC statement.
          """
     :examples '(
          """
          ;; using a prepared statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn  (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       pstmt (jdbc/prepare-statement conn "INSERT INTO foo VALUES(?,?)")]
              (jdbc/ps-int pstmt 1 1I)
              (jdbc/ps-string pstmt 2 "Harry Potter")
              (jdbc/execute pstmt)))
          """,
          """
          ;; running an SQL statement on a JDBC statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)]
              (jdbc/execute stmt "INSERT INTO foo VALUES(1, \"Harry Potter\")")))
          """) 
     :see-also '(
          "jdbc-core/execute-query"
          "jdbc-core/execute-query*"
          "jdbc-core/execute-update" ) }

  execute 

  ([pstmt]
    (assert (instance-of? :PreparedStatement pstmt))
    (. pstmt :execute)) 

  ([stmt sql]
    (assert (instance-of? :Statement stmt))
    (. stmt :execute sql)))


(defn 
  ^{ :arglists '(
          "(execute-query pstmt)"
          "(execute-query stmt sql)" )
     :doc """
          Executes the SQL statement in prepared statement or executes an SQL
          statement on a JDBC statement or connection.

          Returns the JDBC `:java.sql.ResultSet` parsed as map with the column 
          names and a vector of row values. 

          Row values may be of type:

          * string
          * boolean
          * int
          * long
          * double
          * decimal
          * :java.sql.Clob
          * :java.sql.Blob

          ```
          { :col-names ["name" "age"]
            :rows [ ["john" 29] 
                    ["mary" 32] ] }
          ```
          """
     :examples '(
          """
          ;; using a prepared statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn  (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       pstmt (jdbc/prepare-statement conn "SELECT * FROM foo")]
              (jdbc/execute-query pstmt)))
          """,
          """
          ;; running an SQL statement on a JDBC statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)]
              (->  (jdbc/execute-query stmt "SELECT * FROM foo")
                   (jdbc-core/print-query-result))))
          """) 
     :see-also '(
          "jdbc-core/render-query-result"
          "jdbc-core/print-query-result"
          "jdbc-core/execute"
          "jdbc-core/execute-update" ) }

  execute-query 

  ([pstmt]
    (assert (instance-of? :PreparedStatement pstmt))
    (try-with [rs (. pstmt :executeQuery)]
      (collect-result-set rs)))

  ([stmt sql]
    (assert (instance-of? :Statement stmt))
    (try-with [rs (. stmt :executeQuery sql)]
      (collect-result-set rs))))
 

(defn 
  ^{ :arglists '(
          "(execute-query* pstmt)"
          "(execute-query* stmt sql)" )
     :doc """
          Executes the SQL statement in prepared statement or executes an SQL
          statement on a JDBC statement.

          Returns a JDBC `:java.sql.ResultSet`. 

          *Note: The returned ResultSet has to be closed after use!*
          """
     :examples '(
          """
          ;; using a prepared statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn  (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       pstmt (jdbc/prepare-statement conn "SELECT * FROM foo")
                       rs    (jdbc/execute-query* pstmt)]
              (while (jdbc/rs-next! rs)
                (println (jdbc/rs-string rs 1)))))
          """,
          """
          ;; running an SQL statement on a JDBC statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)
                       rs   (jdbc/execute-query* stmt "SELECT * FROM foo")]
              (while (jdbc/rs-next! rs)
                (println (jdbc/rs-string rs 1)))))
          """,
          """
          ;; running an SQL statement on a JDBC statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)
                       rs   (jdbc/execute-query* stmt "SELECT * FROM foo")]
              (jdbc/print-query-result rs)))
          """) 
     :see-also '(
          "jdbc-core/collect-result-set"
          "jdbc-core/render-query-result"
          "jdbc-core/print-query-result"
          "jdbc-core/execute"
          "jdbc-core/execute-query"
          "jdbc-core/execute-update" ) }

  execute-query*

  ([pstmt]
    (assert (instance-of? :PreparedStatement pstmt))
    (. pstmt :executeQuery))

  ([stmt sql]
    (assert (instance-of? :Statement stmt))
    (. stmt :executeQuery sql)))


(defn 
  ^{ :arglists '(
          "(execute-update pstmt)"
          "(execute-update stmt sql & options)" )
     :doc """
          Executes the SQL statement in prepared statement or executes an SQL
          statement on a JDBC statement.

          Returns an integer value that reports the number of rows affected by 
          the SQL statement.

          ¶*Options:*

          | [![width: 10%]] | [![width: 90%]] |
          | :gen-key  | Provide access to the generated keys. ¶\
                        The generated keys can be retrieved by a call \
                        to `(jdbc-core/generated-keys stmt)`. ¶¶\
                        Values: ¶\
                        `true` \u00A0\u00A0\u00A0\u00A0Return all generated keys ¶\
                        `["id"]` Return only the generated keys in the specified \
                        list|
          """
     :examples '(
          """
          ;; using a prepared statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn  (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       pstmt (jdbc/prepare-statement conn "INSERT INTO foo VALUES(?,?)")]
              (jdbc/ps-int pstmt 1 1I)
              (jdbc/ps-string pstmt 2 "Harry Potter")
              (jdbc/execute-update pstmt)))
          """,
          """
          ;; running an SQL statement on a JDBC statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)]
              (jdbc/execute-update stmt "INSERT INTO foo VALUES(1, \"Harry Potter\")")))
          """) 
     :see-also '(
          "jdbc-core/execute"
          "jdbc-core/execute-query"
          "jdbc-core/execute-query*" ) }
  
  execute-update 

  ([pstmt]
    (assert (instance-of? :PreparedStatement pstmt))
    (. pstmt :executeUpdate))

  ([stmt sql]
    (assert (instance-of? :Statement stmt))
    (assert (not (instance-of? :PreparedStatement stmt)))
    (. stmt :executeUpdate sql))

  ([stmt sql & options]
    (assert (instance-of? :Statement stmt))
    (assert (not (instance-of? :PreparedStatement stmt)))
    (let [opts    (apply hash-map options)
          gen-key (:gen-key opts false)]
      (if (boolean? gen-key)
        (if (true? gen-key)
          (. stmt :executeUpdate sql (. :Statement :RETURN_GENERATED_KEYS))
          (. stmt :executeUpdate sql))
        (case (type (first gen-key))
          :core/string (. stmt :executeUpdate sql (string-array gen-key))
          :core/int    (. stmt :executeUpdate sql (int-array gen-key))
          :core/long   (->> (map int cols)
                            (int-array)
                            (. stmt :executeUpdate sql))
          (throw (ex :VncException 
                      """
                     Invalid gen-key column values. Must a collection \
                     of string, int, or long!
                     """)))))))


(defn
  ^{ :arglists '(
          "(count-rows conn table)" )
     :doc """
          Returns the row count of a table.
          """
     :examples '(
          """
          ;; using a prepared statement
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn  (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")]
              (jdbc/count-rows conn "Albums")))
          """) 
     :see-also '(
          "jdbc-core/execute-query") }

  count-rows [conn table]

  (assert (instance-of? :Connection conn))
  (assert (string? table))

  (try-with [stmt (create-statement conn)]
    (try-with [rs (execute-query* stmt "SELECT COUNT(*) FROM ~{table}")]
      (if (rs-next! rs)
        (rs-int rs 1)
        (throw (ex :VncException 
                    """
                    Missing result from SELECT COUNT(*) FROM <table>
                    """))))))


(defn 
  ^{ :arglists '(
          "(collect-result-set rs)" )
     :doc """
          Collects data form a JDBC `:java.sql.ResultSet` returns it as map with 
          the column names and a vector of row values. 

          Row values may be of type:

          * string
          * boolean
          * int
          * long
          * double
          * decimal
          * :java.sql.Clob
          * :java.sql.Blob

          ```
          { :col-names ["name" "age"]
            :rows [ ["john" 29] 
                    ["mary" 32] ] }
          ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)
                       rs   (jdbc/execute-query* stmt "SELECT * FROM foo")]
              (jdbc/collect-result-set rs)))
          """) 
     :see-also '(
          "jdbc-core/render-query-result"
          "jdbc-core/print-query-result"
          "jdbc-core/execute"
          "jdbc-core/execute-query"
          "jdbc-core/execute-update" ) }

  collect-result-set [rs]

  (assert (instance-of? :ResultSet rs))

  (let [rs-meta-data  (. rs :getMetaData)
        col-count     (. rs-meta-data :getColumnCount)]
    (loop [rows []]
      (if (rs-next! rs)
        (recur (conj rows (row-values rs col-count)))
        (let [cm (col-meta rs-meta-data)]
          { :col-names (map :name cm) 
            :col-meta  cm
            :rows rows })))))


(defn- col-meta [rs-meta-data]
 (assert (instance-of? :ResultSetMetaData rs-meta-data))
 (let [count  (. rs-meta-data :getColumnCount)]
  (loop [info [], col 1]
    (if (<= col count)
      (let [name     (. rs-meta-data :getColumnName col)
            sql-type (. rs-meta-data :getColumnType col)
            type     (get type-map sql-type :unknown)
            numeric  (numeric-type? type)]
        (recur (conj info {:name name, :type type :numeric numeric}) (inc col)))
        info))))


(defn- row-values [rs col-count]
  (assert (instance-of? :ResultSet rs))
  (loop [values [], col 1]
    (if (<= col col-count)
      (let [val (map-sql-value (. rs :getObject col))]  
        (recur (conj values val) (inc col)))
        values)))


(defn- map-sql-value [val]
  (cond 
    (sql-date? val)       (. val :toLocalDate)
    (sql-timestamp? val)  (. val :toLocalDateTime)
    (sql-time? val)       (. val :toLocalTime)
    :else                 val))


(defn- sql-date? [val]
  (instance-of? :java.sql.Date val))

(defn- sql-timestamp? [val]
  (instance-of? :java.sql.Timestamp val))

(defn- sql-time? [val]
  (instance-of? :java.sql.Time val))


;; -----------------------------------------------------------------------------
;; Generated Keys
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(generated-keys stmt)" )
     :doc """
          Return a vector with generated keys.
          """
     :examples '(
          """
          (jdbc-core/generated-keys stmt)
          """) 
     :see-also '(
          "jdbc-core/create-statement"
          "jdbc-core/prepare-statement" ) }

  generated-keys [stmt]
  
  (assert (or (instance-of? :Statement stmt)
              (instance-of? :PreparedStatement stmt)))

  (try-with [rs (. stmt :getGeneratedKeys)]
    (collect-result-set rs)))

;;    (loop [keys []]
;;      (if (rs-next! rs)
;;        (recur (conj keys (map-sql-value (. rs :getObject 1))))
;;        keys))))



;; -----------------------------------------------------------------------------
;; Prepared statement
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(ps-clear-parameters ps)" )
     :doc """
          Clears the prepared statment parameter.
          """
     :examples '(
          "(jdbc-core/ps-clear-parameters ps)") 
     :see-also '(
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-clear-parameters [ps]

  (assert (instance-of? :PreparedStatement ps))
  (. ps :clearParameters))


(defn 
  ^{ :arglists '(
          "(ps-blob ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given blob value.

          The value may be a `bytebuf` or a `:java.io.InputStream`.
          """
     :examples '(
          "(jdbc-core/ps-decimal ps 1 (bytebuf [1 2 3]))"
          "(jdbc-core/ps-decimal ps 1 (io/bytebuf-in-stream (bytebuf [1 2 3])))") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-blob [ps idx val]

  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (bytebuf? val) (io/in-stream? val)))
  (cond 
    (nil? val)          (. ps :setBlob (int idx) nil)
    (bytebuf? val)      (. ps :setBlob (int idx) (io/bytebuf-in-stream val))
    (io/in-stream? val) (. ps :setBlob (int idx) val)))


(defn 
  ^{ :arglists '(
          "(ps-clob ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given clob value.

          The value may be a `string` or a `:java.io.Reader`.
          """
     :examples '(
          "(jdbc-core/ps-decimal ps 1 \"123456\")"
          "(jdbc-core/ps-decimal ps 1 (io/string-reader \"123456\"))" ) 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-clob [ps idx val]

  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (string? val) (io/reader? val)))
  (cond 
    (nil? val)        (. ps :setClob (int idx) nil)
    (string? val)     (. ps :setClob (int idx) (io/string-reader val))
    (io/reader? val)  (. ps :setClob (int idx) val)))


(defn 
  ^{ :arglists '(
          "(ps-decimal ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given decimal value.
          """
     :examples '(
          "(jdbc-core/ps-decimal ps 1 3.1415M)") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-decimal [ps idx val]

  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (decimal? val)))
  (. ps :setBigDecimal (int idx) val))


(defn 
  ^{ :arglists '(
          "(ps-boolean ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given boolean value.
          """
     :examples '(
          "(jdbc-core/ps-boolean ps 1 true)") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }
  
  ps-boolean [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (boolean? val)))
  (. ps :setBoolean (int idx) val))


(defn 
  ^{ :arglists '(
          "(ps-double ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given double value.
          """
     :examples '(
          "(jdbc-core/ps-double ps 1 1.24)") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }
  
  ps-double [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (double? val)))
  (. ps :setDouble (int idx) val))


(defn 
  ^{ :arglists '(
          "(ps-float ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given double value.
          """
     :examples '(
          "(jdbc-core/ps-float ps 1 1.24)") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }
  
  ps-float [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (double? val)))
  (. ps :setFloat (int idx) val))


(defn 
  ^{ :arglists '(
          "(ps-int ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given int value.
          """
     :examples '(
          "(jdbc-core/ps-int ps 1 10I)") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-int [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (int? val) (long? val)))
  (. ps :setInt (int idx) (int val)))


(defn 
  ^{ :arglists '(
          "(ps-long ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given long value.
          """
     :examples '(
          "(jdbc-core/ps-long ps 1 10)") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-long [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (int? val) (long? val)))
  (. ps :setLong (int idx) (long val)))


(defn 
  ^{ :arglists '(
          "(ps-string ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given string value.
          """
     :examples '(
          "(jdbc-core/ps-string ps 1 \"abcdef\")") 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-date"
          "jdbc-core/ps-timestamp" ) }

  ps-string [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (string? val)))
  (. ps :setString (int idx) val))


(defn 
  ^{ :arglists '(
          "(ps-date ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given date value.
          """
     :examples '(
          "(jdbc-core/ps-date ps 1 (time/date))"
          "(jdbc-core/ps-date ps 1 (time/local-date 2020 1 1))"
          "(jdbc-core/ps-date ps 1 (time/local-date-time 2020 1 1 14 0 0))"
          "(jdbc-core/ps-date ps 1 (time/zoned-date-time \"UTC\" 2020 1 1 14 0 0))" ) 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-timestamp" ) }

  ps-date [ps idx val]

  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) (time/date? val)  (time/local-date? val)
              (time/local-date-time? val)  (time/zoned-date-time? val)))
  (if (nil? val)
    (. ps :setDate (int idx) nil)
    (->> (time/format val "yyyy-mm-dd")
         (. :java.sql.Date :valueOf)
         (. ps :setDate (int idx)))))


(defn 
  ^{ :arglists '(
          "(ps-timestamp ps idx val)" )
     :doc """
          Sets the prepared statment parameter to the given timestamp value.
          """
     :examples '(
          "(jdbc-core/ps-timestamp ps 1 (time/date))"
          "(jdbc-core/ps-timestamp ps 1 (time/local-date 2020 1 1))"
          "(jdbc-core/ps-timestamp ps 1 (time/local-date-time 2020 1 1 14 0 0))"
          "(jdbc-core/ps-timestamp ps 1 (time/zoned-date-time \"UTC\" 2020 1 1 14 0 0))" ) 
     :see-also '(
          "jdbc-core/ps-clear-parameters"
          "jdbc-core/ps-blob"
          "jdbc-core/ps-clob"
          "jdbc-core/ps-decimal"
          "jdbc-core/ps-boolean"
          "jdbc-core/ps-double"
          "jdbc-core/ps-float"
          "jdbc-core/ps-int"
          "jdbc-core/ps-long"
          "jdbc-core/ps-string"
          "jdbc-core/ps-date" ) }
  
  ps-timestamp [ps idx val]
  
  (assert (instance-of? :PreparedStatement ps))
  (assert (or (int? idx) (long? idx)))
  (assert (pos? idx))
  (assert (or (nil? val) 
              (time/date? val) 
              (time/local-date-time? val)  
              (time/zoned-date-time? val)))
  (cond 
    (nil? val)                  (. ps :setTimestamp (int idx) nil)
    (time/date? val)            (->> (time/local-date-time val)
                                     (. :java.sql.Timestamp :valueOf)
                                     (. ps :setTimestamp (int idx)))
    (time/local-date-time? val) (->> (. :java.sql.Timestamp :valueOf val)
                                     (. ps :setTimestamp (int idx)))
    (time/zoned-date-time? val) (->> (time/local-date-time val)
                                     (. :java.sql.Timestamp :valueOf)
                                     (. ps :setTimestamp (int idx)))
    :else (throw (ex :VncException "Cannot convert ~(type val) to :java.sql.Timestamp"))))



;; -----------------------------------------------------------------------------
;; Result Set
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(rs-first! rs)" )
     :doc """
          Moves the cursor to the first row in this ResultSet object.

          Returns true if the cursor is on a valid row; false if there are no
          rows in the result set
          """
     :examples '(
          "(jdbc-core/rs-first! rs)" ) 
     :see-also '(
          "jdbc-core/rs-next!"
          "jdbc-core/rs-last!" ) }

  rs-first! [rs]

  (. rs :first))


(defn 
  ^{ :arglists '(
          "(rs-next! rs)" )
     :doc """
          Moves the cursor forward one row from its current position.
          A ResultSet cursor is initially positioned before the first row;
          the first call to the method next makes the first row the current
          row; the second call makes the second row the current row, and so on. 

          Returns true if the new current row is valid; false if there are no
          more rows
          """
     :examples '(
          "(jdbc-core/rs-next! rs)" ) 
     :see-also '(
          "jdbc-core/rs-first!"
          "jdbc-core/rs-last!" ) }

  rs-next! [rs]
  
  (. rs :next))


(defn 
  ^{ :arglists '(
          "(rs-last! rs)" )
     :doc """
          Moves the cursor to the last row in this ResultSet object.

          Returns true if the cursor is on a valid row; false if there are no
          rows in the result set
          """
     :examples '(
          "(jdbc-core/rs-last! rs)" ) 
     :see-also '(
          "jdbc-core/rs-first!"
          "jdbc-core/rs-next!" ) }

  rs-last! [rs]
  
  (. rs :last))


(defn 
  ^{ :arglists '(
          "(rs-string rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `string`.
          """
     :examples '(
          "(jdbc-core/rs-string rs 1)",
          "(jdbc-core/rs-string rs \"firstName\")") 
     :see-also '(
         "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-string [rs name-or-index]

  (. rs :getString name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-boolean rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `boolean`.
          """
     :examples '(
          "(jdbc-core/rs-boolean rs 1)",
          "(jdbc-core/rs-boolean rs \"openBill\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-boolean [rs name-or-index]

  (. rs :getBoolean name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-int rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `int`.
          """
     :examples '(
          "(jdbc-core/rs-int rs 1)",
          "(jdbc-core/rs-int rs \"age\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-int [rs name-or-index]

  (. rs :getInt name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-long rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `long`.
          """
     :examples '(
          "(jdbc-core/rs-long rs 1)",
          "(jdbc-core/rs-long rs \"age\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-long [rs name-or-index]

  (. rs :getLong name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-float rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `double`.
          """
     :examples '(
          "(jdbc-core/rs-float rs 1)",
          "(jdbc-core/rs-float rs \"weight\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-float[rs name-or-index]
  
  (. rs :getFloat name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-double rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `double`.
          """
     :examples '(
          "(jdbc-core/rs-double rs 1)",
          "(jdbc-core/rs-double rs \"weight\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-double [rs name-or-index]

  (. rs :getDouble name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-decimal rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `decimal`.
          """
     :examples '(
          "(jdbc-core/rs-decimal rs 1)",
          "(jdbc-core/rs-decimal rs \"billAmount\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-decimal[rs name-or-index]
  
  (. rs :getBigDecimal name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-date rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `:java.time.LocalDate`.
          """
     :examples '(
          "(jdbc-core/rs-date rs 1)",
          "(jdbc-core/rs-date rs \"birthDate\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-date [rs name-or-index]

  (map-sql-val (. rs :getDate name-or-index)))


(defn 
  ^{ :arglists '(
          "(rs-timestamp rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `:java.time.LocalDateTime`.
          """
     :examples '(
          "(jdbc-core/rs-timestamp rs 1)",
          "(jdbc-core/rs-timestamp rs \"createdAt\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-timestamp [rs name-or-index]

  (map-sql-val (. rs :getTimestamp name-or-index)))


(defn 
  ^{ :arglists '(
          "(rs-time rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `:java.time.LocalTime`.
          """
     :examples '(
          "(jdbc-core/rs-time rs 1)",
          "(jdbc-core/rs-time rs \"time\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-time [rs name-or-index]

  (map-sql-val (. rs :getTime name-or-index)))


(defn 
  ^{ :arglists '(
          "(rs-clob rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `:java.sql.Clob`.
          """
     :examples '(
          "(jdbc-core/rs-clob rs 1)",
          "(jdbc-core/rs-clob rs \"remarks\")") 
     :see-also '(
          "jdbc-core/clob-length"
          "jdbc-core/clob-reader" 
          "jdbc-core/clob-free"
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-blob"
          "jdbc-core/rs-object" ) }

  rs-clob [rs name-or-index]

  (. rs :getClob name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-blob rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object as a `:java.sql.Blob`.
          """
     :examples '(
          "(jdbc-core/rs-blob rs 1)",
          "(jdbc-core/rs-blob rs \"data\")") 
     :see-also '(
          "jdbc-core/blob-length"
          "jdbc-core/blob-in-stream"
          "jdbc-core/blob-bytebuf"
          "jdbc-core/blob-free"
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-object" ) }

  rs-blob [rs name-or-index]

  (. rs :getBlob name-or-index))


(defn 
  ^{ :arglists '(
          "(rs-object rs name-or-index)" )
     :doc """
          Retrieves the value of the designated column in the current row of 
          the ResultSet object converted to`string`, `boolean`, `int`, `long`, 
          `double`, `decimal`, `:java.time.LocalDate`, `:java.time.LocalDateTime`,
          `:java.time.LocalTime`, `:java.sql.Clob`, or `:java.sql.Blob`.
          """
     :examples '(
          "(jdbc-core/rs-object rs 1)",
          "(jdbc-core/rs-object rs \"name\")") 
     :see-also '(
          "jdbc-core/rs-string"
          "jdbc-core/rs-boolean"
          "jdbc-core/rs-int"
          "jdbc-core/rs-long"
          "jdbc-core/rs-float"
          "jdbc-core/rs-double"
          "jdbc-core/rs-decimal"
          "jdbc-core/rs-date"
          "jdbc-core/rs-time"
          "jdbc-core/rs-timestamp"
          "jdbc-core/rs-clob"
          "jdbc-core/rs-blob" ) }

  rs-object [rs name-or-index]

  (map-sql-val (. rs :getObjext name-or-index)))



;; -----------------------------------------------------------------------------
;; CLOB
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(clob? val)" )
     :doc """
          Returns true if val is a:java.sql.Clob
          """
     :examples '(
          "(jdbc-core/clob? v)" ) 
     :see-also '(
          "jdbc-core/clob-length"
          "jdbc-core/clob-reader" 
          "jdbc-core/clob-free") }

  clob? [val]

  (instance-of? :Clob val))


(defn 
  ^{ :arglists '(
          "(clob-length clob)" )
     :doc """
          Returns the length of a clob
          """
     :examples '(
          "(jdbc-core/clob-length vc" ) 
     :see-also '(
          "jdbc-core/clob?"
          "jdbc-core/clob-reader"
          "jdbc-core/clob-free" ) }

  clob-length [clob]

  (assert (instance-of? :Clob clob))
  (. clob :length))


(defn 
  ^{ :arglists '(
          "(clob-reader clob)" )
     :doc """
          Returns a :java.io.Reader to read the clob data
          """
     :examples '(
          "(jdbc-core/clob-reader c)" ) 
     :see-also '(
          "jdbc-core/clob?"
          "jdbc-core/clob-length"
          "jdbc-core/clob-free" ) }

  clob-reader [clob]

  (assert (instance-of? :Clob clob))
  (. clob :getCharacterStream))


(defn 
  ^{ :arglists '(
          "(clob-free clob)" )
     :doc """
          Frees the Clob object and releases the resources the resources that
          it holds.
          """
     :examples '(
          "(jdbc-core/clob-free c)" ) 
     :see-also '(
          "jdbc-core/clob?"
          "jdbc-core/clob-length"
          "jdbc-core/clob-reader" ) }

  clob-free [clob]

  (assert (instance-of? :Clob clob))
  (. clob :free))



;; -----------------------------------------------------------------------------
;; BLOB
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(blob? val)" )
     :doc """
          Returns true if val is a:java.sql.Blob
          """
     :examples '(
          "(jdbc-core/blob? v)" ) 
     :see-also '(
          "jdbc-core/blob-length"
          "jdbc-core/blob-in-stream"
          "jdbc-core/blob-bytebuf"
          "jdbc-core/blob-free" ) }

  blob? [val]

  (instance-of? :Blob val))


(defn 
  ^{ :arglists '(
          "(blob-length blob)" )
     :doc """
          Returns the length of a blob
          """
     :examples '(
          "(jdbc-core/blob-length b)" ) 
     :see-also '(
          "jdbc-core/blob?"
          "jdbc-core/blob-in-stream"
          "jdbc-core/blob-bytebuf"
          "jdbc-core/blob-free" ) }

  blob-length [blob]

  (assert (instance-of? :Blob blob))
  (. blob :length))


(defn 
  ^{ :arglists '(
          "(blob-in-stream blob)" )
     :doc """
          Returns a :java.io.InputStream to read the blob data
          """
     :examples '(
          "(jdbc-core/blob-in-stream b)" ) 
     :see-also '(
          "jdbc-core/blob?"
          "jdbc-core/blob-length"
          "jdbc-core/blob-bytebuf"
          "jdbc-core/blob-free" ) }

  blob-in-stream [blob]

  (assert (instance-of? :Blob blob))
  (. blob :getBinaryStream))


(defn 
  ^{ :arglists '(
          "(blob-bytebuf blob)" )
     :doc """
          Returns the blob data as a bytebuf
          """
     :examples '(
          "(jdbc-core/blob-bytebuf b)" ) 
     :see-also '(
          "jdbc-core/blob?"
          "jdbc-core/blob-length"
          "jdbc-core/blob-in-stream"
          "jdbc-core/blob-free" ) }

  blob-bytebuf [blob]

  (assert (instance-of? :Blob blob))
  (. blob :getBytes 0 (. blob :length)))


(defn 
  ^{ :arglists '(
          "(blob-free blob)" )
     :doc """
          Frees the Blob object and releases the resources the resources that
          it holds.
          """
     :examples '(
          "(jdbc-core/blob-free b)" ) 
     :see-also '(
          "jdbc-core/blob?"
          "jdbc-core/blob-length"
          "jdbc-core/blob-in-stream"
          "jdbc-core/blob-bytebuf" ) }

  blob-free [blob]

  (assert (instance-of? :Blob blob))
  (. blob :free))




;; -----------------------------------------------------------------------------
;; ResultSet Data Renderer
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(render-query-result data)"
          "(render-query-result data max-col-width)" )
     :doc """
          Renders the result from an `execute-query` in an ascii table format.
          Returns an ascii table formatted string.

          The functions accepts a JDBC ':java.sql.ResultSet' or a collected
          result set as returned from `jdbc-core/collect-result-set`.

          *max-col-width* is limited to the range [15..200]
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)
                       rs   (jdbc/execute-query* stmt "SELECT * FROM foo")]
              (jdbc/render-query-result rs)))
          """) 
     :see-also '(
          "jdbc-core/collect-result-set"
          "jdbc-core/print-query-result" ) }

  render-query-result  

  ([data]
    (render-query-result data 80))

  ([data max-col-width]
    (let [min-col-width 5
          max-col-width (clamp max-col-width 15 200)
          data          (if (instance-of? :ResultSet data)
                          (collect-result-set data) 
                          data)
          col-names     (:col-names data)
          col-meta      (:col-meta  data)
          rows          (:rows data)
          rows          (map (fn [r] (map (fn [v] (render-cell v max-col-width)) r)) 
                             rows)
          widths        (col-widths col-names rows min-col-width max-col-width)
          headers       (map (fn [v] (let [col-meta (first v)
                                           width    (second v)
                                           idx      (third v)
                                           name     (:name col-meta)
                                           align    (if (and (> idx 1) (:numeric col-meta)) 
                                                      :right 
                                                      :left)]
                                       (hash-map :header { :text     name
                                                           :align    :left 
                                                           :overflow :newline }
                                                 :body   {:align  align}
                                                 :width width)))
                            (map vector col-meta widths (lazy-seq 1 inc))) ]
      (ascii-table/render headers rows :standard-database 0))))


(defn 
  ^{ :arglists '(
          "(print-query-result data)"
          "(print-query-result data max-col-width)" )
     :doc """
          Prints the result from a `execute-query` in an ascii table format.
          Returns `nil`.

          The functions accepts a JDBC ':java.sql.ResultSet' or a collected
          result set as returned from `jdbc-core/collect-result-set`.

          *max-col-width* is limited to the range [5..200]
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])

            (try-with [conn (jdbp/create-connection "localhost" 5432 "test" "pg" "pg")
                       stmt (jdbc/create-statement conn)
                       rs   (jdbc/execute-query* stmt "SELECT * FROM foo")]
              (jdbc/print-query-result rs)))
          """) 
     :see-also '(
          "jdbc-core/collect-result-set"
          "jdbc-core/render-query-result" ) }

  print-query-result 
  
  ([data]
    (println (render-query-result data)))

  ([data max-col-width]
    (println (render-query-result data max-col-width))))


(defn- render-cell [v max-col-width]
  (let [max-len (* 3 max-col-width)]  ;; a cell is limited to max 3 lines
    (cond 
      (nil? v)                   "<null>"
      (string? v)                (str/truncate v max-len "...")
      (boolean? v)               (if v "true" "false")
      (char? v)                  (str v)
      (long? v)                  (str v)
      (int? v)                   (str (long v))
      (double? v)                (str v)
      (decimal? v)               (str v)
      (time/date? v)             (str (time/local-date-time v))
      (time/local-date? v)       (str v)
      (time/local-date-time? v)  (str v)
      (java-obj? v)              (let [clazz (class-name (class-of v))]
                                    (case clazz
                                      "org.postgresql.util.PGobject"  (str v)
                                      (str "[" clazz "]")))
      :else                      (str "[" (type v) "]"))))


(defn- col-widths [col-names rows min-with max-width]
  (let [matrix (conj rows col-names)]
    (->> (map (fn [r] (map (fn [v] (if (nil? v) 0 (count (str v)))) r)) matrix)
         (transpose)
         (map #(apply max %))
         (map #(clamp % min-with max-width)))))


(defn- transpose [matrix]
  (apply map vector matrix))


(defn- PGobject? [v]
  (= "org.postgresql.util.PGobject" (class-name (class-of v))))



;; -----------------------------------------------------------------------------
;; Metadata
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(meta-data conn)" )
     :doc """
          List the meta data of a database

          Example PostgreSQL meta data:

          ```
          { :product-name "PostgreSQL" 
            :driver-name "PostgreSQL JDBC Driver"
            :driver-version "42.7.3" 
            :product-version "16.2 (Debian 16.2-1.pgdg120+2)" }
          ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "pg" "pg")]
              (jdbc/meta-data conn)))
          """) }

  meta-data [conn]

  (try-with [md  (. conn :getMetaData)]
    { :product-name     (. md :getDatabaseProductName)
      :product-version  (. md :getDatabaseProductVersion)
      :driver-name      (. md :getDriverName)
      :driver-version   (. md :getDriverVersion) } ))


(defn 
  ^{ :arglists '(
          "(features conn)" )
     :doc """
          List the database' features

          Example PostgreSQL features:
          
          ```
          { :supports-stored-procedures true 
            :supports-full-outer-joins true 
            :supports-savepoints true 
            :supports-batch-updates true 
            :supports-transactions true }
          ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "pg" "pg")]
              (jdbc/features conn)))
          """) }

  features [conn]

  (try-with [md  (. conn :getMetaData)]
    { :supports-full-outer-joins   (. md :supportsFullOuterJoins)
      :supports-stored-procedures  (. md :supportsStoredProcedures)
      :supports-transactions       (. md :supportsTransactions)
      :supports-savepoints         (. md :supportsSavepoints)
      :supports-batch-updates      (. md :supportsBatchUpdates) 
      :supports-get-generated-keys (. md :supportsGetGeneratedKeys) } ))


(defn 
  ^{ :arglists '(
          "(schemas conn)" )
     :doc """
          List the schemas of a database

          Example PostgreSQL schemas:
          
          ```
          [ { :schem "information_schema" 
              :catalog nil
            } 
            { :schem "pg_catalog" 
              :catalog nil
            }
            { :schem "public" 
              :catalog nil 
            } ]
          ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "pg" "pg")]
              (jdbc/schemas conn)))
          """) }

  schemas [conn]

  (try-with [md  (. conn :getMetaData)
             rs  (. md :getSchemas)]
    (loop [schemas []]
      (if (rs-next! rs)
        (recur (conj schemas { :schem   (rs-string rs "TABLE_SCHEM")
                               :catalog (rs-string rs "TABLE_CATALOG") }))
        schemas))))


(defn 
  ^{ :arglists '(
          "(tables conn)" )
     :doc """
          List the tables of a database

          Example PostgreSQL Chinook database:
          
          ```
          [ "album" 
            "artist" 
            "customer" 
            "employee" 
            "genre" 
            "invoice" 
            "invoice_line" 
            "media_type" 
            "playlist" 
            "playlist_track" 
            "track" ]
            ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "chinook" "pg" "pg")]
              (jdbc/tables conn)))
          """) }

  tables [conn]

  (try-with [md  (. conn :getMetaData)
             rs  (. md :getTables nil nil "%" ["TABLE"])]
    (loop [tables []]
      (if (rs-next! rs)
        (recur (conj tables (rs-string rs "TABLE_NAME")))
        tables))))


(defn 
  ^{ :arglists '(
          "(columns conn table)" )
     :doc """
          List the columns of a database table

          Example PostgreSQL Chinook database "genre" table:
          
          ```
          [ { :name "genre_id" 
              :type :INTEGER 
              :size "10" 
              :nullable? "NO" 
              :auto-inc? "YES" } 
            { :name "name" 
              :type :VARCHAR 
              :size "120"
              :nullable? "YES" 
              :auto-inc? "NO" } ]
          ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "chinook" "pg" "pg")
              (jdbc/columns conn "genre")))
          """) }

  columns [conn table]

  (try-with [md  (. conn :getMetaData)
             rs  (. md :getColumns nil nil table nil)]
    (loop [columns []]
      (if (rs-next! rs)
        (recur (conj columns { :name      (rs-string rs "COLUMN_NAME")
                               :size      (rs-string rs "COLUMN_SIZE")
                               :type      (type-map (rs-int rs "DATA_TYPE") :unknown)
                               :nullable? (rs-string rs "IS_NULLABLE")
                               :auto-inc? (rs-string rs "IS_AUTOINCREMENT") }))
        columns))))


(defn 
   ^{ :arglists '(
          "(tables-with-columns conn)" )
     :doc """
          Returns a map with all table names in the database and its column names

          Example:
          
          ```
          { "genre"  ["genre_id" "name"]
            ...
            "playlist_track" ["playlist_id" "track_id"] }
          ```
          """
     :examples '(
          """
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "chinook" "pg" "pg")
              (jdbc/tables-with-columns conn)))
          """,
          """
          ;; Formatted as input for ChatGPT
          ;;   Table: genre
          ;;   Columns: genre_id, name
          ;;   ....
          ;;   Table: playlist_track
          ;;   Columns: playlist_id, track_id
          (do
            (load-module :jdbc-core ['jdbc-core :as 'jdbc])
            (load-module :jdbc-postgresql ['jdbc-postgresql :as 'jdbp])
            (try-with [conn (jdbp/create-connection "localhost" 5432 "chinook" "pg" "pg")]
              (->> (jdbc/tables-with-columns conn)
                   (map (fn [[t c]] 
                          (str "Table: " t "\nColumns: " (str/join ", " c)))) 
                   (str/join "\n"))))
          """) }
 
  tables-with-columns [conn]

  (reduce (fn [m t] (assoc m t (into [] (map :name (columns conn t)))))  
          {}
          (tables conn)))



;; -----------------------------------------------------------------------------
;; SQL Types
;; -----------------------------------------------------------------------------

(defn- numeric-type? [type]
  (contains? numeric-types type))


(defonce numeric-types #{:INTEGER :TINYINT :SMALLINT :BIGINT 
                         :DECIMAL :DOUBLE  :FLOAT    :NUMERIC})


(defonce type-map {
    (. :Types :ARRAY)                    :ARRAY
    (. :Types :BIGINT)                   :BIGINT
    (. :Types :BINARY)                   :BINARY
    (. :Types :BIT)                      :BIT
    (. :Types :BLOB)                     :BLOB
    (. :Types :BOOLEAN)                  :BOOLEAN
    (. :Types :CHAR)                     :CHAR
    (. :Types :CLOB)                     :CLOB
    (. :Types :DATALINK)                 :DATALINK
    (. :Types :DATE)                     :DATE
    (. :Types :DECIMAL)                  :DECIMAL
    (. :Types :DISTINCT)                 :DISTINCT
    (. :Types :DOUBLE)                   :DOUBLE
    (. :Types :FLOAT)                    :FLOAT
    (. :Types :INTEGER)                  :INTEGER
    (. :Types :JAVA_OBJECT)              :JAVA_OBJECT
    (. :Types :LONGNVARCHAR)             :LONGNVARCHAR
    (. :Types :LONGVARBINARY)            :LONGVARBINARY
    (. :Types :LONGVARCHAR)              :LONGVARCHAR
    (. :Types :NCHAR)                    :NCHAR
    (. :Types :NCLOB)                    :NCLOB
    (. :Types :NULL)                     :NULL
    (. :Types :NUMERIC)                  :NUMERIC
    (. :Types :NVARCHAR)                 :NVARCHAR
    (. :Types :OTHER)                    :AROTHERRAY
    (. :Types :REAL)                     :REAL
    (. :Types :REF)                      :REF
    (. :Types :REF_CURSOR)               :REF_CURSOR
    (. :Types :ROWID)                    :ROWID
    (. :Types :SMALLINT)                 :SMALLINT
    (. :Types :SQLXML)                   :SQLXML
    (. :Types :STRUCT)                   :STRUCT
    (. :Types :TIME_WITH_TIMEZONE)       :TIME_WITH_TIMEZONE
    (. :Types :TIMESTAMP)                :TIMESTAMP
    (. :Types :TIMESTAMP_WITH_TIMEZONE)  :TIMESTAMP_WITH_TIMEZONERAY
    (. :Types :TINYINT)                  :TINYINT
    (. :Types :VARBINARY)                :VARBINARY
    (. :Types :VARCHAR)                  :VARCHAR } )



;; -----------------------------------------------------------------------------
;; Transaction isolation levels
;; -----------------------------------------------------------------------------

(defonce tx-isolation-levels {
  ;; A constant indicating that transactions are not supported.
  :tx-none             (. :Connection :TRANSACTION_NONE)

  ;; A constant indicating that dirty reads are prevented; non-repeatable reads 
  ;; and phantom reads can occur.
  :tx-read-commited    (. :Connection :TRANSACTION_READ_COMMITTED)

  ;; A constant indicating that dirty reads, non-repeatable reads and phantom 
  ;; reads can occur.
  :tx-read-uncommited  (. :Connection :TRANSACTION_READ_UNCOMMITTED)

  ;; A constant indicating that dirty reads and non-repeatable reads are 
  ;; prevented; phantom reads can occur.
  :tx-repeatable-read  (. :Connection :TRANSACTION_REPEATABLE_READ)

  ;; A constant indicating that dirty reads, non-repeatable reads and phantom 
  ;; reads are prevented.
  :tx-serializable     (. :Connection :TRANSACTION_SERIALIZABLE) })

