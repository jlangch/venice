;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ASCII charts

;;;; +----------------------------------------+----+
;;;; |                    1)                  |    | 
;;;; +----------------------------------------+    |    
;;;; | 3)  |                                  |    |     1) header
;;;; |     |                                  |    |     2) bar area
;;;; |     |               2)                 | 5) |     3) y-axis
;;;; |     |                                  |    |     4) x-axis
;;;; |     |                                  |    |     5) border right
;;;; |     |                                  |    | 
;;;; |     +----------------------------------+    | 
;;;; |     |               4)                 |    | 
;;;; +-----+----------------------------------+----+ 

(ns ascii-charts)

(load-module :ascii-canvas ['ascii-canvas :as 'ac])
(load-module :ansi)


(def ansi-bold          (ansi/ansi :bold))
(def ansi-black         (ansi/ansi :black))
(def ansi-grey          (ansi/ansi (ansi/fg-color 242)))
(def ansi-light-blue    (ansi/ansi (ansi/fg-color 111)))

(def bar-zero-element   "▁")
(def bar-element        "▇")  
(def bar-elements       [ " ", "▁", "▂", "▃", "▄", "▅", "▆", "▇", "█" ])

(def tick-upper         "▔")
(def tick-lower         "▁")


(defn 
  ^{ :arglists '(
         "(percentage-bar-chart title x-axis-labels values & options)")
     :doc """
          Returns a simple ascii percentage bar chart.

          Arguments:

          | title         | A chart title                              |
          | x-axis-labels | The x-axis labels (two chars only!)        |
          | values        | The percentage values (0..100)             |

          Note: the 'x-axis-labels' and 'values' arguments must have the same size!
 
          Options:

          | :resolution r  | Resolution {`:high`, `:low`}. Defaults to `:high` |
          | :size  s       | Size {`:large`, `:medium`, `:small`}. Defaults to `:medium` |
          | :title-color c | Title ansi color. E.g. `(str (ansi/ansi :bold) (ansi/ansi :black))` |
          | :axis-color c  | Axis ansi color. E.g. `(ansi/ansi (ansi/fg-color 242))` |
          | :bar-color c   | Bar ansi color. E.g. `(ansi/ansi (ansi/fg-color 22))` |

          To get a list of the defined ansi colors run 
          
          ``` 
          (do
            (load-module :ansi)
            (ansi/demo-colors))
          ```
          
          in a REPL
          """
     :examples '(
          """
          (do
            (load-module :ascii-charts)
            (println)
            (println (ascii-charts/percentage-bar-chart 
                        "CPU Usage Limit Per Hour"
                        [ "00" "01" "02" "03" "04" "05" "06" "07" "08"
                          "09" "10" "11" "12" "13" "14" "15" "16" "17"
                          "18" "19" "20" "21" "22" "23" ]
                        [ 100  100  100    0    0  100  100   50   30  
                            0    0    0    0    0    0    0    0    0
                            0   30   30   30   50  100 ])))
          """,
          """
          (do
            (load-module :ascii-charts)
            (load-module :ansi)
            (println)
            (println (ascii-charts/percentage-bar-chart 
                        "Demo Full Percentage Range"
                        [ "00" "01" "02" "03" "04" "05" "06" "07" "08"
                          "09" "10" "11" "12" "13" "14" "15" "16" "17"
                          "18" "19" "20" "21" "22" "23" ]
                        [   0    5   10   15   20   25   30   35   40  
                           45   50   55   60   65   70   75   80   85
                           90   95  100  100   95   90 ]
                        :resolution  :high
                        :size        :medium
                        :title-color (str (ansi/ansi :bold) (ansi/ansi :black))
                        :axis-color  (ansi/ansi (ansi/fg-color 242))
                        :bar-color   (ansi/ansi (ansi/fg-color 22)))))
          """,
          """
          (do
            (load-module :ascii-charts)
            (println)
            (println (ascii-charts/percentage-bar-chart 
                        "Demo Small Percentage Increments"
                        [ "00" "01" "02" "03" "04" "05" "06" "07" "08"
                          "09" "10" "11" "12" "13" "14" "15" "16" "17"
                          "18" "19" "20" "21" "22" "23" ]
                        [   0    1    2    3   4     5    6    7    8  
                            9   10   11   12   13   14   15   16   17
                           18   19   20   21   22   23 ])))
          """) }

  percentage-bar-chart [title x-axis-labels values & options]
    { :pre [(string? title)
            (sequential? x-axis-labels)
            (sequential? values)
            (every? string? x-axis-labels)
            (every? number? values)] }

    (let [opts             (apply hash-map options)
          highres?         (= :high (:resolution opts :high))
          render-bar-fn    (if highres? render-bar-highres render-bar-lowres)
          size             (:size opts :medium)
          title-color      (:title-color opts (str ansi-bold ansi-black))
          axis-color       (:axis-color opts ansi-grey)
          bar-color        (:bar-color opts ansi-light-blue)
          y-axis-width     8
          x-axis-height    2
          header-height    3
          bar-col-width    3
          bar-area-x       y-axis-width
          bar-area-y       x-axis-height
          bar-area-width   (* bar-col-width (count values))
          bar-area-height  (case size :large 40 :medium 20 :small 10 20)
          border-right     (:border-right opts 0)
          y-ticks          6    ;; 0,20,40,60,80,100
          y-tick-distance  (/ bar-area-height 5)
          w                (+ y-axis-width bar-area-width border-right)
          h                (+ header-height bar-area-height  x-axis-height)
          canvas           (ac/create w h)
          title            (str/align w :center :ellipsis-left title)
          vals             (map #(clamp (long %) 0 100) values)
          x-axis-labels    (map #(str/nfirst % 2) x-axis-labels)]
    
      ;; title
      (ac/draw-text canvas title 0 (dec h) title-color)

      ;; x-axis
      (doseq [tick (range (count vals))]
        (let [x (+ bar-area-x (* tick bar-col-width))]
          (ac/draw-text canvas (nth x-axis-labels tick "??") x 0 axis-color)))

      ;; y-axis
      (ac/draw-text canvas (str/format "%3d%% ▁" 0) 0 bar-area-y axis-color)
      (doseq [tick (range 1 y-ticks)]
        (let [y (+ bar-area-y -1 (* tick y-tick-distance))]
          (ac/draw-text canvas (str/format "%3d%% ▔" (* tick 20)) 0 y axis-color)))

      ;; bars
      (doseq [n (range (count vals))]
        (let [x   (+ bar-area-x (* n bar-col-width))
              bar (render-bar-fn (nth vals n) bar-area-height)]
          (ac/draw-vertical-up canvas bar x bar-area-y bar-color)
          (ac/draw-vertical-up canvas bar (inc x) bar-area-y bar-color)))
    
      (ac/string-ansi canvas)))


(defn render-bar-lowres [percentage max-bar-len]
  (let [v (-> percentage (* max-bar-len) (/ 100))]
    (if (zero? v) 
      bar-zero-element 
      (str/repeat bar-element v))))


(defn render-bar-highres [percentage max-bar-len]
  (let [v             (-> (* percentage max-bar-len 8) (/ 100))       
        blocks        (/ v 8)
        eights-blocks (mod v 8)]
    (cond
      (zero? percentage)     bar-zero-element 
      (zero? eights-blocks)  (str/repeat (nth bar-elements 8) blocks)
      :else                  (str (str/repeat (nth bar-elements 8) blocks) 
                                  (nth bar-elements eights-blocks)))))
