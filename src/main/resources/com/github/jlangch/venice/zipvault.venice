;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ZIP Vault, AES-256 encrypted and password protected


(ns zipvault)

(import :net.lingala.zip4j.ZipFile)
(import :net.lingala.zip4j.io.outputstream.ZipOutputStream)
(import :net.lingala.zip4j.io.inputstream.ZipInputStream)
(import :net.lingala.zip4j.model.ZipParameters)
(import :net.lingala.zip4j.model.enums.EncryptionMethod)


(defn 
  ^{ :arglists '("(zipvault/zip out password & entries)")
     :doc """
          Creates an encrypted and password protected zip form the entries and
          writes it to out. out may be a file or an output stream.

          An entry is given by a name and data. The entry data may be nil, a 
          bytebuf, a file, a string, or an input stream. An entry name with a 
          trailing '/' creates a directory.
          """
     :examples '(
          """
          (do 
            (load-module :zipvault)

            (zipvault/zip (io/file "vault.zip")
                          "my-password"
                          "a.txt" "abc"
                          "b.txt" "def"
                          "xx/c.txt" "ghi"))
          """ ) }

  zip [out password & entries]

  { :pre [(or (io/file? out) (instance-of? :java.io.OutputStream out))
          (string? password)] } 

  (let [params  (create-params)
        entries (apply hash-map entries)
        os      (if (io/file? out) (io/file-out-stream out :append false) out)]
    (zip-to-os params password os entries)))


(defn 
  ^{ :arglists '("(zipvault/encrypted?)")
     :doc """
          Extracts a specific file from the zip file to the destination path.
          """
     :examples '(
          """
          (do 
            (load-module :zipvault)

            (zipvault/zip (io/file "vault.zip")
                          "my-password"
                          "a.txt" "abc"
                          "b.txt" "def"
                          "xx/c.txt" "ghi")

            (zipvault/extract (io/file "vault.zip")
                              "my-password"
                              "a.txt"
                              ".")
          """ ) }

  encrypted? [zip]

  { :pre [(io/file? zip)] }

  (asssert (io/exists-file? zip))
 
  (. ( :ZipFile :new zip) :isEncrypted))


(defn 
  ^{ :arglists '("(zipvault/valid-zip-file? zip)")
     :doc """
          Returns true if the zip is a valid zip file else false.
          """
     :examples '(
          """
          (do 
            (load-module :zipvault)

            (zipvault/zip (io/file "vault.zip")
                          "my-password"
                          "a.txt" "abc"
                          "b.txt" "def"))

            (zipvault/valid-zip-file? (io/file "vault.zip"))
          """ ) }

  valid-zip-file? [zip]

  { :pre [(io/file? zip)] }

  (. (. :ZipFile :new zip) :isValidZipFile))


(defn 
  ^{ :arglists '("(zipvault/extract-file zip password filename destpath)")
     :doc """
          Extracts a specific file from the zip file to the destination path.
          """
     :examples '(
          """
          (do 
            (load-module :zipvault)

            (zipvault/zip (io/file "vault.zip")
                          "my-password"
                          "a.txt" "abc"
                          "b.txt" "def")

            (zipvault/extract-file (io/file "vault.zip")
                                   "my-password"
                                   "a.txt"
                                   "."))
          """ ) }

  extract-file [zip password filename destpath]

  { :pre [(io/file? zip)
          (string? password)
          (string? filename)
          (string? destpath)] }

  (assert (io/exists-file? zip))
  (assert (io/file-can-read? zip))
  (assert (io/exists-dir? destpath))
  (assert (io/file-can-write? destpath))

  (let [zip (. :ZipFile :new zip password)]
    (. zip :extractFile filename destpath)))


(defn 
  ^{ :arglists '("(zipvault/extract-all zip password destpath)")
     :doc """
          Extracts all files from the zip file to the destination path.
          """
     :examples '(
          """
          (do 
            (load-module :zipvault)

            (zipvault/zip (io/file "vault.zip")
                          "my-password"
                          "a.txt" "abc"
                          "b.txt" "def")

            (zipvault/extract-all (io/file "vault.zip")
                                  "my-password"
                                  "."))
          """ ) }

  extract-all [zip password destpath]

  { :pre [(io/file? zip)
          (string? password)
          (string? destpath)] }

  (assert (io/exists-file? zip))
  (assert (io/file-can-read? zip))
  (assert (io/exists-dir? destpath))
  (assert (io/file-can-write? destpath))

  (let [zip (. :ZipFile :new zip password)]
    (. zip :extractAll destpath)))


(defn 
  ^{ :arglists '("(zipvault/extract-file-data in password filename)")
     :doc """
          Extracts a specific file from the zip file and returns it as binary 
          data. in may be a file or an input stream.

          Returns `nil` if the file does not exist.
          """
     :examples '(
          """
          (do 
            (load-module :zipvault)

            (zipvault/zip (io/file "vault.zip")
                          "my-password"
                          "a.txt" "abc"
                          "b.txt" "def")

            (zipvault/extract-file-data (io/file "vault.zip")
                                        "my-password"
                                        "a.txt"))
          """ ) }

  extract-file-data [in password filename]

  { :pre [(or (io/file? in) (instance-of? :java.io.InputStream in))
          (string? password)
          (string? filename)] }

  (let [is (if (io/file? in) (io/file-in-stream in) in)]
    (try-with [zis (. :ZipInputStream :new is password)] 
      (loop [header (. zis :getNextEntry)]
        (if (nil? header)
          nil  ;; file not found
          (let [name (. header :getFileName)
                data (io/slurp zis :binary true)]
            (if (= filename name)
              data
              (recur (. zis :getNextEntry)))))))))
 


(defn- zip-to-os [params password os entries]
  (try-with [zos (. :ZipOutputStream :new zos password)]  
    (docoll (fn [[k v]] (add-entry params zos k v)) entries)))

(defn- add-entry [params zos name value]
  (cond
     (str/ends-with? name "/")
       (add-entry params zos name nil)

     (nil? value)
       (add-entry params zos name (bytebuf))

     (instance-of? :java.io.InputStream value)
       (add-entry params zos name (io/slurp value :binary true))

     (= (type value) :java.io.File)
       (add-entry params zos name (io/slurp value :binary true))

     (= (type value) :core/string)
       (add-entry params zos name (bytebuf value))

     (= (type value) :core/bytebuf)
       (add-entry params zos name value)

     :else
       (throw (ex :VncException 
              """
              Invalid zip entry value type ~(type value)! \
              Expected a file, string, or bytebuf.
              """))))

(defn- add-entry [params zos name data]
  (. params :setFileNameInZip name)
  (. zos :putNextEntry params)
  (when (some? data) (. zos :write data))
  (. zos :closeEntry))

(defn- create-params []
  (doto (. :ZipParameters :new)
        (. :setEncryptFiles true)
        (. :setEncryptionMethod :AES)
        (. :setAesKeyStrength :KEY_STRENGTH_256)
        (. :setAesVersion :TWO)))
