;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice Java Keystore functions


(ns keystores)

(import :java.security.KeyStore)
(import :java.security.KeyStoreException)
(import :java.security.NoSuchAlgorithmException)
(import :java.security.cert.CertificateException)
(import :java.security.cert.X509Certificate)

(import :com.github.jlangch.venice.util.ssl.Keystores)



(defn
  ^{ :arglists '("(load in password)")
     :doc """
          Loads a certificate into a Java `KeyStore`. Reads it from the input 
          'in' and returns it as a  Java `KeyStore`.

          'in' may be a:
           * bytebuf
           * `java.io.File`, e.g: `(io/file \"/temp/foo.json\")`
           * `java.nio.file.Path`
           * `java.io.InputStream`

          **Note**: The caller is responsible for closing the in stream!
          """
     :examples '(
          """
          (do
            (load-module :keystores)
            (keystores/load (io/file "cert.p12") "12345"))
          """)
     :see-also '(
          "keystores/aliases",
          "keystores/certificate",
          "keystores/subject-dn",
          "keystores/issuer-dn",
          "keystores/expiry-date" ) }

  load [in password]

  { :pre [(or (bytebuf? in)
              (io/file? in)
              (instance-of? :java.nio.file.Path in)
              (instance-of? :java.io.InputStream in))
          (string? password)] }

  (. :Keystores :load (io/slurp in :binary true) password))


(defn 
  ^{ :arglists '("(aliases keystore)")
     :doc """
          Returns the list of aliases defined for the keystore.
          """
     :examples '(
          """
          (do
            (load-module :keystores)
            (let [ks    (keystores/load (io/file "cert.p12") "12345")]
              (keystores/aliases ks)))
          """)
     :see-also '(
          "keystores/load",
          "keystores/certificate",
          "keystores/subject-dn",
          "keystores/issuer-dn",
          "keystores/expiry-date" ) }

  aliases [keystore]

  { :pre [(instance-of? :KeyStore keystore)] }
  (. :Keystores :aliases keystore))


(defn 
  ^{ :arglists '("(certificate keystore alias)")
     :doc """
          Returns the certificate (of type `X509Certificate`) with the given 
          alias name from the keystore.
          """
     :examples '(
          """
          (do
            (load-module :keystores)
            (let [ks    (keystores/load (io/file "cert.p12") "12345")
                  alias (first (keystores/aliases ks)]
              (keystores/certificate ks alias)))
          """)
     :see-also '(
          "keystores/load", 
          "keystores/aliases",
          "keystores/subject-dn",
          "keystores/issuer-dn",
          "keystores/expiry-date" ) }

  certificate [keystore alias]

  { :pre [(instance-of? :KeyStore keystore) (string? alias)] }
  (. :Keystores :certificate keystore alias))


(defn 
  ^{ :arglists '("(subject-dn keystore alias)")
     :doc """
          Returns the subject DN for the certificate with the given 
          alias name in the keystore.
          """
     :examples '(
          """
          (do
            (load-module :keystores)
            (let [ks    (keystores/load (io/file "cert.p12") "12345")
                  alias (first (keystores/aliases ks)]
              (keystores/subject-dn ks alias)))
          """)
     :see-also '(
          "keystores/load", 
          "keystores/aliases",
          "keystores/certificate",
          "keystores/issuer-dn",
          "keystores/expiry-date" ) }

  subject-dn [keystore alias]

  { :pre [(instance-of? :KeyStore keystore) (string? alias)] }
  (. :Keystores :subjectDN keystore alias))


(defn 
  ^{ :arglists '("(issuer-dn keystore alias)")
     :doc """
          Returns the issuer DN for the certificate with the given 
          alias name in the keystore.
          """
     :examples '(
          """
          (do
            (load-module :keystores)
            (let [ks    (keystores/load (io/file "cert.p12") "12345")
                  alias (first (keystores/aliases ks)]
              (keystores/issuer-dn ks alias)))
          """)
     :see-also '(
          "keystores/load", 
          "keystores/aliases",
          "keystores/certificate",
          "keystores/subject-dn",
          "keystores/expiry-date" ) }

  issuer-dn [keystore alias]

  { :pre [(instance-of? :KeyStore keystore) (string? alias)] } 
  (. :Keystores :issuerDN keystore alias))


(defn 
  ^{ :arglists '("(expiry-date keystore alias)")
     :doc """
          Returns the expiry date as a `:java.time.LocalDateTime` for the 
          certificate with the given alias name in the keystore.
          """
     :examples '(
          """
          (do
            (load-module :keystores)
            (let [ks    (keystores/load (io/file "cert.p12") "12345")
                  alias (first (keystores/aliases ks)]
              (keystores/expiry-date ks alias)))
          """)
     :see-also '(
          "keystores/load", 
          "keystores/aliases",
          "keystores/certificate",
          "keystores/subject-dn",
          "keystores/issuer-dn" ) }

  expiry-date [keystore alias]

  { :pre [(instance-of? :KeyStore keystore) (string? alias)] }
  (. :Keystores :expiryDate keystore alias))
