;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Mime types


(ns mimetypes)


(def mimetypes/mimetypes
   { :application-pdf     "application/pdf"
     :application-xml     "application/xml"
     :application-zip     "application/zip"
     :application-json    "application/json"
     :application-xls     "application/vnd.ms-msexcel"
     :application-doc     "application/msword"
     :application-ppt     "application/vnd.ms-powerpoint"
     :application-xlsx    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
     :application-docx    "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
     :application-pptx    "application/vnd.openxmlformats-officedocument.presentationml.presentation"
     :application-ttf     "application/x-font-ttf"
     :application-binary  "application/octet-stream"
     :text-html           "text/html"
     :text-xml            "text/xml"
     :text-csv            "text/csv"
     :text-css            "text/css"
     :text-plain          "text/plain"
     :text-url            "text/url"
     :image-jpeg          "image/jpeg"
     :image-png           "image/png"
     :image-gif           "image/gif"
     :image-svg+xml       "image/svg+xml"
     :email               "message/rfc822"
 })


(defonce ^:private mime-types-resource "com/github/jlangch/venice/mimetypes/mime.types")

(defn- load-mime-types-resources []
  (as-> (io/load-classpath-resource mime-types-resource) v
        (bytebuf-to-string v :UTF-8)
        (str/split-lines v)
        (filter #(not (str/starts-with? % "#")) v)
        (map #(str/split % "(\t| )+") v)
        (map #(cartesian-product [(first %)] (rest %)) v)
        (mapcat #(if (sequential? %) % [%]) v)
        (map #(vector (second %) (keyword (first %))) v)
        (into {} v)))

(defonce ^:private load-content-types
  (delay (load-mime-types-resources)))


(defn 
  ^{ :arglists '("(probe-content-type f)")
     :doc """
          Probes the content type of a file. 

          The function uses a built-in "mime.types" data file to lookup the
          file's mimetype based on the file extension.

          f must be a string or a :java.io.File.

          Returns `nil` if a mapping is not defined.
          """
     :examples '(
          """
          (do 
            (load-module :mimetypes)
            (mimetypes/probe-content-type "foo.png"))
          """) }
   
   probe-content-type [f]

   (assert (or (string? f) (io/file? f)))
   (get (force load-content-types) (io/file-ext f)))
