;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Image functions

;;;; Thanks to Riyad Kalla and his 'imgscalr' Java project (Apache-2.0 license).
;;;; https://github.com/rkalla/imgscalr/
;;;;
;;;; This is a Venice rewrite of the 'imgscalr'.

;;;; Java2D device coordinates
;;;;
;;;;       +--------> x
;;;;       | 
;;;;       |
;;;;       v
;;;;       y


(ns images)

(import :java.awt.BasicStroke
        :java.awt.Color
        :java.awt.Font
        :java.awt.Graphics
        :java.awt.Graphics2D
        :java.awt.Image
        :java.awt.RenderingHints
        :java.awt.Shape
        :java.awt.Transparency
        :java.awt.color.ColorSpace
        :java.awt.geom.AffineTransform
        :java.awt.geom.Rectangle2D
        :java.awt.image.AreaAveragingScaleFilter
        :java.awt.image.BufferedImage
        :java.awt.image.BufferedImageOp
        :java.awt.image.ColorConvertOp
        :java.awt.image.ColorModel
        :java.awt.image.ConvolveOp
        :java.awt.image.ImagingOpException
        :java.awt.image.IndexColorModel
        :java.awt.image.Kernel
        :java.awt.image.RasterFormatException
        :java.awt.image.RescaleOp)

(import :javax.imageio.ImageIO
        :javax.imageio.stream.FileImageInputStream
        :javax.imageio.spi.IIORegistry
        :javax.imageio.spi.ImageWriterSpi)



;; -----------------------------------------------------------------------------
;; Constants
;; -----------------------------------------------------------------------------

(defonce TYPE_INT_RGB   (. :BufferedImage :TYPE_INT_RGB))
(defonce TYPE_INT_ARGB  (. :BufferedImage :TYPE_INT_ARGB))
(defonce TYPE_BYTE_GRAY (. :BufferedImage :TYPE_BYTE_GRAY))

(defonce transparent (. :Color :new 0x00FFFFFF true))

;; see: https://htmlcolorcodes.com/color-names/
(defonce blue         (. :Color :BLUE))
(defonce dark-blue    (. :Color :new   0I   0I 128I))
(defonce light-blue   (. :Color :new  87I 155I 255I))
(defonce black        (. :Color :BLACK))
(defonce cyan         (. :Color :CYAN))
(defonce dark-gray    (. :Color :DARK_GRAY))
(defonce gray         (. :Color :GRAY))
(defonce green        (. :Color :GREEN))
(defonce dark-green   (. :Color :new   0I  94I   0I))
(defonce light-green  (. :Color :new 155I 232I 155I))
(defonce light-gray   (. :Color :LIGHT_GRAY))
(defonce magenta      (. :Color :MAGENTA))
(defonce orange       (. :Color :ORANGE))
(defonce pink         (. :Color :PINK))
(defonce red          (. :Color :RED))
(defonce dark-red     (. :Color :new 130I   0I   0I))
(defonce light-red    (. :Color :new 240I 125I 152I))
(defonce white        (. :Color :WHITE))
(defonce yellow       (. :Color :YELLOW))

(defonce cap-butt     (. :BasicStroke :CAP_BUTT))
(defonce cap-round    (. :BasicStroke :CAP_ROUND))
(defonce cap-square   (. :BasicStroke :CAP_SQUARE))
(defonce join-bevel   (. :BasicStroke :JOIN_BEVEL))
(defonce join-miter   (. :BasicStroke :JOIN_MITER))
(defonce join-round   (. :BasicStroke :JOIN_ROUND))


(defonce resize-modes #{ :resize-auto 
                         :resize-performance 
                         :resize-balanced 
                         :resize-quality 
                         :resize-high-quality })

(defonce fit-modes #{ :fit-best 
                      :fit-exact 
                      :fit-width 
                      :fit-height })




;; -----------------------------------------------------------------------------
;; Imaging operators
;; -----------------------------------------------------------------------------

(def convolve-op-antialias (. :ConvolveOp 
                                 :new 
                                 (. :Kernel :new 3 3 [ 0.00F, 0.08F, 0.00F, 
                                                       0.08F, 0.68F, 0.08F,
                                                       0.00F, 0.08F, 0.00F ])
                                 (. :ConvolveOp :EDGE_NO_OP)
                                 nil))

(def rescale-op-darker (. :RescaleOp  :new 0.9F 0 nil))

(def rescale-op-brighter (. :RescaleOp  :new 1.1F 0 nil))

(def color-convert-op-grayscale (as-> (. :ColorSpace :CS_GRAY) cs
                                      (. :ColorSpace :getInstance cs)
                                      (. :ColorConvertOp :new cs nil)))





;; -----------------------------------------------------------------------------
;; Load / Save
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(load file)") 
     :doc """
          Loads an image from a `:java.io.File`, a `:java.io.InputStream`, or a 
          `:java.net.URL`.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg")))
          """)
     :see-also '(
          "images/save" ) }

  load [f]

  (assert (or (io/file? f) 
              (instance-of? :java.io.InputStream f)
              (instance-of? :java.net.URL f)))

  (try 
    (. :ImageIO :read f)
    (catch :Exception e
      (throw (ex :VncException "Faled to load image" e)))))


(defn 
  ^{ :arglists '(
          "(save img format-name f)") 
     :doc """
          Saves an image to 'java.io.File' or an ':java.io.OutputStream'.

          Supported formats:  "png", "jpg", "jpeg", "gif", "bmp", ...
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/save img :png (io/file "/Users/foo/Desktop/Pink-Forest.png"))))
          """) 
     :see-also '(
          "images/load"
          "images/format-names" ) }

  save [img format-name f]

  (assert (instance-of? :Image img))
  (assert (or (string? format-name) (keyword? format-name)))
  (assert (or (io/file? f) (instance-of? :java.io.OutputStream f)))

  (when-not (try 
              (. :ImageIO :write img (name format-name) f)
              (catch :Exception e
                (throw (ex :VncException "Failed to write image" e))))
    (throw (ex :VncException 
               """
               Failed to write image. No appropriate writer found for format \
               '~{format-name}'!
               """))))



;; -----------------------------------------------------------------------------
;; Create Image
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(create width height type)"
          "(create width height type color)") 
     :doc """
          Creates a new `:java.awt.image.BufferedImage` with the given 
          width, height, and type.

          Without color, creates a transparent image (type 'TYPE_INT_ARGB')
          or black image (type 'TYPE_INT_RGB'). 
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/create 400 200 images/TYPE_INT_ARGB)
                (images/save :png (io/file "/Users/foo/Desktop/test.png"))))
          """,
          """
          (do
            (load-module :images)
            (-> (images/create 400 200 images/TYPE_INT_ARGB images/white)
                (images/save :png (io/file "/Users/foo/Desktop/test.png"))))
          """)
     :see-also '(
          "images/copy"
          "images/save"
          "images/g2d" ) }

  create
  
  ([width height type]
     (create width height type nil))

  ([width height type color]
    (assert (long? width))
    (assert (long? height))
    (assert (int? type))
    (assert (or (nil? color) (instance-of? :Color color)))

    (try 
      (let [img (. :BufferedImage :new width height type)]
        (when color
          (let [g (images/g2d img)]
            (. g :setColor color)
            (. g :fillRect 0 0 width height)))
        img)
      (catch :Exception e
        (throw (ex :VncException "Faled to create image" e))))))


(defn 
  ^{ :arglists '(
          "(copy img)") 
     :doc """
          Creates a copy of `:java.awt.image.BufferedImage`.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/create 400 200 images/TYPE_INT_ARGB)
                (images/copy)
                (images/save :png (io/file "/Users/foo/Desktop/test.png"))))
          """)
     :see-also '(
          "images/g2d"
          "images/stroke"
          "images/save" ) }

  copy [img]

  (assert (instance-of? :BufferedImage img))

  (copy-to-derived-image img))



;; -----------------------------------------------------------------------------
;; Graphics Context
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(g2d img)")
     :doc """
          Creates a Graphics2D context from an image.

          See: [Rendering Quality](https://docs.oracle.com/javase/tutorial/2d/advanced/quality.html)
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/stroke g 10.0)
              (images/fg-color g images/blue)
              (images/fill-oval g 200 100 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
          """ ) 
     :see-also '(
          "images/create"
          "images/anti-alias"
          "images/stroke" ) }

  g2d [img]

  (assert (instance-of? :BufferedImage img))

  (. img :createGraphics))


(defn
  ^{ :arglists '(
          "(anti-alias g2d on)")
     :doc """
          Turns anti-alias on/off on the Graphics2D context

          `(images/anti-alias on)` is a short form of:
          
          ````
          (let [key (. :RenderingHints :KEY_ANTIALIASING)
                val (. :RenderingHints :VALUE_ANTIALIAS_ON)]
            (. g2d :setRenderingHint key val))

          (let [key (. :RenderingHints :KEY_TEXT_ANTIALIASING)
                val (. :RenderingHints :VALUE_TEXT_ANTIALIAS_ON)]
            (. g2d :setRenderingHint key val))
          ```

          See: [Rendering Quality](https://docs.oracle.com/javase/tutorial/2d/advanced/quality.html)
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              
              (images/anti-alias g true)   ;; enable anti-alias 
              (images/fg-color g images/blue)
              (images/fill-round-rect g 80 60 100 50 12 12)
              
              (images/anti-alias g false)   ;; disable anti-alias 
              (images/fg-color g images/red)
              (images/fill-round-rect g 220 60 100 50 12 12)
              
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """ ) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/stroke" ) }

  anti-alias [g2d on]

  (assert (instance-of? :Graphics2D g2d))
  (assert (boolean? on))

  (let [key-1 (. :RenderingHints :KEY_ANTIALIASING)
        key-2 (. :RenderingHints :KEY_TEXT_ANTIALIASING)]
    (if on
        (let [val-1 (. :RenderingHints :VALUE_ANTIALIAS_ON)
              val-2 (. :RenderingHints :VALUE_TEXT_ANTIALIAS_ON)]
          (. g2d :setRenderingHint key-1 val-1)
          (. g2d :setRenderingHint key-2 val-2))
        (let [val-1 (. :RenderingHints :VALUE_ANTIALIAS_OFF)
              val-2 (. :RenderingHints :VALUE_TEXT_ANTIALIAS_OFF)]
          (. g2d :setRenderingHint key-1 val-1)
          (. g2d :setRenderingHint key-2 val-2)))))


(defn
  ^{ :arglists '(
          "(stroke g2d)"
          "(stroke g2d width)"
          "(stroke g2d width cap join)"
          "(stroke g2d width cap join meter-limit)"
          "(stroke g2d width cap join meter-limit dash dash-phase)")
     :doc """
          Sets a new stroke on the graphics context
 
          See: [BasicStroke](https://docs.oracle.com/javase/8/docs/api/java/awt/BasicStroke.html)
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/stroke g 10.0 images/cap-round images/join-miter)
              (images/draw-oval g 100 50 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
          """
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/stroke g
                             10.0 
                             images/cap-round 
                             images/join-miter 
                             5.0 
                             [20.0] 
                             20.0)
              (images/draw-oval g 200 100 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """ ) 
     :see-also '(
          "images/create"
          "images/g2d" ) }

  stroke
  
  ([g2d]
    (assert (instance-of? :Graphics2D g2d))
    (->> (. :BasicStroke :new)
         (. g2d :setStroke)))

  ([g2d width]
    (assert (instance-of? :Graphics2D g2d))
    (assert (double? width))
    (->> (. :BasicStroke :new width)
         (. g2d :setStroke)))

  ([g2d width cap join]
    (assert (instance-of? :Graphics2D g2d))
    (assert (double? width))
    (assert (int? cap))
    (assert (int? join))
    (->> (. :BasicStroke :new width cap join)
         (. g2d :setStroke)))

  ([g2d width cap join meter-limit]
    (assert (instance-of? :Graphics2D g2d))
    (assert (double? width))
    (assert (int? cap))
    (assert (int? join))
    (assert (double? meter-limit))
    (->> (. :BasicStroke :new width cap join meter-limit)
         (. g2d :setStroke)))

  ([g2d width cap join meter-limit dash dash-phase]
    (assert (instance-of? :Graphics2D g2d))
    (assert (double? width))
    (assert (int? cap))
    (assert (int? join))
    (assert (double? meter-limit))
    (assert (sequential? dash))
    (assert (double? dash-phase))
    (->> (. :BasicStroke :new width cap join meter-limit dash dash-phase)
         (. g2d :setStroke))))


(defn
  ^{ :arglists '(
          "(fg-color g2d color)")
     :doc """
          Sets the foreground color on the graphics context.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/fill-oval g 200 100 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """ ) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/stroke"
          "images/bg-color" ) }

  fg-color [g2d color]
    (assert (instance-of? :Graphics2D g2d))
    (assert (instance-of? :Color color))
    (. g2d :setColor color))


(defn
  ^{ :arglists '(
          "(bg-color g2d color)")
     :doc """
          Sets the background color on the graphics context.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/bg-color g images/blue)
              (images/clear-rect g 150 80 100 50)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """ ) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/stroke"
          "images/fg-color" ) }

  bg-color [g2d color]
    (assert (instance-of? :Graphics2D g2d))
    (assert (instance-of? :Color color))
    (. g2d :setBackground color))


(defn
  ^{ :arglists '(
          "(set-clip g2d shape)"
          "(set-clip g2d x y width height)")
     :doc """
          Sets the current clip to the rectangle specified by the given 
          coordinates.

          A shape can be `nil` to remove any clipping.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/set-clip g 0 0 200 200) ;; left half of the img
              (images/fill-oval g 200 100 300 150)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  set-clip 

  ([g2d shape]
    (assert (instance-of? :Graphics2D g2d))
    (assert (or (nil? shape ) (instance-of? :Shape shape)))
    (. g2d :setClip shape))

  ([g2d x y width height]
    (assert (instance-of? :Graphics2D g2d))
    (assert (long? x))
    (assert (long? y))
    (assert (long? width))
    (assert (long? height))

    (. g2d :setClip x y width height)))


(defn
  ^{ :arglists '(
          "(get-clip g2d)")
     :doc """
          Returns the current clip shape.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)
                  old (images/get-clip g)]
              (images/anti-alias g true)   ;; enable anti-alias 
              (images/fg-color g images/blue)
              (images/set-clip g 0 0 200 200) ;; left half of the img
              (images/fill-oval g 200 100 300 150)
              (images/set-clip g old) ;; restore previous clipping 
              (images/stroke g 10.0 images/cap-round images/join-miter)
              (images/fg-color g images/red)
              (images/draw-line g 50 50 350 150)

              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  get-clip [g2d]

  (assert (instance-of? :Graphics2D g2d))

  (. g2d :getClip))


(defn
  ^{ :arglists '(
          "(get-clip-bounds g2d)")
     :doc """
          Returns the current clip bounds as a :java.awt.Rectangle.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/get-clip-bounds g)))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  get-clip-bounds [g2d]

  (assert (instance-of? :Graphics2D g2d))

  (. g2d :getClipBounds))


(defn
  ^{ :arglists '(
          "(dispose g2d)")
     :doc """
          Disposes of this graphics context and releases any system resources 
          that it is using.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/fill-oval g 200 100 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """ ) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/stroke" ) }

  dispose [g2d]
    (assert (instance-of? :Graphics2D g2d))
    (. g2d :dispose))



;; -----------------------------------------------------------------------------
;; Drawing
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(copy-area g2d x y with height dx dy)")
     :doc """
          Copies an area of the component by a distance specified by dx and dy. 
          """
     :examples '(
          """
          (do
            (load-module :images)
 
            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/fill-circle g 100 100 100)
              (images/copy-area g 50 50 100 100 200 30)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """)
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-oval"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  copy-area [g2d x y width height dx dy]

    (assert (instance-of? :Graphics2D g2d))
    (assert (long? x))
    (assert (long? y))
    (assert (long? width))
    (assert (long? height))
    (assert (long? dx))
    (assert (long? dy))
    (. g2d :copyArea x y width height dx dy))


(defn
  ^{ :arglists '(
          "(clear-rect g2d x y width height)")
     :doc """
          Clears the specified rectangle by filling it with the current 
          background color.
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/bg-color g images/blue)
              (images/clear-rect g 150 80 100 50)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  clear-rect [g2d x y width height]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? x))
  (assert (long? y))
  (assert (long? width))
  (assert (long? height))

  (. g2d :clearRect x y width height))


(defn
  ^{ :arglists '(
          "(fill-circle g2d x y radius)")
     :doc """
          Draws a filled circle. 
          """
     :examples '(
          """
          (do
            (load-module :images)
 
            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/fill-circle g 200 100 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """,
         """
           ;; create a mask
           (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (. g :setComposite (. :java.awt.AlphaComposite :Clear))
              (images/fill-circle g 200 100 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """)
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-oval"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  fill-circle [g2d x y radius]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? x))
  (assert (long? y))
  (assert (long? radius))

  (. g2d :fillOval (- x (/ radius 2)) 
                    (- y (/ radius 2)) 
                    radius
                    radius))


(defn
  ^{ :arglists '(
          "(fill-oval g2d center-x center-y width height)")
     :doc """
          Draws a filled oval. 
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/fill-oval g 200 100 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  fill-oval 
  
  ([g2d center-x center-y width height]
    (fill-oval g2d center-x center-y width height nil))

  ([g2d center-x center-y width height color]
    (assert (instance-of? :Graphics2D g2d))
    (assert (long? center-x))
    (assert (long? center-y))
    (assert (long? width))
    (assert (long? height))
    (assert (or (nil? color) (instance-of? :Color color)))

    (when color
      (. g2d :setColor color))

    (. g2d :fillOval (- center-x (/ width 2)) 
                     (- center-y (/ height 2)) 
                     width
                     height)))


(defn
  ^{ :arglists '(
          "(fill-rect g2d x y width height)")
     :doc """
          Draws a filled rectangle. 
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/fill-rect g 150 80 100 50)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  fill-rect [g2d x y width height]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? x))
  (assert (long? y))
  (assert (long? width))
  (assert (long? height))

  (. g2d :fillRect x y width height))


(defn
  ^{ :arglists '(
          "(fill-round-rect g2d x y width height arc-width arc-height)")
     :doc """
          Draws a filled rounded rectangle. 
          """
     :examples '(
          """
          (do
            (load-module :images)
            
            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/whitebg)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/anti-alias g true)   ;; enable anti-alias 
              (images/fill-round-rect g 80 60 100 50 12 12)

              (images/fg-color g images/red)
              (images/anti-alias g false)   ;; disable anti-alias 
              (images/fill-round-rect g 220 60 100 50 12 12)
 
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-rect"
          "images/draw-string"
          "images/draw-line" ) }

  fill-round-rect [g2d x y width height arc-width arc-height]

    (assert (instance-of? :Graphics2D g2d))
    (assert (long? x))
    (assert (long? y))
    (assert (long? width))
    (assert (long? height))
    (assert (long? arc-width))
    (assert (long? arc-height))
    (. g2d :fillRoundRect x y width height arc-width arc-height))


(defn
  ^{ :arglists '(
          "(draw-circle g2d x y radius)")
     :doc """
          Draws a  circle. 
          """
     :examples '(
          """
          (do
            (load-module :images)
 
            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/draw-circle g 200 100 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """,
         """
           ;; create a mask
           (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (. g :setComposite (. :java.awt.AlphaComposite :Clear))
              (images/stroke g 10.0)
              (images/draw-circle g 200 100 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """)
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-oval"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  draw-circle [g2d x y radius]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? x))
  (assert (long? y))
  (assert (long? radius))

  (. g2d :drawOval (- x (/ radius 2)) 
                    (- y (/ radius 2)) 
                    radius
                    radius))


(defn
  ^{ :arglists '(
          "(draw-oval g2d center-x center-y width height)")
     :doc """
          Draws an oval. 
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB)
                  g   (images/g2d img)]
              (images/stroke g 10.0)
              (images/fg-color g images/blue)
              (images/draw-oval g 200 100 200 100)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  draw-oval [g2d center-x center-y width height]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? center-x))
  (assert (long? center-y))
  (assert (long? width))
  (assert (long? height))

  (. g2d :drawOval (- center-x (/ width 2)) 
                    (- center-y (/ height 2)) 
                    width
                    height))


(defn
  ^{ :arglists '(
          "(draw-rect g2d x y width height)"
          "(draw-rect g2d x y width height color)")
     :doc """
          Draws a rectangle. 
          """
     :examples '(
          """
          (do
            (load-module :images)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/stroke g 10.0)
              (images/fg-color g images/blue)
              (images/draw-rect g 150 70 100 50)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-round-rect"
          "images/draw-string"
          "images/draw-line" ) }

  draw-rect [g2d x y width height]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? x))
  (assert (long? y))
  (assert (long? width))
  (assert (long? height))

  (. g2d :drawRect x y width height))


(defn
  ^{ :arglists '(
          "(draw-round-rect g2d x y width height arc-width arc-height)")
     :doc """
          Draws a rounded rectangle. 
          """
     :examples '(
          """
          (do
            (load-module :images)
            
            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]

              (images/stroke g 10.0)

              (images/fg-color g images/blue)
              (images/anti-alias g true)   ;; enable anti-alias 
              (images/draw-round-rect g 80 60 100 50 12 12)

              (images/fg-color g images/red)
              (images/anti-alias g false)   ;; disable anti-alias 
              (images/draw-round-rect g 220 60 100 50 12 12)
 
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-rect"
          "images/draw-string"
          "images/draw-line" ) }

  draw-round-rect [g2d x y width height arc-width arc-height]

  (assert (instance-of? :Graphics2D g2d))
  (assert (long? x))
  (assert (long? y))
  (assert (long? width))
  (assert (long? height))
  (assert (long? arc-width))
  (assert (long? arc-height))
  (. g2d :drawRoundRect x y width height arc-width arc-height))


(defn
  ^{ :arglists '(
          "(draw-string g2d text x y)"
          "(draw-string g2d text x y size)")
     :doc """
          Draws text with an optional size at the given position.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (import :java.awt.Font)

            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/fg-color g images/blue)
              (images/anti-alias g true)   ;; enable anti-alias 
              (images/draw-string g "Hello, world!" 50 120 50)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-line" ) }

  draw-string
  
  ([g2d text x y]
    (draw-string g2d text x y nil))

  ([g2d text x y size]
    (assert (instance-of? :Graphics2D g2d))
    (assert (string? text))
    (assert (long? x))
    (assert (long? y))
    (assert (or (nil? size) (long? size)))

    (when size
      (let [f (. g2d :getFont)]
        ;; just change the font size, keep name and style
        (->> (. :Font :new (str f) (. f :getStyle) size)
             (. g2d :setFont))))

    (. g2d :drawString text x y)))


(defn
  ^{ :arglists '(
          "(draw-line g2d x1 y1 x2 y2)")
     :doc """
          Draws a line. 
          """
     :examples '(
          """
          (do
            (load-module :images)
 
            (let [img (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g   (images/g2d img)]
              (images/anti-alias g true)   ;; enable anti-alias 
              (images/stroke g 10.0 images/cap-round images/join-miter)
              (images/fg-color g images/blue)
              (images/draw-line g 50 50 350 150)
              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string" ) }

  draw-line [g2d x1 y1 x2 y2]

    (assert (instance-of? :Graphics2D g2d))
    (assert (long? x1))
    (assert (long? y1))
    (assert (long? x2))
    (assert (long? y2))

    (. g2d :drawLine x1 y1 x2 y2))


(defn
  ^{ :arglists '(
          "(draw-image g2d x y)"
          "(draw-image g2d x y width height)")
     :doc """
          Draws an image to the position x,y in the graphics context. 
          """
     :examples '(
          """
          (do
            (load-module :images)
 
            (let [img1 (images/create 50 50 images/TYPE_INT_ARGB images/blue)
                  img2 (images/create 50 50 images/TYPE_INT_ARGB images/magenta)
                  img  (images/create 400 200 images/TYPE_INT_ARGB images/white)
                  g    (images/g2d img)]
             
              (images/draw-image g img1 100 30)
              (images/draw-image g img2 130 60)
              (images/draw-image g img1 160 90)

              (images/draw-image g img1 250 30 30 30)
              (images/draw-image g img2 280 60 30 30)
              (images/draw-image g img1 310 90 30 30)

              (images/dispose g)
              (images/save img :png (io/file "/Users/foo/Desktop/test.png"))))
         """) 
     :see-also '(
          "images/create"
          "images/g2d"
          "images/anti-alias"
          "images/copy-area"
          "images/fill-circle"
          "images/fill-oval"
          "images/fill-rect"
          "images/fill-round-rect"
          "images/draw-string" ) }

  draw-image 
  
  ([g2d img x y]
    (assert (instance-of? :Graphics2D g2d))
    (assert (instance-of? :Image img))
    (assert (long? x))
    (assert (long? y))
    (. g2d :drawImage img x y nil))
  
  ([g2d img x y width height]
    (assert (instance-of? :Graphics2D g2d))
    (assert (instance-of? :Image img))
    (assert (long? x))
    (assert (long? y))
    (assert (long? width))
    (assert (long? height))
     (. g2d :drawImage img x y width height nil)))



;; -----------------------------------------------------------------------------
;; Image properties
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(dimension f)") 
     :doc """
          Returns the images dimensions as a vector [width height]. 'f' may 
          be a `:java.io.File` or a `:java.awt.Image`.

          Note: Do not load a file first to get the dimension, passing a
                `:java.io.File` is much faster!
          """
     :examples '(
          """
          (do
            (load-module :images)
            (images/dimension (io/file "/Users/foo/Desktop/Pink-Forest.jpg")))
          """ ) }

  dimension [f]

  (assert (or (io/file? f) (instance-of? :Image f)))

  (if (instance-of? :Image f)
    [(long (. f :getWidth)) (long (. f :getHeight))] ;; return dimensions
    (let [suffix    (io/file-ext f)
          iterators (. :ImageIO :getImageReadersBySuffix suffix)]
      (let [dim (loop [readers (java-iterator-to-list iterators)]
                  (if-let [reader (first readers)]
                    (if-let [d (read-dimension reader f)]
                      d  ;; return dimensions
                      (recur (rest readers)))))]  ;; try with next reader
        (if dim
          dim
          (throw (ex :VncException 
                     (str "Cannot get image dimensions for unknown image " 
                          f))))))))


(defn- read-dimension [img-reader file]
  (try-with [is (. :FileImageInputStream :new file)]
    (. img-reader :setInput is)
    ;; return dimensions
    [(long (. img-reader :getWidth  (. img-reader :getMinIndex)))
     (long (. img-reader :getHeight (. img-reader :getMinIndex)))]
  (catch :Exception e nil)  ;; this reader does not match the image type
  (finally (. img-reader :dispose))))



;; -----------------------------------------------------------------------------
;; Rotate / Flip
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(rotate img angle)") 
     :doc """
          Rotates an image by 0°, 90°, 180°, or 270° clockwise. 
          Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/rotate 90)
                (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg"))))
          """ ) }

  rotate [img angle]

  (assert (instance-of? :Image img))
  (assert (and (long? angle) (contains? #{0, 90, 180, 270} angle)))

  (let [[width height] (dimension img)
        tx             (. :AffineTransform :new)]
    (case angle
      90      (let [new-width  height
                    new-height width]
                      (. tx :translate new-width 0)
                      (. tx :quadrantRotate 1)
                (transform img tx new-width new-height))

      180     (let [new-width  width
                    new-height height]
                       (. tx :translate new-width new-height)
                       (. tx :quadrantRotate 2)
                 (transform img tx new-width new-height))

      270     (let [new-width  height
                    new-height width]
                      (. tx :translate 0 new-height)
                      (. tx :quadrantRotate 3)
                (transform img tx new-width new-height))

      img)))


(defn 
  ^{ :arglists '(
          "(flip img mode)") 
     :doc """
          Flips an image vertically or horizontally. Returns a new image.

          Mode is either :vertical or :horizontal.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/flip :vertical)
                (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg"))))
          """ ) }

  flip [img mode]

  (assert (instance-of? :Image img))
  (assert (and (keyword? mode) (contains? #{:vertical :horizontal} mode)))

  (let [[width height] (dimension img)
        tx             (. :AffineTransform :new)]
    (case mode
      :horizontal (do (. tx :translate width 0)
                      (. tx :scale -1.0 1.0)
                      (transform img tx width height))

      :vertical   (do (. tx :translate 0 height)
                      (. tx :scale 1.0 -1.0)
                      (transform img tx width height))
      img)))


(defn 
  ^{ :arglists '(
          "(shear img shx shy)"
          "(shear img shx shy color)") 
     :doc """
          Shears an image vertically and/or horizontally. Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/shear 0.05 0.0)
                (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg"))))
          """ ) }

  shear 

  ([img shx shy]
    (shear img x y nil))
 
  ([img shx shy color]
    (assert (instance-of? :Image img))
    (assert (double? shx))
    (assert (double? shy))
    (assert (or (nil? color) (instance-of? :Color color)))

    (let [[width height] (dimension img)
          tx             (. :AffineTransform :new)]
      (. tx :shear shx shy)
      (transform img tx width height color))))


(defn 
  ^{ :arglists '(
          "(translate img x y)"
          "(translate img x y color)") 
     :doc """
          Translates from (0, 0) to the current (x, y) position. 
          Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/transalte 200 100)
                (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg"))))
          """ ) }

  translate 
  
  ([img x y]
    (translate img x y nil))

  ([img x y color]
    (assert (instance-of? :Image img))
    (assert (long? x))
    (assert (long? y))
    (assert (or (nil? color) (instance-of? :Color color)))

    (let [[width height] (dimension img)
          tx             (. :AffineTransform :new)]
      (. tx :translate x y)
      (transform img tx width height color))))


(defn- transform 
  ([img tx width height]
    (transform img tx width height nil))

  ([img tx width height color]
    (assert (instance-of? :Image img))
    (assert (and (long? width) (pos? width)))
    (assert (and (long? height) (pos? height)))

    (let [result (create-derived-image img width height)
          g2d    (. result :createGraphics)]
      (when color
        (. g2d :setColor color)
        (. g2d :fillRect 0 0 width height))
      (. g2d :drawImage img tx nil)
      (. g2d :dispose)
      result)))


;; -----------------------------------------------------------------------------
;; Crop / Pad / Resize
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(crop img x y width height)") 
     :doc """
          Crops an image. Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/crop 1000 1000 400 200)
                (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg"))))
          """ ) }

  crop [img x y width height]

  (assert (instance-of? :Image img))
  (assert (and (long? x) (long? y) (long? width) (long? height)))
  (assert (and (>= x 0) (>= y 0) (>= width 0) (>= height 0)))

  (let [[img-width img-height] (dimension img)]
    (when (> (+ x width) img-width)
      (throw (ex :VncException 
                 "Invalid crop bounds: x[~{x}] + width[~{width}] < img-width[~{img-width}]")))
    (when (> (+ y height) img-height)
      (throw (ex :VncException 
                 "Invalid crop bounds: y[~{y}]+ height[~{height}] < img-height[~{img-height}]")))

    (let [dest (create-derived-image img width height)
          g    (. dest :getGraphics)]
      (. g :drawImage img 
                      0 0 width height 
                      x y (+ x width) (+ y height)
                      nil)
        (. g :dispose)
      dest)))


(defn 
  ^{ :arglists '(
          "(pad img padding color)"
          "(pad img pad-top pad-right pad-bottom pad-left color)") 
     :doc """
          Pads an image. Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (import :java.awt.Color)
            (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                (images/pad 200 images/white)
                (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg"))))
          """ ) }

  pad 
  
  ([img padding color]
    (pad img padding padding padding padding color))
  
  ([img pad-top pad-right pad-bottom pad-left color]
    (assert (instance-of? :Image img))
    (assert (and (long? pad-top) (>= pad-top 0)))
    (assert (and (long? pad-right) (>= pad-right 0)))
    (assert (and (long? pad-bottom) (>= pad-bottom 0)))
    (assert (and (long? pad-left) (>= pad-left 0)))
    (assert (instance-of? :Color color))

    (let [[img-width img-height] (dimension img)
          img-alpha?   (not (opaque? img))
          width        (+ img-width pad-left pad-right)
          height       (+ img-height pad-top pad-bottom)
          type         (if (or (color-alpha? color) img-alpha?) TYPE_INT_ARGB TYPE_INT_RGB)
          dest         (. :BufferedImage :new width height type)
          g            (. dest :getGraphics)]

          ;; draw the padding border
          ;; +-+------------------+-+
          ;; |*|******************|*|
          ;; +-+------------------+-+
          ;; |*|                  |*|
          ;; |*|                  |*|
          ;; +-+------------------+-+
          ;; |*|******************|*|
          ;; +-+------------------+-+
          (. g :setColor color)
          (. g :fillRect 0 0 width pad-top)
          (. g :fillRect 0 pad-top pad-left (- height pad-top pad-bottom))
          (. g :fillRect (- width pad-right) pad-top pad-right (- height pad-top pad-bottom))
          (. g :fillRect 0 (- height pad-bottom) width pad-bottom)

          ; draw the centered image
          (. g :drawImage img pad-left pad-top nil)
          (. g :dispose)
      dest)))


(defn 
  ^{ :arglists '(
          "(resize-fit img size fit-mode)"
          "(resize img size fit-mode resize-mode)" )
     :doc """
          Resizes an image to a new size, a square of width and height the 
          image should fit within the size. 

          Resize modes: 
          
          | [![width: 15%]] | [![width: 85%]] |
          | `:fit-best`     | (default), fit within a square box of size 'size', \
                              keeps width / height ratio  |
          | `:fit-exact`    | fit exactly to a square of size 'size', \
                              causes distortions  |
          | `:fit-width`    | fit to width, keeps width / height ratio |
          | `:fit-height`   | fit to height, keeps width / height ratio |

          Resize modes: 
          
          | [![width: 15%]]        | [![width: 85%]]                         |
          | `:resize-auto`         | (default) chooses best mode             |
          | `:resize-performance`  | resize for best performance             |
          | `:resize-balanced`     | balance between performance and quality |
          | `:resize-quality`      | resize for quality                      |
          | `:resize-high-quality` | resize for high quality                 |

          Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (let [src (io/file "/Users/foo/Desktop/Pink-Forest.jpg")
                  dst (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg")]
              (-> (images/load src)
                  (images/resize-fit 500 :fit-best :resize-balanced)
                  (images/save "jpg" dst))
                  
              (println (io/file-name src) ":" (images/dimension src))
              (println (io/file-name dst) ":" (images/dimension dst))))
          """ )
     :see-also '(
          "images/resize" ) }

  resize-fit

  ([img size fit-mode]
    (resize-fit img size fit-mode :resize-auto))

  ([img size fit-mode resize-mode]
    (assert (instance-of? :Image img))
    (assert (and (long? size) (> size 0)))
    (assert (and (keyword? fit-mode) (contains? fit-modes fit-mode)))
    (assert (and (keyword? resize-mode) (contains? resize-modes resize-mode)))
 
    (let [[img-width img-height] (dimension img)]
      (case fit-mode
        :fit-exact
              (resize img size size resize-mode)

        :fit-width
              (let [factor (/ (double size) (double img-width))]
                (resize img size (scale img-height factor) resize-mode))

        :fit-height
              (let [factor (/ (double size) (double img-height))]
                (resize img (scale img-width factor) size resize-mode))

        :fit-best
              (let [factor-w (/ (double size) (double img-width))
                    factor-h (/ (double size) (double img-height))
                    factor   (cond
                               (and (>= factor-w 1.0) (>= factor-h 1.0)) 
                                 (min factor-w factor-h) ;; upscale
                               (and (>= factor-w 1.0) (< factor-h 1.0))
                                 factor-h ;; downscale
                               (and (< factor-w 1.0) (>= factor-h 1.0))
                                 factor-w ;; downscale
                               (and (< factor-w 1.0) (< factor-h 1.0))
                                 (max factor-w factor-h))] ;; downscale
                               :else 1.0
                    (resize img 
                      (scale img-width factor) 
                      (scale img-height factor)
                      resize-mode))
           
        ;; else
        (throw (ex :VncException 
                    "Internal error: unhandled fit-mode '~{fit-mode}'!"))))))


(defn 
  ^{ :arglists '(
          "(resize img width height)"
          "(resize img width height resize-mode)" )
     :doc """
          Resizes an image to a new width and height. 

          Resize modes: 
          
          | [![width: 15%]]        | [![width: 85%]].                        |
          | `:resize-auto`         | (default) chooses best mode             |
          | `:resize-performance`  | resize for best performance             |
          | `:resize-balanced`     | balance between performance and quality |
          | `:resize-quality`      | resize for quality                      |
          | `:resize-high-quality` | resize for high quality                 |

          Returns a new image.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (let [src (io/file "/Users/foo/Desktop/Pink-Forest.jpg")
                  dst (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg")]
              (-> (images/load src)
                  (images/resize 500 200 :resize-balanced)
                  (images/save "jpg" dst))
                  
              (println (io/file-name src) ":" (images/dimension src))
              (println (io/file-name dst) ":" (images/dimension dst))))
          """ )
     :see-also '(
          "images/resize-fit" ) }

  resize 
  
  ([img width height]
    (resize img width height :auto))

  ([img width height resize-mode]
    (assert (instance-of? :Image img))
    (assert (and (long? width) (> width 0)))
    (assert (and (long? height) (> height 0)))
    (assert (and (keyword? resize-mode) (contains? resize-modes resize-mode)))

    (let [[img-width img-height] (dimension img)
          img-ratio      (/ (double img-height) (double img-width))
          img-landscape? (<= img-ratio 1.0)
          resize-mode    (if (= resize-mode :resize-auto)
                           (scale-method width height img-landscape?)
                           resize-mode)]

      (if (and (== img-width width) (== img-height height))
        img ;; no change in size return original image
        (do
          ;; resize the image
          (case resize-mode
            :resize-performance    
                    (scale-image img width height 
                      (. :RenderingHints :VALUE_INTERPOLATION_NEAREST_NEIGHBOR))

            :resize-balanced
                    (scale-image img width height 
                      (. :RenderingHints :VALUE_INTERPOLATION_BILINEAR))

            :resize-quality        
                    (if (or (> width img-width) (> height img-height))
                      ;; scale up
                      (scale-image img width height 
                                    (. :RenderingHints :VALUE_INTERPOLATION_BICUBIC))
                      ;; scale down             
                      (scale-image img width height 
                                    (. :RenderingHints :VALUE_INTERPOLATION_BICUBIC)))
                              
            :resize-high-quality   
                    (if (or (> width img-width) (> height img-height))
                      ;; scale up
                      (scale-image img width height 
                                    (. :RenderingHints :VALUE_INTERPOLATION_BICUBIC))
                      ;; scale down             
                      (scale-image img width height 
                                    (. :RenderingHints :VALUE_INTERPOLATION_BICUBIC)))
            
            ;; else
            (throw (ex :VncException 
                      "Internal error: unhandled resize-mode '~{resize-mode}'!"))))))))


(defn- scale-image [img width height interpolation-hint]
  (let [dest (create-derived-image img width height)
        g2d  (cast :java.awt.Graphics2D (. dest :getGraphics))
        key  (. :RenderingHints :KEY_INTERPOLATION) ]
    (. g2d :setRenderingHint key interpolation-hint)
    (. g2d :drawImage img 0 0 width height nil)
    (. g2d :dispose)
    dest))


(defn- scale-method [width height img-landscape?]
  (let [length (if img-landscape? width height)]    
    (cond
      (<= length 800)   :quality
      (<= length 1600)  :balanced
      :else             :performance)))


(defn scale [size factor]
  (long (* (double size) (double factor))))



;; -----------------------------------------------------------------------------
;; Apply image OPs
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(apply-ops img ops)") 
     :doc """
          Applies one or multiple image operators (:java.awt.image.BufferedImageOp)
          to the image. 
          Returns a new image.

          Examples for image operators:

          ```
          (import :java.awt.color.ColorSpace
                  :java.awt.image.ColorConvertOp
                  :java.awt.image.ConvolveOp
                  :java.awt.image.Kernel
                  :java.awt.image.RescaleOp)

          (def convolve-op-antialias (. :ConvolveOp 
                                        :new 
                                        (. :Kernel :new 3 3 
                                                        [ 0.00F, 0.08F, 0.00F, 
                                                          0.08F, 0.68F, 0.08F,
                                                          0.00F, 0.08F, 0.00F ])
                                        (. :ConvolveOp :EDGE_NO_OP)
                                        nil))

          (def rescale-op-darker (. :RescaleOp :new 0.9F 0 nil))

          (def rescale-op-brighter (. :RescaleOp :new 1.1F 0 nil))

          (def color-convert-op-grayscale (as-> (. :ColorSpace :CS_GRAY) cs
                                                (. :ColorSpace :getInstance cs)
                                                (. :ColorConvertOp :new cs nil)))
          ```
          """
     :examples '(
          """
          ;; make the image brighter
          (do
            (load-module :images)
            (import :java.awt.image.RescaleOp)
            
            (let [op-brighter (. :RescaleOp :new 1.3F 0 nil)]
              (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                  (images/apply-ops [op-brighter])
                  (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg")))))
          """,
          """
          ;; convert the image to grayscale
          (do
            (load-module :images)
            (import :java.awt.color.ColorSpace)
            (import :java.awt.image.ColorConvertOp)

            (let [op-grayscale (as-> (. :ColorSpace :CS_GRAY) cs
                                     (. :ColorSpace :getInstance cs)
                                     (. :ColorConvertOp :new cs nil))]
              (-> (images/load (io/file "/Users/foo/Desktop/Pink-Forest.jpg"))
                  (images/apply-ops [op-grayscale])
                  (images/save "jpg" (io/file "/Users/foo/Desktop/Pink-Forest-1.jpg")))))
          """,
           ) }

  apply-ops [img ops]

  (assert (instance-of? :Image img))
  (assert (sequential? ops))
  (assert (not-empty? ops))
  (assert (every? #(instance-of? :BufferedImageOp %) ops))

  (let [src (if (rgb-or-argb-image? img) img (copy-to-derived-image img))]
    (loop [src        src
           ops        (filter some? ops)
           reassigned false]
      (let [op            (first ops) 
            result-bounds (. op :getBounds2D src)]
        (when (nil? result-bounds)
          (throw (ex :VncException (str "BufferedImageOp[" op "] get bounds returned nil."))))
        (let [w      (long (. result-bounds :getWidth))
              h      (long (. result-bounds :getHeight))
              dest   (create-derived-image src w h)
              result (. op :filter src dest)]
          (when reassigned (. src :flush))
          (if (<= (count ops) 1)
            result
            (recur result (rest ops) true)))))))



;; -----------------------------------------------------------------------------
;; Utils
;; -----------------------------------------------------------------------------

(defn 
  ^{ :arglists '(
          "(format-names)") 
     :doc """
          Returns a list of format that the image writer supports.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (images/format-names))
          """ ) }

  format-names []

  (. :ImageIO :getWriterFormatNames))


(defn 
  ^{ :arglists '(
          "(point x y)") 
     :doc """
          Creates a :java.awt.Point.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (images/point 0 0))
          """ ) }

  point [x y]

  (assert (long? x))
  (assert (long? y))

  (. :java.awt.Point :new x y))


(defn 
  ^{ :arglists '(
          "(rectangle x y width height)") 
     :doc """
          Creates a :java.awt.Rectangle.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (images/rectangle 0 0 200 100))
          """ ) }

  rectangle [x y width height]

  (assert (long? x))
  (assert (long? y))
  (assert (long? width))
  (assert (long? height))

  (. :java.awt.Rectangle :new x y width height))


(defn 
  ^{ :arglists '(
          "(polygon points)") 
     :doc """
          Creates a :java.awt.Polygon.
          """
     :examples '(
          """
          (do
            (load-module :images)
            (images/polygon [[0 0] [0 100] [100 100]  [100 0] [0 0]]))
          """ ) }

  polygon [points]

  (assert (sequential? points))
 
  (loop [poly   (. :java.awt.Polygon :new) 
         points points]
    (if (empty? points)
      poly
      (let [[x y] (first points)]
        (. poly :addPoint x y)
        (recur poly (rest points))))))



;; -----------------------------------------------------------------------------
;; Internals
;; -----------------------------------------------------------------------------

(defn- create-derived-image 
  ([src]
    (create-derived-image src (long (. src :getWidth)) (long (. src :getHeight))))

  ([src width height]
    (assert (instance-of? :Image src))
    (assert (and (long? width) (pos? width)))
    (assert (and (long? height) (pos? height)))
  
    (let [type  (if (opaque? src) TYPE_INT_RGB TYPE_INT_ARGB)]
      (. :BufferedImage :new width height type))))


(defn- copy-to-derived-image [img]
  (let [width        (long (. img :getWidth))
        height       (long (. img :getHeight))
        type         (if (opaque? img) TYPE_INT_RGB TYPE_INT_ARGB)
        dest         (. :BufferedImage :new width height type)
        gd           (. dest :getGraphics)]
    (. gd :drawImage img 0 0 nil)
    (. gd :dispose)
    dest))


(defn- rgb-or-argb-image? [img]
  (contains? #{TYPE_INT_RGB, TYPE_INT_ARGB} (. img :getType)))


(defn- opaque? [img]
  (== (. img :getTransparency) (. :Transparency :OPAQUE)))


(defn- color-alpha? [color] 
  (not= (long (. color :getAlpha)) 255))
