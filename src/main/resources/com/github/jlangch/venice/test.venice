;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Testing framework

;;;; This is a Venice port of Clojure's test framework.
;;;; (https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj)

;   Copyright (c) Rich Hickey. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.


(ns test)



(def-dynamic *testing-vars* (list))  ; bound to hierarchy of vars being tested

(def-dynamic *report-counters* nil)	 ; bound to a ref of a map in test-ns

(def-dynamic *test-out* *out*)       ; PrintWriter for test reporting output



;; -----------------------------------------------------------------------------
;; P U B L I C   A P I
;; -----------------------------------------------------------------------------

(defmacro
  ^{ :arglists '("(deftest name & body)" )
     :doc """
          Defines a test function with no arguments.

          Note: Actually, the test body goes in the :test metadata on the var,
          and the real function (the value of the var) calls test-var on
          itself.
          """
     :examples '(
          """
          (do
            (load-module :test)

            (ns foo-test)

            (test/deftest add-test []
              (assert-eq 0 (+ 0 0))
              (assert-eq 3 (+ 1 2)))

            (test/deftest mul-test []
              (assert-eq 6 (* 2 3)))

            (ns bar)
            (test/run-tests 'foo-test))
          """,
          """
          ;; Explicit setup/teardown
          (do
            (load-module :test)

            (test/deftest sum-test []
              (let [f (io/temp-file "test-", ".txt")]
                (try
                  (io/spit f "1234" :append true)
                  (assert-eq "1234" (io/slurp f :binary false))
                  (finally
                    (io/delete-file f)))))

            (test/run-tests *ns*))
          """)
     :see-also '(
          "test/run-tests", "test/run-test-var", "test/use-fixtures" ) }

  deftest [test-name & body]

  `(def ~(vary-meta test-name assoc :test-fn `(fn [] ~@body)
                                    :test-fn-name (str *ns* "/" test-name))
        (fn [] (test/test-var (var-get ~test-name)))))


(defn
  ^{ :arglists '("(run-tests & namespaces)" )
     :doc """
          Runs all tests in the given namespaces; prints results.
          Returns a map summarizing test results.
          """
     :examples '(
          """
          (do
            (ns foo)
            (load-module :test)

            (test/deftest plus-test []
              (assert-eq 3 (+ 1 2)))

            (test/run-tests 'foo))
          """)
     :see-also '(
          "test/deftest", "test/run-test-var", "test/use-fixtures" ) }

  run-tests [& namespaces]

  (when (seq namespaces)
    (let [summary (assoc (apply merge-with + (map test-ns namespaces))
                         :type :summary)]
      (do-report summary)
      summary)))


(defn
  ^{ :arglists '("(run-test-var v)")
     :doc """
          Runs a single test; prints results. Returns a map summarizing the test
          results.
          """
     :examples '(
          """
          (do
            (load-module :test)

            (test/deftest plus-test []
              (assert-eq 3 (+ 1 2)))

            (test/run-test-var plus-test))
          """)
     :see-also '(
          "test/deftest", "test/run-tests", "test/use-fixtures" ) }

  run-test-var [v]

  (when (some? v)
    (binding [*report-counters*  {:test 0, :pass 0, :fail 0, :error 0, :assert 0}]
      (let [ns-sym (symbol (namespace v))]
        (do-report {:type :begin-test-ns, :ns ns-sym})
        (test-vars [v])
        (do-report {:type :end-test-ns, :ns ns-sym})
        (let [summary (assoc *report-counters* :type :summary)]
          (do-report summary)
          summary)))))


(defn
  ^{ :arglists '("(successful? summary)" )
     :doc """
          Returns true if the given test summary indicates all tests
          were successful, false otherwise.
          """
     :examples '(
          """
          (do
            (ns foo)
            (load-module :test)

            (test/deftest plus-test []
              (assert-eq 3 (+ 1 2)))

            (let [summary (test/run-tests 'foo)]
              (test/successful? summary)))
          """)
     :see-also '(
          "test/deftest",
          "test/run-tests", "test/run-test-var",
          "test/use-fixtures") }

  successful? [summary]

  (and (zero? (:fail summary 0))
       (zero? (:error summary 0))))


  ; fixtures -------------------------------------------------------------------

  (defmulti
    ^{ :arglists '("(use-fixtures ns fixture-type & fixture-fns)" )
       :doc """
            Wrap test runs in a fixture function to perform setup and
            teardown. Using a fixture-type of `:each` wraps every test
            individually, while `:once` wraps the whole run in a single
            function.
            """
       :examples '(
            """
            ;; Fixtures :each
            ;; Adds logic for a setup and teardown method that will be called
            ;; before and after each test
            (do
              (load-module :test)

              (defn each-time-setup []
                (println "FIXTURE each time setup"))

              (defn each-time-teardown []
                (println "FIXTURE each time teardown"))

              (defn each-fixture [f]
                (each-time-setup)
                (try
                  (f)
                  (finally (each-time-teardown))))

              ;; register as a each-time callback
              (test/use-fixtures *ns* :each each-fixture)

              (test/deftest add-test []
                (assert-eq 3 (+ 1 2)))

              (test/deftest sub-test []
                (assert-eq 3 (- 4 1)))

              (test/run-tests *ns*))
            """,
            """
            ;; Fixtures :once
            ;; Adds logic for a setup and teardown method that will be called
            ;; before the first and after the last test as an initial setup
            ;; and final teardown
            (do
              (load-module :test)

              (defn one-time-setup []
                (println "FIXTURE one time setup"))

              (defn one-time-teardown []
                (println "FIXTURE one time teardown"))

              (defn one-fixture [f]
                (one-time-setup)
                (try
                  (f)
                  (finally (one-time-teardown))))

              ;; register as a one-time callback
              (test/use-fixtures *ns* :once one-fixture)

              (test/deftest add-test []
                (assert-eq 3 (+ 1 2)))

              (test/deftest sub-test []
                (assert-eq 3 (- 4 1)))

              (test/run-tests *ns*))
            """)
       :see-also '("test/deftest", "test/run-tests", "test/run-test-var") }

    use-fixtures

    (fn [ns° fixture-type & fixture-fns] fixture-type))


  (defmethod use-fixtures :each [ns° fixture-type & fixture-fns]
    (add-ns-meta (var-get ns°) :each-fixtures fixture-fns))

  (defmethod use-fixtures :once [ns° fixture-type & fixture-fns]
    (add-ns-meta (var-get ns°) :once-fixtures fixture-fns))




;; -----------------------------------------------------------------------------
;; I M P L E M E N T A T I O N
;; -----------------------------------------------------------------------------

(defn test-var? [v]
  (and (some? v)
       (some? (:test-fn (meta v)))))

(defn
  ^{ :arglists '("(test-ns ns)" )
     :doc "Calls `test-vars` with all vars in the namespace ns" }

  test-ns [ns°]

  (binding [*report-counters*  {:test 0, :pass 0, :fail 0, :error 0, :assert 0}]
    (let [ns-sym (symbol (namespace ns°))]
      (do-report {:type :begin-test-ns, :ns ns-sym})
      (test-vars (ns-list ns-sym))
      (do-report {:type :end-test-ns, :ns ns-sym})
      *report-counters*)))


(defn test-vars [vars]
  (doseq [[ns° vars] (group-by (comp :ns meta) vars)]
    (let [once-fixture-fn (join-fixtures (:once-fixtures (ns-meta (symbol ns°))))
          each-fixture-fn (join-fixtures (:each-fixtures (ns-meta (symbol ns°))))]
      (once-fixture-fn (fn []
                         (doseq [v (filter test-var? vars)]
                           (each-fixture-fn (fn [] (test-var v)))))))))


(defn
  ^{ :arglists '("(test-var v)" )
     :doc "If v has a function in its :test metadata, calls that function." }

  test-var [v]

  (if-let [test-fn (:test-fn (meta v))]
    (let [test-name (:test-fn-name (meta v))]
      (binding [*testing-vars* (conj *testing-vars* v), *assertions* 0]
        (do-report {:type :begin-test-var, :fn-name test-name, :var v})
        (try (test-fn)
             (do-report {:type :pass, :fn-name test-name, :var v})
             (catch :AssertionException e
               (do-report {:type :fail
                           :fn-name test-name
                           :message "Test assert failure."
                           :ex e}))
             (catch :VncException e
               (do-report {:type :error
                           :fn-name test-name
                           :message "Uncaught exception, not in assertion."
                           :ex e})))
        (do-report {:type :end-test-var, :fn-name test-name, :var v})))
    (println *err* "Unable to resolve" (qualified-name v) "to a test function!")))


;; fixtures --------------------------------------------------------------------

;; Adds elements in coll to the current namespace metadata as the
;; value of key.
(defn- add-ns-meta [ns° key coll]
  (alter-ns-meta! (var-get ns°) assoc key coll))

;; The default, empty, fixture function.  Just calls its argument.
(defn- default-fixture [f] (f))

;; Composes two fixture functions, creating a new fixture function
;; that combines their behavior.
(defn- compose-fixtures [f1 f2]
  (fn [g] (f1 (fn [] (f2 g)))))

;; Composes a collection of fixtures, in order. Always returns a valid
;; fixture function, even if the collection is empty.
(defn- join-fixtures [fixtures]
  (reduce compose-fixtures default-fixture fixtures))


;; reporting -------------------------------------------------------------------

(defn do-report [m]
  (binding [*out* *test-out*]
    (report m)))

(defn inc-report-counter [name]
  (when *report-counters*
    (set! *report-counters* (update *report-counters* name inc))))

(defn add-report-counter [name count]
  (when *report-counters*
    (set! *report-counters* (update *report-counters* name + count))))

(defmulti report :type)

(defmethod report :default [m]
  (prn m))

(defmethod report :pass [m]
  (inc-report-counter :pass)
  (add-report-counter :assert *assertions*)
  (println "PASS" (:fn-name m)))

(defmethod report :fail [m]
  (inc-report-counter :fail)
  (add-report-counter :assert *assertions*)
  (println "\nFAIL" (:fn-name m))
  (println (:message m))
  (println (ex-venice-stacktrace (:ex m))))

(defmethod report :error [m]
  (inc-report-counter :error)
  (add-report-counter :assert *assertions*)
  (println "\nERROR in" (:fn-name m))
  (println (:message m))
  (println (ex-venice-stacktrace (:ex m))))

(defmethod report :summary [m]
  (println "\nRan" (:test m) "tests with" (:assert m) "assertions")
  (println (:fail m) "failures," (:error m) "errors.\n"))

(defmethod report :begin-test-ns [m]
  (println "\nTesting namespace" (str "'" (namespace (:ns m)) "\n")))

(defmethod report :begin-test-var [m]
  (inc-report-counter :test))

;; Ignore these message types:
(defmethod report :end-test-ns [m])
(defmethod report :end-test-var [m])
