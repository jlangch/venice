;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Maven utilities


(ns maven)

(load-module :ansi)
(load-module :zipvault)


(def repo "https://repo1.maven.org/maven2")

(def exludes-junit ["org.junit.*" "org.opentest4j" "org.apiguardian,junit"])

(def maven-version "3.9.6")

(def maven-uri "https://dlcdn.apache.org/maven/maven-3/{{version}}/binaries/apache-maven-{{version}}-bin.zip")


(defn
  ^{ :arglists '(
        "(maven/parse-artifact artifact)"
        "(maven/parse-artifact artifact file-suffix)"
        "(maven/parse-artifact artifact file-suffix repo)")
     :doc
        """
        Parses a Maven artifact like 'com/vaadin:vaadin-client:8.7.2'

        1. (maven/parse-artifact artifact)¶
           returns a vector with group-id, artifact-id, and version
        2. (maven/parse-artifact artifact file-suffix)¶
           returns a vector with group-id, artifact-id, version and file name
        3. (maven/parse-artifact artifact file-suffix repo)¶
           returns a vector with the Maven download URI and the file name
        """
     :examples '(
        """
        (maven/parse-artifact "org.knowm.xchart:xchart:3.8.1")
        """,
        """
        (maven/parse-artifact "org.knowm.xchart:xchart:3.8.1"
                              ".jar")
        """
        """
        (maven/parse-artifact "org.knowm.xchart:xchart:3.8.1"
                              ".jar"
                              "https://repo1.maven.org/maven2")
        """ )
     :see-also '("maven/download", "maven/get", "maven/uri") }

  maven/parse-artifact

  ([artifact]
    (let [elements    (str/split artifact ":")
          group-id    (first elements)
          artifact-id (second elements)
          version     (third elements) ]
      [group-id artifact-id version]))

  ([artifact file-suffix]
    (let [[group-id artifact-id version] (maven/parse-artifact artifact)
          file-name (str artifact-id "-" version file-suffix)]
      [group-id artifact-id version file-name]))

  ([artifact repo file-suffix]
    (let [[group-id artifact-id version file-name] (maven/parse-artifact artifact file-suffix)
          group-path (str/replace-all group-id "." "/")
          uri (str/join "/" [repo group-path artifact-id version file-name])]
      [uri file-name])))

;; for compatibilty
(def maven/parse-artefact maven/parse-artifact)


(defn
  ^{ :arglists '("(maven/download artifact options*)")
     :doc """
          Downloads an artifact in the format 'group-id:artifact-id:version'
          from a Maven repository. Can download any combination of the jar,
          sources, or pom artifacts to a directory.

          Options:

          | :jar {true,false}     | download the jar, defaults to true |
          | :sources {true,false} | download the sources, defaults to false |
          | :pom {true,false}     | download the pom, defaults to false |
          | :dir path             | download dir, defaults to "." |
          | :repo maven-repo      | a maven repo, defaults to \
                                    "https://repo1.maven.org/maven2" |
          | :silent {true,false}  | if silent is true does not show a progress \
                                    bar, defaults to true |
          | :force {true,false}   | if force is true download the artifact \
                                    even if it exist already on the download \
                                    dir, else skip the download if it exists. \
                                    Defaults to true. |
          """
     :examples '(
          """(maven/download "org.knowm.xchart:xchart:3.8.1")"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :sources true :pom true)"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :jar false :sources true)"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :sources true)"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :sources true :repo "https://repo1.maven.org/maven2")"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :silent false)""" )
     :see-also '("maven/get", "maven/uri", "maven/parse-artifact") }

  maven/download [artifact & options]

  (let [opts        (apply hash-map options)
        silent      (or (:silent opts true) (not (repl?)))
        jar         (:jar opts true)
        sources     (:sources opts false)
        pom         (:pom opts false)
        dir         (:dir opts ".")
        repo        (:repo opts maven/repo)
        force       (:force opts true)
        progress-fn (maven/progress-bar silent)]
    (when jar
      (let [suffix         (maven/artifact-suffix :jar)
            [uri filename] (maven/parse-artifact artifact repo suffix)]
        (maven/download-artifact-file uri dir filename force progress-fn)))
    (when sources
      (let [suffix         (maven/artifact-suffix :sources)
            [uri filename] (maven/parse-artifact artifact repo suffix)]
        (maven/download-artifact-file uri dir filename force progress-fn)))
    (when pom
      (let [suffix         (maven/artifact-suffix :pom)
            [uri filename] (maven/parse-artifact artifact repo suffix)]
        (maven/download-artifact-file uri dir filename force progress-fn)))
    nil))


(defn
  ^{ :arglists '("(maven/get artifact type options*)")
     :doc """
          Downloads artifact in the format 'group-id:artifact-id:version'
          from a Maven repository. The artifact type 'type' is one of
          {:jar, :sources, :pom}.

          Returns the artifact as byte buffer.

          Options:

          | :repo maven-repo     | a maven repo, defaults to "https://repo1.maven.org/maven2" |
          | :silent {true,false} | if silent is true does not show a progress bar, defaults to true |
          """
     :examples '(
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :jar)"""
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :jar :silent false)"""
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :sources)"""
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :jar :repo "https://repo1.maven.org/maven2")""" )
     :see-also '("maven/download", "maven/uri", "maven/parse-artifact") }

  maven/get [artifact type & options]

  (let [opts         (apply hash-map options)
        silent       (or (:silent opts true) (not (repl?)))
        repo         (:repo opts maven/repo)
        suffix       (maven/artifact-suffix type)
        progress-fn  (maven/progress-bar silent)
        [uri _]      (maven/parse-artifact artifact repo suffix)]
    (maven/get-artifact-file uri progress-fn)))


(defn
  ^{ :arglists '("(maven/uri artifact type options*)")
     :doc """
          Returns an URI for an artifact in the format 'group-id:artifact-id:version'
          from a Maven repository.

          The artifact type 'type' is one of {:jar, :sources, :pom}

          Options:

          | :repo maven-repo | a maven repo, defaults to "https://repo1.maven.org/maven2" |
          """
     :examples '(
          """(maven/uri "org.knowm.xchart:xchart:3.8.1" :jar)"""
          """(maven/uri "org.knowm.xchart:xchart:3.8.1" :jar :repo "https://repo1.maven.org/maven2")""" )
     :see-also '("maven/download", "maven/get", "maven/parse-artifact") }

  maven/uri [artifact type & options]

  (let [opts      (apply hash-map options)
        repo      (:repo opts maven/repo)
        suffix    (maven/artifact-suffix type)
        [uri _]   (maven/parse-artifact artifact repo suffix)]
    uri))


(defn
  ^{ :arglists '("(maven/mvn proj-dir & args)")
     :doc """
          Runs a Maven command

          Relies on the environment variable `MAVEN_HOME` to access Maven.
          """
     :examples '(
          """
          (->> (maven/mvn "/Users/foo/projects/my-project" "compile")
               (println))
          """
          """
          (->> (maven/mvn "/Users/foo/projects/my-project" "-X" "package")
               (println))
          """) }

  maven/mvn [proj-dir & args]

  (when-not (io/exists-dir? proj-dir)
    (throw (ex :VncExeption "The proj dir '~{proj-dir}' does not exist!")))

  (with-sh-dir proj-dir 
    (let [binary  (maven/mvn-binary)]
      (->> ((maven/exec) (str/join " " (cons binary args)) :throw-ex true)
           (:out)))))
 

(defn
  ^{ :arglists '("(maven/version)")
     :doc """
          Runs the Maven version command and prints the commands output.

          Relies on the environment variable `MAVEN_HOME` to access Maven.
          """
     :examples '(
          """(maven/version)""")
     :see-also '(
          "maven/home-dir" )  }

  maven/version []

  (let [binary  (maven/mvn-binary)]     
    (->> ((maven/exec) (str binary " --version") :throw-ex true)
         (:out)
         (println))))


(defn
  ^{ :arglists '("(maven/dependencies scope artifacts)")
     :doc """
          Returns the dependency tree of an artifact

          Relies on the environment variable `MAVEN_HOME` to access Maven.

          The scope is one of:
         
          * `:compile` - build, test and run
          * `:provided` - build and test
          * `:runtime` - test and run
          * `:test` - compile and test

          Excludes dependencies with the group ids (except for :test scope):

          * org.junit.*
          * org.opentest4j
          * org.apiguardian
          * junit

          Example:
          
          ```
          (maven/dependencies :compile "org.knowm.xchart:xchart:3.8.6")
          ````

          ```
          org.knowm.xchart:xchart:jar:3.8.6:compile
          +- de.erichseifert.vectorgraphics2d:VectorGraphics2D:jar:0.13:compile
          +- de.rototor.pdfbox:graphics2d:jar:3.0.0:compile
          |  \\- org.apache.pdfbox:pdfbox:jar:3.0.0:compile
          |     +- org.apache.pdfbox:pdfbox-io:jar:3.0.0:compile
          |     +- org.apache.pdfbox:fontbox:jar:3.0.0:compile
          |     \\- commons-logging:commons-logging:jar:1.2:compile
          \\- com.madgag:animated-gif-lib:jar:1.4:compile
          ```
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/dependencies :compile "org.knowm.xchart:xchart:3.8.6"))
          """) }

  maven/dependencies [scope & artifacts]

  (assert (or (nil? scope) (#{:compile :runtime :test :provided} scope)))
  (assert (sequential? artifacts))
  (assert (not-empty? artifacts))
  (assert (every? string? artifacts))

  (let [excludes  (if (= :test scope) [] maven/exludes-junit)]
    (->> (maven/dependencies* scope excludes artifacts true)
         (println))))


(defn 
  ^{ :arglists '(
          "(maven/install)"
          "(maven/install version)")
     :doc """
          Installs Apache Maven to {repl-home-dir}/tools/apache-maven-x.y.z

          Installation is possible from within a REPL only!
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/install))  ;; installs default version 3.9.6
          """
          """
          (do
            (load-module :maven)
            (maven/install "3.9.5"))
          """)
     :see-also '(
          "maven/home-dir"
          "maven/uninstall" )  }

  install 

  ([]
    (maven/install maven-version))

  ([version]
    (when-not (repl?)
      (throw (ex :VncException "Apache Maven can be installed from a REPL only!")))
      
    (let [uri             (maven-download-uri version)
          repl-tools-dir  (io/file (repl/home-dir) "tools")
          progress-fn     (maven/progress-bar false)
          zip-name        (last (str/split uri "/"))
          zip             (io/file repl-tools-dir zip-name)
          maven-dir       (io/file repl-tools-dir (str/strip-end zip-name "-bin.zip"))]
      (when-not (io/exists-dir? repl-tools-dir)
        (io/mkdir repl-tools-dir))

      (if (io/exists-dir? maven-dir)
        (println "Maven ~{version} is already installed at ~{maven-dir}")
        (do
          ;; download Maven binary zip
          (maven/download-artifact-file uri repl-tools-dir zip-name false progress-fn)
          
          ;; unpack Maven binary zip
          (println "Unzipping ~{zip-name}...")
          (zipvault/extract-all zip repl-tools-dir)
          
          ;; remove downloaded Maven binary zip
          (io/delete-file zip)

          (println "Maven installed to ~{maven-dir}"))))))


(defn 
  ^{ :arglists '("(maven/uninstall)")
     :doc """
          Uninstalls Apache Maven from {repl-home-dir}/tools

          Uninstallation is possible from within a REPL only!
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/uninstall))
          """)
     :see-also '(
          "maven/home-dir"
          "maven/install" ) }

  uninstall []

  (when-not (repl?)
    (throw (ex :VncException "Apache Maven can be uninstalled from a REPL only!")))
 
  (doseq [dir (mvn-install-dirs-repl)] 
    (println "Removing ~{dir}")
    (io/delete-file-tree dir)))



(defn 
  ^{ :arglists '("(maven/home-dir)")
     :doc """
          Returns the Apache Maven home directory or nil if Maven is not
          installed.

          If a REPL is active checks first for local Apache Maven installation
          in the REPL, if none is available checks the environment variable
          'MAVEN_HOME'.

          If a REPL is not active checks the environment variable 'MAVEN_HOME'. 
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/home-dir))
          """)
     :see-also '(
          "maven/uninstall"
          "maven/install" )  }

  home-dir []

  (try
    (mvn-home)
    (catch :RuntimeException e nil)))


(defn- maven/artifact-suffix [type]
  (case type
    :jar     ".jar"
    :sources "-sources.jar"
    :pom     ".pom"
    (throw (ex :VncException "Invalid artifact type ~{type}"))))


(defn- progress-bar [silent]
  (if silent
    nil
    (ansi/progress-bar :caption     "            "
                       :start-msg   "    started "
                       :end-msg     "            OK"
                       :failed-msg  "            FAILED")))


(defn- download-artifact-file [uri target-dir target-file force progress-fn]
  (let [target   (str target-dir "/" target-file)
        download (or force (not (io/exists-file? target)))]
    (if download
      (do
        (when progress-fn
          (println (str "Downloading " uri))
          (println (str "         to " target "...")))
        (ansi/without-cursor
          (->> (io/download uri :binary true :progress-fn progress-fn)
               (io/spit target))))
      (when progress-fn
        (println (str "Downloading " uri))
        (println (str "         to " target))
        (println (str "            " "ALREADY EXISTS (skipped)"))))))


(defn- get-artifact-file [uri progress-fn]
  (when progress-fn
    (println (str "Downloading " uri "...")))
  (ansi/without-cursor
    (io/download uri :binary true :progress-fn progress-fn)))


(defn- dependencies* [scope excludes artifacts extract-deps]
  (let [temp-dir  (io/temp-dir "maven-")
        proj-dir  (io/file temp-dir "demolibrary")
        pom-file  (io/file proj-dir "pom.xml")]
    (io/delete-file-on-exit temp-dir)

    (try
      ;; create the maven project in temp-dir
      (maven/mvn temp-dir "archetype:generate"
                          "-DgroupId=com.demolibrary" 
                          "-DartifactId=demolibrary"
                          "-DarchetypeArtifactId=maven-archetype-quickstart" 
                          "-DarchetypeVersion=1.0"
                          "-DinteractiveMode=false")

      ;; add the artefacts to the project's pom
      (as-> (io/slurp pom-file) pom
            (pom-add-dependencies pom artifacts scope)
            (io/spit pom-file pom))

      ;; compute the dependency tree
      (let [options (str "-Dexcludes=" (str/join "," excludes))
            options (if (empty? excludes) [] [options])
            output  (apply maven/mvn proj-dir "dependency:tree" options)]
        (if extract-deps
          (maven/extract-dependency-tree output)
          output))
    (finally 
      (when (io/exists-dir? temp-dir)
        (io/delete-file-tree temp-dir))))))


(defn- extract-dependency-tree [output]
  (->> (str/split-lines output)
       (drop-while #(not (str/starts-with? % "[INFO] com.demolibrary:demolibrary:jar:1.0")))
       (take-while #(not (str/starts-with? % "[INFO] -----------------")))
       (rest)
       (map #(str/subs % 10))
       (str/join "\n")))


(defn- mvn-install-dirs-repl []
  (if (repl?)
    (let [repl-tools-dir  (io/file (repl/home-dir) "tools")]
      (if (io/exists-dir? repl-tools-dir)
        (->> (io/list-files-glob repl-tools-dir "apache-maven-*")
             (filter io/exists-dir?)
             (sort))
        []))
    []))


(defn- mvn-home []
  (if (repl?) 
    (if-let [home (mvn-home-from-local)] home (mvn-home-from-env))
    (mvn-home-from-env)))


(defn- mvn-home-from-env []
  (let [home (system-env :MAVEN_HOME)]
    (assert (some? home) 
            "The env variable 'MAVEN_HOME' does not exist!")
    (assert (io/exists-dir? home) 
            "The Maven home dir '~{home}' does not exist!")
    home))


(defn- mvn-home-from-local []
  (let [dir (last (mvn-install-dirs-repl))]
    (if (and (some? dir) (io/exists-dir? dir)) dir nil)))


(defn- mvn-binary []
  (case (os-type)
    :mac-osx (str (maven/mvn-home) "/bin/mvn")
    :linux   (str (maven/mvn-home) "/bin/mvn")
    :windows (str (maven/mvn-home) "/bin/mvn.cmd")))


(defn- validate-mvn-binary [binary]
    (assert (io/exists-file? binary) 
            "The Maven tool '~{binary}' does not exist!")
    (assert (io/file-can-execute? binary) 
            "The Maven tool '~{binary}' has no executable permissions!"))


(defn- exec []
  (case (os-type)
    :mac-osx (partial sh "/bin/sh" "-c")
    :linux   (partial sh "/bin/sh" "-c")
    :windows (partial sh "cmd" "/C")))


(defn- pom-add-dependencies [pom artifacts scope]
  (loop [pom pom, artifacts (reverse artifacts)]
    (if (empty? artifacts)
      pom
      (recur (pom-add-dependency pom (first artifacts) scope) 
             (rest artifacts)))))


(defn- pom-add-dependency [pom artifact scope]
  (let [idx      (str/index-of pom "<dependencies>")
        [p1 p2]  (str/split-at pom (+ idx (count "<dependencies>")))]
    (str p1 (pom-dependency artifact scope) p2)))


(defn- pom-dependency [artifact scope]
  (let [[group-id artifact-id version]  (maven/parse-artifact artifact)]
   (if (nil? scope)
      """

          <dependency>
            <groupId>~{group-id}</groupId>
            <artifactId>~{artifact-id}</artifactId>
            <version>~{version}</version>
          </dependency>
      """
      """

          <dependency>
            <groupId>~{group-id}</groupId>
            <artifactId>~{artifact-id}</artifactId>
            <version>~{version}</version>
            <scope>~(name scope)</scope>
          </dependency>
      """)))

(defn- maven-download-uri [version]
   (str/replace-all maven-uri "{{version}}" version))
