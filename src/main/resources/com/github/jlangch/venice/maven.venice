;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2025 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Maven utilities


(ns maven)

(load-module :ansi)
(load-module :kira)
(load-module :zipvault)


(def repo "https://repo1.maven.org/maven2")

(def exludes-junit ["org.junit.*" "org.opentest4j" "org.apiguardian,junit"])

(def maven-version "3.9.6")

(def maven-binary-uri "https://archive.apache.org/dist/maven/maven-3/{{version}}/binaries/apache-maven-{{version}}-bin.zip")


(defn 
 ^{ :arglists '(
        "(maven/parse-artifact artifact)")
     :doc
        """
        Parses a Maven artifact 
        
        Form 1: "org.knowm.xchart:xchart:3.8.6"

        ```
        { :group-id     "org.knowm.xchart"
          :artifact-id  "xchart"
          :version      "3.8.6" }
        ```

        Form 2: "org.knowm.xchart:jar:xchart:3.8.6"

        ```
        { :group-id     "org.knowm.xchart"
          :artifact-id  "xchart"
          :version      "3.8.6"
          :type         :jar }
        ```

        Form 3:  "org.knowm.xchart:jar:xchart:3.8.6:compile"
 
        ```
        { :group-id     "org.knowm.xchart"
          :artifact-id  "xchart"
          :version      "3.8.6"
          :type         :jar
          :scope        :compile }
        ```
       """
     :examples '(
        """
        (do
          (load-module :maven)
          (maven/parse-artifact "org.knowm.xchart:xchart:3.8.6"))
        """ )
     :see-also '(
        "maven/artifact-filename"
        "maven/artifact-uri"
        "maven/download", 
        "maven/get" ) }

  maven/parse-artifact [artifact]

  (let [elements (str/split artifact ":")]
    (case (count elements)
         ;; "org.knowm.xchart:xchart:3.8.6"
      3  { :group-id    (first elements)
           :artifact-id (second elements)
           :version     (third elements) }
         ;; "org.knowm.xchart:xchart:jar:3.8.6"
      4  { :group-id    (first elements)
           :artifact-id (second elements)
           :type        (keyword (third elements))
           :version     (fourth elements) }
         ;; "org.knowm.xchart:xchart:jar:3.8.6:compile"
      5  { :group-id    (first elements)
           :artifact-id (second elements)
           :type        (keyword (third elements))
           :version     (fourth elements)
           :scope       (keyword (nth elements 4)) }
      (throw (ex :VncException "Invalid artifact reference '~{artifact}'!")))))

(defn 
 ^{ :arglists '(
        "(maven/artifact-filename artifact file-suffix)")
     :doc
        """
        Returns the artifact file name
        
        "org.knowm.xchart:xchart:3.8.6" -> "xchart-3.8.6.jar"
       """
     :examples '(
        """
        (do
          (load-module :maven)
          (maven/artifact-filename "org.knowm.xchart:xchart:3.8.6" ".jar"))
        """ 
        """
        (do
          (load-module :maven)
          (maven/artifact-filename "org.knowm.xchart:xchart:3.8.6" "-sources.jar"))
        """)
     :see-also '(
        "maven/parse-artifact"
        "maven/artifact-uri"
        "maven/download", 
        "maven/get") }

  maven/artifact-filename [artifact file-suffix]

  (let [a (maven/parse-artifact artifact)]
    (str (:artifact-id a) "-" (:version a) file-suffix)))


(defn 
 ^{ :arglists '(
        "(maven/artifact-uri artifact file-suffix)"
        "(maven/artifact-uri artifact file-suffix repo)")
     :doc
        """
        Returns the artifact URI
        
        "org.knowm.xchart:xchart:3.8.6" 
        -> 
        "https://repo1.maven.org/maven2/org/knowm/xchart/xchart-3.8.6.jar"
       """
     :examples '(
        """
        (do
          (load-module :maven)
          (maven/artifact-uri "org.knowm.xchart:xchart:3.8.6" ".jar"))
        """
        """
        (do
          (load-module :maven)
          (maven/artifact-uri "org.knowm.xchart:xchart:3.8.6" "-sources.jar"))
        """
        """
        (do
          (load-module :maven)
          (maven/artifact-uri "org.knowm.xchart:xchart:3.8.6" ".pom"))
        """
        """
        (do
          (load-module :maven)
          (maven/artifact-uri "org.knowm.xchart:xchart:3.8.6"
                              ".jar" 
                              "https://repo1.maven.org/maven2"))
        """ )
     :see-also '(
        "maven/parse-artifact"
        "maven/artifact-filename"
        "maven/download", 
        "maven/get" ) }

  maven/artifact-uri 
  
  ([artifact file-suffix]
    (maven/artifact-uri artifact file-suffix maven/repo))

  ([artifact file-suffix repo]
    (let [elements     (maven/parse-artifact artifact)
          group-id     (:group-id elements)
          artifact-id  (:artifact-id elements)
          version      (:version elements)
          filename     (str artifact-id "-" version file-suffix)
          group-path   (str/replace-all group-id "." "/")
          repo         (str/strip-end repo "/")]
      (str/join "/" [repo group-path artifact-id version filename]))))


(defn maven/parse-artifact-to-map [artifact]
  (let [elements (str/split artifact ":")]
    { :group-id    (first elements)
      :artifact-id (second elements)
      :version     (third elements) }))


(defn
  ^{ :arglists '("(maven/download artifact options*)")
     :doc """
          Downloads an artifact in the format 'group-id:artifact-id:version'
          from a Maven repository. Can download any combination of the jar,
          sources, or pom artifacts to a directory.

          Accepts a sequence of artifacts as well.

          Options:

          | :jar {true,false}     | download the jar, defaults to true |
          | :sources {true,false} | download the sources, defaults to false |
          | :pom {true,false}     | download the pom, defaults to false |
          | :dir path             | download dir, defaults to "." |
          | :repo maven-repo      | a maven repo, defaults to \
                                    "https://repo1.maven.org/maven2" |
          | :silent {true,false}  | if silent is true does not show a progress \
                                    bar, defaults to true |
          | :force {true,false}   | if force is true download the artifact \
                                    even if it exist already on the download \
                                    dir, else skip the download if it exists. \
                                    Defaults to true. |
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/download "org.knowm.xchart:xchart:3.8.6"))
          """
          """
          (do
            (load-module :maven)
            (maven/download "org.knowm.xchart:xchart:3.8.6" 
                            :sources true 
                            :pom true))
          """
          """
          (do
            (load-module :maven)
            (maven/download "org.knowm.xchart:xchart:3.8.6" 
                            :dir "."
                            :jar false 
                            :sources true))
          """
          """
          (do
            (load-module :maven)
            (maven/download "org.knowm.xchart:xchart:3.8.6" 
                            :dir "." 
                            :sources true))
          """
          """
          (do
            (load-module :maven)
            (maven/download "org.knowm.xchart:xchart:3.8.6" 
                            :dir "." 
                            :sources true 
                            :repo "https://repo1.maven.org/maven2"))
          """
          """
          (do
            (load-module :maven)
            (maven/download "org.knowm.xchart:xchart:3.8.6" 
                            :dir "." 
                            :silent false))
          """       
          """
          (do
            (load-module :maven)
            ;; download all langchain4j artifacts
            (maven/download (maven/dependencies 
                                [ "dev.langchain4j:langchain4j:0.28.0" ] 
                                :format :list 
                                :scope :runtime
                                :print false)
                            :dir "." 
                            :silent false))
          """ )
     :see-also '(
         "maven/get" 
         "maven/parse-artifact") }

  maven/download [artifact & options]

  (if (sequential? artifact)
    (docoll #(apply download % options) artifact)
    (do
      (let [opts        (apply hash-map options)
            silent      (or (:silent opts true) (not (repl?)))
            jar         (:jar opts true)
            sources     (:sources opts false)
            pom         (:pom opts false)
            dir         (:dir opts ".")
            repo        (:repo opts maven/repo)
            force       (:force opts true)
            progress-fn (maven/progress-bar silent)]
        (when jar
          (let [suffix         (maven/artifact-suffix :jar)
                uri            (maven/artifact-uri artifact suffix repo)
                filename       (maven/artifact-filename artifact suffix)]
            (maven/download-artifact-file uri dir filename force progress-fn)))
        (when sources
          (let [suffix         (maven/artifact-suffix :sources)
                uri            (maven/artifact-uri artifact suffix repo)
                filename       (maven/artifact-filename artifact suffix)]
            (maven/download-artifact-file uri dir filename force progress-fn)))
        (when pom
          (let [suffix         (maven/artifact-suffix :pom)
                uri            (maven/artifact-uri artifact suffix repo)
                filename       (maven/artifact-filename artifact suffix)]
            (maven/download-artifact-file uri dir filename force progress-fn)))
        nil))))


(defn
  ^{ :arglists '("(maven/get artifact type options*)")
     :doc """
          Downloads artifact in the format 'group-id:artifact-id:version'
          from a Maven repository. The artifact type 'type' is one of
          {:jar, :sources, :pom}.

          Returns the artifact as byte buffer.

          Options:

          | :repo maven-repo     | a maven repo, defaults to \
                                   "https://repo1.maven.org/maven2" |
          | :silent {true,false} | if silent is true does not show a progress \
                                   bar, defaults to true |
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/get "org.knowm.xchart:xchart:3.8.6" :jar))
          """
          """
          (do
            (load-module :maven)
            (maven/get "org.knowm.xchart:xchart:3.8.6" :jar :silent false))
          """
          """
          (do
            (load-module :maven)
            (maven/get "org.knowm.xchart:xchart:3.8.6" :sources))
          """
          """
          (do
            (load-module :maven)
            (maven/get "org.knowm.xchart:xchart:3.8.6" 
                       :jar 
                       :repo "https://repo1.maven.org/maven2"))
          """ )
     :see-also '(
          "maven/download"
          "maven/parse-artifact") }

  maven/get [artifact type & options]

  (let [opts         (apply hash-map options)
        silent       (or (:silent opts true) (not (repl?)))
        repo         (:repo opts maven/repo)
        suffix       (maven/artifact-suffix type)
        progress-fn  (maven/progress-bar silent)
        uri          (maven/artifact-uri artifact suffix repo)]
    (maven/get-artifact-file uri progress-fn)))


(defn
  ^{ :arglists '("(maven/mvn proj-dir & args)")
     :doc """
          Runs a Maven command

          Relies on the environment variable `MAVEN_HOME` to access Maven.
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (->> (maven/mvn "/Users/foo/projects/my-project" "compile")
                 (println)))
          """
          """
          (do
            (load-module :maven)
            (->> (maven/mvn "/Users/foo/projects/my-project" "-X" "package")
                 (println)))
          """) 
     :see-also '(
          "maven/version"
          "maven/home-dir" )}

  maven/mvn [proj-dir & args]

  (when-not (io/exists-dir? proj-dir)
    (throw (ex :VncExeption "The proj dir '~{proj-dir}' does not exist!")))

  (with-sh-dir proj-dir 
    (let [binary  (maven/mvn-binary)]
      (->> ((maven/exec) (str/join " " (cons binary args)) :throw-ex true)
           (:out)))))
 

(defn
  ^{ :arglists '("(maven/version)")
     :doc """
          Runs the Maven version command and prints the commands output.

          Relies on the environment variable `MAVEN_HOME` to access Maven.
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/version))
          """)
     :see-also '(
          "maven/mvn"
          "maven/home-dir" )  }

  maven/version []

  (let [binary  (maven/mvn-binary)]     
    (->> ((maven/exec) (str binary " --version") :throw-ex true)
         (:out)
         (println))))


(defn
  ^{ :arglists '("(maven/dependencies artifacts & options)")
     :doc """
          Returns the dependency tree of an artifact

          Relies on the environment variable `MAVEN_HOME` to access Maven.

          Options:

          | :scope s                | A scope. :compile, :provided, :runtime, \
                                      :test. Defaults to :compile |
          | :verbose v              | if true invokes for verbose output else \
                                      standard output. Defaults to false |
          | :excludes e             | A list of excluded dependencies |
          | :format f               | An output format. :raw, :tree, or :list. \
                                      Defaults to :tree |
          | :print p                | If true prints the data else returns the \
                                      data. Defaults to true.  |
          | :print-pom p            | If true print the generated pom for \
                                      debugging purposes. Defaults to false. |
          | :managed-dependencies d | An optional list of managed dependencies \
                                      (artifacts). See example 2. |

          The scope is one of:
         
          * `:compile` - build, test and run
          * `:provided` - build and test
          * `:runtime` - test and run
          * `:test` - compile and test

          Excludes dependencies with the group ids (except for :test scope):

          * org.junit.*
          * org.opentest4j
          * org.apiguardian
          * junit

          Example 1:
          
          ```
          (maven/dependencies [ "org.knowm.xchart:xchart:3.8.6" ])
          ````

          ```
          org.knowm.xchart:xchart:jar:3.8.6:compile
          +- de.erichseifert.vectorgraphics2d:VectorGraphics2D:jar:0.13:compile
          +- de.rototor.pdfbox:graphics2d:jar:3.0.0:compile
          |  \\- org.apache.pdfbox:pdfbox:jar:3.0.0:compile
          |     +- org.apache.pdfbox:pdfbox-io:jar:3.0.0:compile
          |     +- org.apache.pdfbox:fontbox:jar:3.0.0:compile
          |     \\- commons-logging:commons-logging:jar:1.2:compile
          \\- com.madgag:animated-gif-lib:jar:1.4:compile
          ```
 
          Example 2:

          lock down a transitive dependency to a specific version using Maven
          managed dependencies
          
          ```
          (maven/dependencies ["org.knowm.xchart:xchart:3.8.6"]
                              :managed-dependencies ["org.apache.pdfbox:pdfbox:2.0.27"])
          ````

          ```
          org.knowm.xchart:xchart:jar:3.8.6::compile
          +- de.erichseifert.vectorgraphics2d:VectorGraphics2D:jar:0.13:runtime
          +- de.rototor.pdfbox:graphics2d:jar:3.0.0:runtime
          |  \\- org.apache.pdfbox:pdfbox:jar:2.0.27:runtime
          |     +- org.apache.pdfbox:fontbox:jar:2.0.27:runtime
          |     \\- commons-logging:commons-logging:jar:1.2:runtime
          \\- com.madgag:animated-gif-lib:jar:1.4:runtime
          ```
         """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/dependencies [ "org.knowm.xchart:xchart:3.8.6" ]))
          """,
          """
          (do
            (load-module :maven)
            (maven/dependencies [ "org.knowm.xchart:xchart:3.8.6" ] 
                                :scope :compile
                                :verbose true))
          """,
          """
          (do
            (load-module :maven)
            (maven/dependencies [ "org.knowm.xchart:xchart:3.8.6" ] 
                                :scope :runtime
                                :format :list))
          """) }

  maven/dependencies   [artifacts & options]
    (let [opts         (apply hash-map options)
          scope        (:scope opts :compile)
          verbose      (:verbose opts false)
          format       (:format opts :tree)
          print-data   (:print opts true)
          print-pom    (:print-pom opts false)
          managed-deps (:managed-dependencies opts [])
          excludes     (:excludes opts [])
          excludes     (if (and (empty? excludes) (not (= :test scope)))
                         maven/exludes-junit  ;; implicite excludes
                         [])]

      (assert (#{:compile :runtime :test :provided} scope))
      (assert (boolean? verbose))
      (assert (#{:raw :tree :list} format))
      (assert (boolean? print-data))
      (assert (boolean? print-pom))
      (assert (sequential? excludes))
      (assert (sequential? managed-deps))
      (assert (sequential? artifacts))
      (assert (not-empty? artifacts))
      (assert (every? string? artifacts))

      (let [data (maven/dependencies* scope verbose print-data print-pom format
                                      excludes 
                                      artifacts 
                                      managed-deps)]
        (if print-data (println data) data))))


(defn 
  ^{ :arglists '(
          "(maven/install)"
          "(maven/install version)")
     :doc """
          Installs Apache Maven to {repl-home-dir}/tools/apache-maven-x.y.z

          Installation is possible from within a REPL only!
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/install))  ;; installs default version 3.9.6
          """
          """
          (do
            (load-module :maven)
            (maven/install "3.9.5"))
          """)
     :see-also '(
          "maven/home-dir"
          "maven/uninstall" )  }

  install 

  ([]
    (maven/install maven-version (io/file (repl/home-dir) "tools")))

  ([version]
    (maven/install version (io/file (repl/home-dir) "tools")))

  ([version dir]
    (let [uri             (maven-download-uri version)
          install-dir     (io/file dir)
          progress-fn     (maven/progress-bar false)
          zip-name        (last (str/split uri "/"))
          zip             (io/file install-dir zip-name)
          maven-dir       (io/file install-dir (str/strip-end zip-name "-bin.zip"))]
      (when-not (io/exists-dir? install-dir)
        (io/mkdir install-dir))

      (if (io/exists-dir? maven-dir)
        (println "Maven ~{version} is already installed at ~{maven-dir}")
        (do
          ;; download Maven binary zip
          (maven/download-artifact-file uri install-dir zip-name false progress-fn)
          
          ;; unpack Maven binary zip
          (println "Unzipping ~{zip-name}...")
          (zipvault/extract-all zip install-dir)
          
          ;; remove downloaded Maven binary zip
          (io/delete-file zip)

          (println "Maven ~{version} installed to ~{maven-dir}"))))))


(defn 
  ^{ :arglists '("(maven/uninstall)")
     :doc """
          Uninstalls Apache Maven from {repl-home-dir}/tools

          Uninstallation is possible from within a REPL only!
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/uninstall))
          """)
     :see-also '(
          "maven/home-dir"
          "maven/install" ) }

  uninstall []

  (when-not (repl?)
    (throw (ex :VncException "Apache Maven can be uninstalled from a REPL only!")))
 
  (doseq [dir (mvn-install-dirs-repl)] 
    (println "Removing ~{dir}")
    (io/delete-file-tree dir)))



(defn 
  ^{ :arglists '("(maven/home-dir)")
     :doc """
          Returns the Apache Maven home directory or nil if Maven is not
          installed.

          If a REPL is active checks first for local Apache Maven installation
          in the REPL, if none is available checks the environment variable
          'MAVEN_HOME'.

          If a REPL is not active checks the environment variable 'MAVEN_HOME'. 
          """
     :examples '(
          """
          (do
            (load-module :maven)
            (maven/home-dir))
          """)
     :see-also '(
          "maven/mvn"
          "maven/version" )  }

  home-dir []

  (try
    (mvn-home)
    (catch :RuntimeException e nil)))


(defn- maven/artifact-suffix [type]
  (case type
    :jar     ".jar"
    :sources "-sources.jar"
    :pom     ".pom"
    (throw (ex :VncException "Invalid artifact type ~{type}"))))


(defn- progress-bar [silent]
  (if silent
    nil
    (ansi/progress-bar :caption     "            "
                       :start-msg   "    started "
                       :end-msg     "            OK"
                       :failed-msg  "            FAILED")))


(defn- download-artifact-file [uri target-dir target-file force progress-fn]
  (let [target   (str target-dir "/" target-file)
        download (or force (not (io/exists-file? target)))]
    (if download
      (do
        (when progress-fn
          (println (str "Downloading " uri))
          (println (str "         to " target "...")))
        (ansi/without-cursor
          (->> (io/download uri :binary true :progress-fn progress-fn)
               (io/spit target))))
      (when progress-fn
        (println (str "Downloading " uri))
        (println (str "         to " target))
        (println (str "            " "ALREADY EXISTS (skipped)"))))))


(defn- get-artifact-file [uri progress-fn]
  (when progress-fn
    (println (str "Downloading " uri "...")))
  (ansi/without-cursor
    (io/download uri :binary true :progress-fn progress-fn)))


(defn- dependencies* [scope verbose print-data print-pom format 
                      excludes artifacts managed-deps]
  (assert (#{:raw :tree :list} format))
  (let [temp-dir  (io/temp-dir "maven-")
        proj-dir  (io/file temp-dir "demolibrary")
        pom-file  (io/file proj-dir "pom.xml")]
    (io/delete-file-on-exit temp-dir)

    (try
      ;; create the maven project in temp-dir
      (maven/mvn temp-dir "archetype:generate"
                          "-DgroupId=com.demolibrary" 
                          "-DartifactId=demolibrary"
                          "-DarchetypeArtifactId=maven-archetype-quickstart" 
                          "-DarchetypeVersion=1.0"
                          "-DinteractiveMode=false")

      ;; add the artefacts to the project's pom
      (let [pom (-> (io/slurp pom-file)
                    (pom-add-dependencies artifacts scope)
                    (pom-add-managed-dependencies managed-deps scope))]
        (when print-pom (println pom))
        (io/spit pom-file pom))

      ;; compute the dependency tree
      (let [opts    []
            opts    (if verbose (cons "-Dverbose" opts) opts)
            excl    (str "-Dexcludes=" (str/join "," excludes))
            opts    (if (empty? excludes) opts (cons excl opts))
            output  (apply maven/mvn proj-dir "dependency:tree" opts)]
        (case format
          :tree (maven/extract-dependency-tree output)   
          :list (let [l (maven/extract-dependency-list output)]
                  (if print-data (str/join "\n" l) l))
          :raw  output))
    (finally 
      (when (io/exists-dir? temp-dir)
        (io/delete-file-tree temp-dir))))))


(defn- extract-dependency-tree [output]
  (->> (str/split-lines output)
       (drop-while #(not (str/starts-with? % "[INFO] com.demolibrary:demolibrary:jar:1.0")))
       (take-while #(not (str/starts-with? % "[INFO] -----------------")))
       (rest)
       (map #(str/subs % 10))
       (str/join "\n")))


(defn- extract-dependency-list [output]
  (->> (str/split-lines output)
       (drop-while #(not (str/starts-with? % "[INFO] com.demolibrary:demolibrary:jar:1.0")))
       (take-while #(not (str/starts-with? % "[INFO] -----------------")))
       (rest)
       (map #(str/subs % 10))
       (map #(str/subs % (or (str/index-of-not-char % "|-+\\ ") 0)))
       (map str/trim-to-nil)
       (filter some?)
       (filter #(not (str/starts-with? % "(")))
       (filter #(str/contains? % ":jar:"))
       (map (fn [s] (as-> (str/split s ":") e
                          (str/join ":" [(nth e 0) (nth e 1) (nth e 3)]))))
       (sort)))


(defn- mvn-install-dirs-repl []
  (if (repl?)
    (let [repl-tools-dir  (io/file (repl/home-dir) "tools")]
      (if (io/exists-dir? repl-tools-dir)
        (->> (io/list-files-glob repl-tools-dir "apache-maven-*")
             (filter io/exists-dir?)
             (sort))
        []))
    []))


(defn- mvn-home []
  (if (repl?) 
    (if-let [home (mvn-home-from-local)] home (mvn-home-from-env))
    (mvn-home-from-env)))


(defn- mvn-home-from-env []
  (let [home (system-env :MAVEN_HOME)]
    (assert (some? home) 
            "The env variable 'MAVEN_HOME' does not exist!")
    (assert (io/exists-dir? home) 
            "The Maven home dir '~{home}' does not exist!")
    home))


(defn- mvn-home-from-local []
  (let [dir (last (mvn-install-dirs-repl))]
    (if (and (some? dir) (io/exists-dir? dir)) dir nil)))


(defn- mvn-binary []
  (case (os-type)
    :mac-osx (str (maven/mvn-home) "/bin/mvn")
    :linux   (str (maven/mvn-home) "/bin/mvn")
    :windows (str (maven/mvn-home) "/bin/mvn.cmd")))


(defn- validate-mvn-binary [binary]
    (assert (io/exists-file? binary) 
            "The Maven tool '~{binary}' does not exist!")
    (assert (io/file-can-execute? binary) 
            "The Maven tool '~{binary}' has no executable permissions!"))


(defn- exec []
  (case (os-type)
    :mac-osx (partial sh "/bin/sh" "-c")
    :linux   (partial sh "/bin/sh" "-c")
    :windows (partial sh "cmd" "/C")))


(defn- maven-download-uri [version]
   (str/replace-all maven-binary-uri "{{version}}" version))


(defn- pom-add-dependencies [pom artifacts scope]
  (if (empty? artifacts)
    pom
    (let [idx      (str/index-of pom "<dependencies>")
          [p1 p2]  (str/split-at pom (+ idx (count "<dependencies>")))]
      (str p1 (pom-dependencies artifacts scope) p2))))


(defn- pom-add-managed-dependencies [pom artifacts scope]
  (if (empty? artifacts)
    pom
    (let [idx      (str/index-of pom "<dependencies>")
          [p1 p2]  (str/split-at pom idx)]
      (str p1 (pom-managed-dependencies artifacts nil) p2))))


(defn- pom-dependencies [artifacts scope]
  (let [artifacts (->> (map parse-artifact-to-map artifacts)
                       (map #(assoc % :scope scope)))]
    (kira/eval """
               <% (doseq [it items] %>
                   <dependency>
                     <groupId><%=(:group-id it)%></groupId>
                     <artifactId><%=(:artifact-id it)%></artifactId>
                     <% (when (some? (:version it)) %><version><%=(:version it)%> </version><% ) %>
                     <% (when (some? (:scope it)) %><scope><%=(:scope it)%></scope><% ) %>
                   </dependency>
               <% ) %>
               """
               { :items artifacts })))


(defn- pom-managed-dependencies [artifacts scope]
  (let [artifacts (->> (map parse-artifact-to-map artifacts)
                       (map #(assoc % :scope scope)))]
    (kira/eval """
               <dependencyManagement>
                 <dependencies>
                   <% (doseq [it items] %>
                   <dependency>
                     <groupId><%=(:group-id it)%></groupId>
                     <artifactId><%=(:artifact-id it)%></artifactId>
                     <version><%=(:version it)%></version>
                     <% (when (some? (:scope it))%><scope><%=(:scope it)%></scope><% ) %>
                   </dependency>
                   <% ) %>
                 </dependencies>
               </dependencyManagement>

               """
               { :items artifacts })))
