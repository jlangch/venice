;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Maven utilities


(ns maven)

(load-module :ansi)


(def maven/repo "https://repo1.maven.org/maven2")

(defn
  ^{ :arglists '(
        "(maven/parse-artifact artifact)"
        "(maven/parse-artifact artifact file-suffix)"
        "(maven/parse-artifact artifact file-suffix repo)")
     :doc
        """
        Parses a Maven artifact like 'com/vaadin:vaadin-client:8.7.2'

        1. (maven/parse-artifact artifact)¶
           returns a vector with group-id, artifact-id, and version
        2. (maven/parse-artifact artifact file-suffix)¶
           returns a vector with group-id, artifact-id, version and file name
        3. (maven/parse-artifact artifact file-suffix repo)¶
           returns a vector with the Maven download URI and the file name
        """
     :examples '(
        """
        (maven/parse-artifact "org.knowm.xchart:xchart:3.8.1")
        """,
        """
        (maven/parse-artifact "org.knowm.xchart:xchart:3.8.1"
                              ".jar")
        """
        """
        (maven/parse-artifact "org.knowm.xchart:xchart:3.8.1"
                              ".jar"
                              "https://repo1.maven.org/maven2")
        """ )
     :see-also '("maven/download", "maven/get", "maven/uri") }

  maven/parse-artifact

  ([artifact]
    (let [elements    (str/split artifact ":")
          group-id    (first elements)
          artifact-id (second elements)
          version     (third elements) ]
      [group-id artifact-id version]))

  ([artifact file-suffix]
    (let [[group-id artifact-id version] (maven/parse-artifact artifact)
          file-name (str artifact-id "-" version file-suffix)]
      [group-id artifact-id version file-name]))

  ([artifact repo file-suffix]
    (let [[group-id artifact-id version file-name] (maven/parse-artifact artifact file-suffix)
          group-path (str/replace-all group-id "." "/")
          uri (str/join "/" [repo group-path artifact-id version file-name])]
      [uri file-name])))

;; for compatibilty
(def maven/parse-artefact maven/parse-artifact)


(defn
  ^{ :arglists '("(maven/download artifact options*)")
     :doc """
          Downloads an artifact in the format 'group-id:artifact-id:version'
          from a Maven repository. Can download any combination of the jar,
          sources, or pom artifacts to a directory.

          Options:

          | :jar {true,false}     | download the jar, defaults to true |
          | :sources {true,false} | download the sources, defaults to false |
          | :pom {true,false}     | download the pom, defaults to false |
          | :dir path             | download dir, defaults to "." |
          | :repo maven-repo      | a maven repo, defaults to "https://repo1.maven.org/maven2" |
          | :silent {true,false}  | if silent is true does not show a progress bar, defaults to true |
          """
     :examples '(
          """(maven/download "org.knowm.xchart:xchart:3.8.1")"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :sources true :pom true)"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :jar false :sources true)"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :sources true)"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :sources true :repo "https://repo1.maven.org/maven2")"""
          """(maven/download "org.knowm.xchart:xchart:3.8.1" :dir "." :silent false)""" )
     :see-also '("maven/get", "maven/uri", "maven/parse-artifact") }

  maven/download [artifact & options]

  (let [opts        (apply hash-map options)
        silent      (or (:silent opts true) (not (repl?)))
        jar         (:jar opts true)
        sources     (:sources opts false)
        pom         (:pom opts false)
        dir         (:dir opts ".")
        repo        (:repo opts maven/repo)
        progress-fn (maven/progress-bar silent)]
    (when jar
      (let [suffix         (maven/artifact-suffix :jar)
            [uri filename] (maven/parse-artifact artifact repo suffix)]
        (maven/download-artifact-file uri dir filename progress-fn)))
    (when sources
      (let [suffix         (maven/artifact-suffix :sources)
            [uri filename] (maven/parse-artifact artifact repo suffix)]
        (maven/download-artifact-file uri dir filename progress-fn)))
    (when pom
      (let [suffix         (maven/artifact-suffix :pom)
            [uri filename] (maven/parse-artifact artifact repo suffix)]
        (maven/download-artifact-file uri dir filename progress-fn)))
    nil))


(defn
  ^{ :arglists '("(maven/get artifact type options*)")
     :doc """
          Downloads artifact in the format 'group-id:artifact-id:version'
          from a Maven repository. The artifact type 'type' is one of
          {:jar, :sources, :pom}.

          Returns the artifact as byte buffer.

          Options:

          | :repo maven-repo     | a maven repo, defaults to "https://repo1.maven.org/maven2" |
          | :silent {true,false} | if silent is true does not show a progress bar, defaults to true |
          """
     :examples '(
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :jar)"""
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :jar :silent false)"""
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :sources)"""
          """(maven/get "org.knowm.xchart:xchart:3.8.1" :jar :repo "https://repo1.maven.org/maven2")""" )
     :see-also '("maven/download", "maven/uri", "maven/parse-artifact") }

  maven/get [artifact type & options]

  (let [opts         (apply hash-map options)
        silent       (or (:silent opts true) (not (repl?)))
        repo         (:repo opts maven/repo)
        suffix       (maven/artifact-suffix type)
        progress-fn  (maven/progress-bar silent)
        [uri _]      (maven/parse-artifact artifact repo suffix)]
    (maven/get-artifact-file uri progress-fn)))


(defn
  ^{ :arglists '("(maven/uri artifact type options*)")
     :doc """
          Returns an URI for an artifact in the format 'group-id:artifact-id:version'
          from a Maven repository.

          The artifact type 'type' is one of {:jar, :sources, :pom}

          Options:

          | :repo maven-repo | a maven repo, defaults to "https://repo1.maven.org/maven2" |
          """
     :examples '(
          """(maven/uri "org.knowm.xchart:xchart:3.8.1" :jar)"""
          """(maven/uri "org.knowm.xchart:xchart:3.8.1" :jar :repo "https://repo1.maven.org/maven2")""" )
     :see-also '("maven/download", "maven/get", "maven/parse-artifact") }

  maven/uri [artifact type & options]

  (let [opts      (apply hash-map options)
        repo      (:repo opts maven/repo)
        suffix    (maven/artifact-suffix type)
        [uri _]   (maven/parse-artifact artifact repo suffix)]
    uri))


(defn
  ^{ :arglists '("(maven/mvn proj-dir & options)")
     :doc """
          Runs a maven command

          Relies on the environment variable `MAVEN_HOME` to access maven.
          """
     :examples '(
          """(println (maven/mvn "/Users/foo/projects/my-project" compile))""") }

  maven/mvn [proj-dir & options]

  (when-not (io/exists-dir? proj-dir)
    (throw (ex :VncExeption "The proj dir '~{proj-dir}' does not exist!")))

  (with-sh-dir proj-dir 
    (let [binary  (maven/mvn-binary)]
      (->> ((maven/exec) (str/join " " (cons binary options)) :throw-ex true)
           (:out)))))
 

(defn
  ^{ :arglists '("(maven/version)")
     :doc """
          Runs the maven version command and prints the commands output.

          Relies on the environment variable `MAVEN_HOME` to access maven.
          """
     :examples '(
          """(maven/version)""") }

  maven/version []

  (maven/validate-mvn-home)

  (let [binary  (maven/mvn-binary)]     
    (->> ((maven/exec) (str binary " --version") :throw-ex true)
         (:out)
         (println))))

(defn
  ^{ :arglists '("(maven/dependency-tree artifact)")
     :doc """
          Returns the dependency tree of an artifact

          Relies on the environment variable `MAVEN_HOME` to access maven.

          Excludes dependencies with the group ids:
          * org.junit.*
          * org.opentest4j
          * org.apiguardian
          * junit

          ```
          (maven/dependency-tree "org.apache.pdfbox:pdfbox:3.0.1")
          ````

          ```
          org.apache.pdfbox:pdfbox:jar:3.0.1:compile
          +- org.apache.pdfbox:pdfbox-io:jar:3.0.1:compile
          +- org.apache.pdfbox:fontbox:jar:3.0.1:compile
          \- commons-logging:commons-logging:jar:1.2:compile
          ```
          """
     :examples '(
          """(maven/dependency-tree "org.apache.pdfbox:pdfbox:3.0.1")""") }

  maven/dependency-tree [artifact]

  (assert (string? artifact))

  (let [temp-dir                       (io/temp-dir "maven-")
        proj-dir                       (io/file temp-dir "demolibrary")
        pom-file                       (io/file proj-dir "pom.xml")
        [group-id artifact-id version] (maven/parse-artifact artifact)]
    (io/delete-file-on-exit temp-dir)

    (try
      (maven/mvn temp-dir "archetype:generate"
                          "-DgroupId=com.demolibrary" 
                          "-DartifactId=demolibrary"
                          "-DarchetypeArtifactId=maven-archetype-quickstart" 
                          "-DarchetypeVersion=1.0"
                          "-DinteractiveMode=false")
 
      (let [pom     (io/slurp pom-file)
            idx     (str/index-of pom "<dependencies>")
            [p1 p2] (str/split-at pom (+ idx (count "<dependencies>")))
            pom$    (str p1
                         """
                         
                             <dependency>
                               <groupId>~{group-id}</groupId>
                               <artifactId>~{artifact-id}</artifactId>
                               <version>~{version}</version>
                               <scope>compile</scope>
                             </dependency>
                         """
                         p2)]
        (io/spit pom-file pom$)

        (->> (maven/mvn proj-dir "dependency:tree"
                                 "-Dexcludes=org.junit.*,org.opentest4j,org.apiguardian,junit")
             (str/split-lines)
             (drop-while #(not (str/starts-with? % "[INFO] com.demolibrary:demolibrary:jar:1.0")))
             (take-while #(not (str/starts-with? % "[INFO] -----------------")))
             (rest)
             (map #(str/subs % 10))
             (str/join "\n")
             (println))
        nil)
         
      (finally 
        (when (io/exists-dir? temp-dir)
          (io/delete-file-tree temp-dir))))))



(defn- maven/artifact-suffix [type]
  (case type
    :jar     ".jar"
    :sources "-sources.jar"
    :pom     ".pom"
    (throw (ex :VncException "Invalid artifact type ~{type}"))))

(defn- maven/progress-bar [silent]
  (if silent
    nil
    (ansi/progress-bar :caption     "            "
                       :start-msg   "    started "
                       :end-msg     "            OK"
                       :failed-msg  "            FAILED")))


(defn- maven/download-artifact-file [uri target-dir target-file progress-fn]
  (let [target (str target-dir "/" target-file)]
    (when progress-fn
      (println (str "Downloading " uri))
      (println (str "         to " target "...")))
    (ansi/without-cursor
      (->> (io/download uri :binary true :progress-fn progress-fn)
           (io/spit target)))))


(defn- maven/get-artifact-file [uri progress-fn]
  (when progress-fn
    (println (str "Downloading " uri "...")))
  (ansi/without-cursor
    (io/download uri :binary true :progress-fn progress-fn)))


(defn- maven/validate-mvn-home []
  (let [home    (maven/mvn-home)
        binary  (maven/mvn-binary)]
    (assert (some? home) 
            "The env variable 'MAVEN_HOME' does not exist!")
    (assert (io/exists-dir? home) 
            "The Maven home dir '~{home}' does not exist!")
    (assert (io/exists-file? binary) 
            "The Maven tool '~{binary}' does not exist!")
    (assert (io/file-can-execute? binary) 
            "The Maven tool '~{binary}' has no executable permissions!")))


(defn- maven/mvn-home []
  (system-env :MAVEN_HOME))


(defn- maven/mvn-binary []
  (str (maven/mvn-home) "/bin/mvn"))


(defn- maven/exec []
  (case (os-type)
    :mac-osx (partial sh "/bin/sh" "-c")
    :linux   (partial sh "/bin/sh" "-c")
    :windows (partial sh "cmd" "/C")))
