;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice application archive functions


(ns app)

(defn
  ^{ :arglists '("(app/build name main-file file-map dest-dir)")
     :doc """
          Creates a Venice application archive that can be distributed
          and executed as a single file.

          E.g.:

          ```text
          staging
          ├── billing.venice
          ├── utils
          │   ├── util.venice
          │   └── render.venice
          └── data
              ├── bill.template
              └── logo.jpg
          ```

          With these staged files the archive is built as:

          ```venice
          (app/build
            "billing"
            "billing.venice"
            { "billing.venice"      "staging/billing.venice"
              "utils/util.venice"   "staging/utils/util.venice"
              "utils/render.venice" "staging/utils/render.venice"
              "data/bill.template"  "staging/data/bill.template"
              "data/logo.jpg"       "staging/data/logo.jpg" }
            ".")
          ```

          Loading Venice files works relative to the application. You can
          only load files that are in the app archive.
          If for instances "billing.venice" in the above example requires
          "utils/render.venice" just add `(load-file "utils/render.venice")`
          to "billing.venice".

          The app can be run from the command line as:¶
          `> java -jar venice-1.10.24.jar -app billing.zip`¶
          Venice reads the archive and loads the archive's main file.

          Or with additional Java libraries (all JARs in 'libs' dir):¶
          `> java -cp "libs/*" com.github.jlangch.venice.Launcher -app billing.zip`
          """ }

  app/build [name main-file file-map dest-dir]

  (when-not (io/exists-dir? dest-dir)
    (throw (ex :VncException
               (str "The dest-dir '" dest-dir "' does not exist."))))

  (let [app-file (io/file dest-dir (str name ".zip"))]
    (-<> (json/write-str { :manifest-version "1.0"
                           :app-name name
                           :main-file main-file
                           :created-by (str "Venice " (version))})
         (bytebuf-from-string <> :utf-8)
         (list "MANIFEST.MF" <>)
         (into <> file-map)
         (flatten <>)
         (apply io/zip <>)
         (io/spit app-file <>))

    { :name name
      :file app-file } ))


(defn
  ^{ :arglists '("(app/manifest app)")
     :doc "Returns the manifest of a Venice application archive as a map." }

  app/manifest [app]

  (when-not (io/exists-file? app)
    (throw (ex :VncException
               (str "The app archive '" app "' does not exist."))))

  (try
    (-<> (io/unzip app "MANIFEST.MF")
         (bytebuf-to-string <> :utf-8)
         (json/read-str <> :key-fn keyword))
    (catch :Exception ex
      (throw (ex :VncException
                 (str "Failed to load manifest from the app archive '" app "'")
                 ex)))))
