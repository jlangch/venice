;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice QR Bill functions

;;;; Install QR Bill party libraries:
;;;;
;;;;   (load-module :qrbill-install)
;;;;   (qrbill-install/install :dir (repl/libs-dir) :silent false)


(ns qrbill)

(import :net.codecrete.qrbill.canvas.PDFCanvas)
(import :net.codecrete.qrbill.generator.Address)
(import :net.codecrete.qrbill.generator.Bill)
(import :net.codecrete.qrbill.generator.Language)
(import :net.codecrete.qrbill.generator.OutputSize)
(import :net.codecrete.qrbill.generator.QRBill)
(import :net.codecrete.qrbill.generator.SeparatorType)


(deftype-or :language :DE :FR :IT :EN)

(deftype-or :separator-type :NONE :DASHED_LINE_WITH_SCISSORS :DASHED_LINE)


(defn
  ^{ :arglists '("(address name line line2)")
     :doc "QR bill address for debtor/creditor"
     :examples '("""(qrbill/address "Peter Meier" "Bahnhofstrasse 2" "8000 ZÃ¼rich")""") }

  address [name line1 line2]

  (doto (. :Address :new)
        (. :setName name)
        (. :setAddressLine1 line1)
        (. :setAddressLine2 line2)
        (. :setCountryCode "CH")))


(defn
  ^{ :arglists '("(bill account amount qr-ref msg debtor creditor)")
     :doc "Create a bill"
     :examples '(
       """
       (do
         (load-module :qrbill)
         (qrbill/bill "CH00 3000 2000 1000 0000 0"
                      300.00M
                      "000004"
                      "Testrechnung"
                      (qrbill/address "Peter Meier"
                                      "Bahnhofstrasse 2"
                                      "8000 Wil")
                      (qrbill/address "Travag GmbH"
                                      "Bahnhofstrasse 3"
                                      "8000 Wil")))
       """) }

  bill [account amount qr-ref msg debtor creditor]
  (let [b (. :Bill :new)]
    (doto (. b :getFormat)
          (. :setLanguage :DE) ; :FR, :IT, :EN
          (. :setOutputSize :A4_PORTRAIT_SHEET)
          (. :setSeparatorType :DASHED_LINE_WITH_SCISSORS))  ; :DASHED_LINE, :NONE
    (. b :setAccount account)
    (. b :setAmount amount)
    (. b :setCurrency "CHF")
    (. b :createAndSetQRReference qr-ref)
    (. b :setUnstructuredMessage msg)
    (. b :setCreditor creditor)
    (. b :setDebtor debtor)
    b))


(defn- write-canvas [canvas bill out-file]
  (try-with [c canvas]
    (. :QRBill :draw bill c)
    (. c :saveAs (. out-file :toPath))
    (println "==> " out-file)))


(defn- make-outfile-name [invoice-pdf-file]
  (let [f (io/file-name invoice-pdf-file)
        b (io/file-basename f)
        e (io/file-ext f)]
    (if (match? b #".*-[0-9]*")
      (let [idx (str/last-index-of b "-")]
        (str (str/subs b 0 idx)
             "-QR"
             (str/subs b idx)
             "."
             e))
      (str b "-QR" "." e))))


(defn
  ^{ :arglists '(
       "(write bill out-file)"
       "(write bill payment-slip-pdf-type invoice-pdf-file out-dir)")
     :doc "Write the bill to a file"
     :examples '(
       """
       (do
         (load-module :qrbill)

         (let [debtor    (qrbill/address "Peter Meier"
                                         "Bahnhofstrasse 2"
                                         "8000 Wil")
               creditor  (qrbill/address "Travag GmbH"
                                         "Bahnhofstrasse 3"
                                         "8000 Wil")
               bill      (qrbill/bill "CH00 3000 2000 1000 0000 0"
                                      300.00M
                                      "000004"
                                      "Testrechnung 4"
                                      debtor
                                      creditor)]

           ;; create a PDF invoice with just the payment slip
           (qrbill/write bill
                         "./PeterMeier-Rechnung-1.pdf")

           ;; create a PDF invoice with the payment slip added on the last
           ;; page of the file "./PeterMeier-Rechnung-2.pdf"
           (qrbill/write bill
                         :last-page-at-end
                         "./PeterMeier-Rechnung-2.pdf")
                         ".")

           ;; create a PDF invoice with the payment slip added on a new
           ;; page to the file "./PeterMeier-Rechnung-3.pdf"
           (qrbill/write bill
                         :new-page-at-end
                         "./PeterMeier-Rechnung-3.pdf")
                         ".")))
       """) }

  write

  ([bill out-file]
    (write-canvas (. :PDFCanvas :new 210.0 297.0) bill out-file))

  ([bill payment-slip-pdf-type invoice-pdf-file out-dir]
    (let [page-no  (if (= :last-page-at-end payment-slip-pdf-type) -1 -2)
          out-file (io/file out-dir (make-outfile-name invoice-pdf-file))
          canvas   (. :PDFCanvas :new (. invoice-pdf-file :toPath) page-no)]
      (write-canvas canvas bill out-file))))
