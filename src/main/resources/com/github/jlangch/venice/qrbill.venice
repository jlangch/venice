;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice QR Bill functions

;;;; Install QR Bill 3rd party libraries:
;;;;
;;;;   (load-module :qrbill-install)
;;;;   (qrbill-install/install :dir (repl/libs-dir) :silent false)


(ns qrbill)

(import :net.codecrete.qrbill.canvas.PDFCanvas)
(import :net.codecrete.qrbill.generator.Address)
(import :net.codecrete.qrbill.generator.Bill)
(import :net.codecrete.qrbill.generator.QRBill)


(defn address [name line1 line2]
  (doto (. :Address :new)
        (. :setName name)
        (. :setAddressLine1 line1)
        (. :setAddressLine2 line2)
        (. :setCountryCode "CH")))


(defn bill [account amount qr-ref msg debtor creditor]
  (let [b (. :Bill :new)]
    (doto (. b :getFormat)
          (. :setLanguage :DE) ; :FR, :IT, :EN
          (. :setOutputSize :A4_PORTRAIT_SHEET)
          (. :setSeparatorType :DASHED_LINE_WITH_SCISSORS))  ; :DASHED_LINE, :NONE
    (doto b
          (. :setAccount account)
          (. :setAmount amount)
          (. :setCurrency "CHF")
          (. :createAndSetQRReference qr-ref)
          (. :setUnstructuredMessage msg)
          (. :setCreditor creditor)
          (. :setDebtor debtor))))


(defn- write-canvas [canvas bill out-file]
  (try-with [c canvas]
    (. :QRBill :draw bill c)
    (. c :saveAs (. out-file :toPath))
    (println "==> " out-file)))


(defn- make-outfile-name [invoice-pdf-file]
  (let [basename (io/file-basename invoice-pdf-file)
        ext      (io/file-ext invoice-pdf-file)]
    (if (match? basename #".*-[0-9]+")
      (let [idx (str/last-index-of basename "-")]
        (str (str/subs basename 0 idx) "-QR" (str/subs basename idx) "." ext))
      (str basename "-QR" "." ext))))


(defn- address-spec [key spec]
  (address (-> spec key :name)
           (-> spec key :line1)
           (-> spec key :line2)))


(defn- write-spec [spec]
  (let [bill       (bill (-> spec :bill :account)
                         (decimal (-> spec :bill :amount) 2 :HALF_UP)
                         (-> spec :bill :reference)
                         (-> spec :bill :message)
                         (address-spec :debtor spec)
                         (address-spec :creditor spec))
       qr-slip-pos (:qr-slip-pos spec)
       file-in     (io/file (:file-in spec))
       file-out    (io/file (:file-out spec))
       page-no     (if (= :last-page qr-slip-pos) -1I -2I)
       canvas      (if file-in
                     (. :PDFCanvas :new (. file-in :toPath) page-no)
                     (. :PDFCanvas :new 210.0 297.0))]
      (write-canvas canvas bill file-out)))


(defn
  ^{ :arglists '(
       "(write bill out-file)"
       "(write bill payment-slip-pdf-type invoice-pdf-file out-dir)")
     :doc "Write the bill to a file"
     :examples '(
       """
       (do
         (load-module :qrbill ['qrbill :as 'q])

         (let [debtor    (q/address "Peter Meier"
                                    "Bahnhofstrasse 2"
                                    "8000 Wil")
               creditor  (q/address "Travag GmbH"
                                    "Bahnhofstrasse 3"
                                    "8000 Wil")
               bill      (q/bill "CH00 3000 2000 1000 0000 0"
                                 300.00M
                                 "000004"
                                 "Testrechnung 4"
                                 debtor
                                 creditor)]

           ;; create a PDF invoice with just the payment slip
           (q/write bill "./Meier-Rechnung-1.pdf")

           ;; create a PDF invoice with the payment slip added on the last
           ;; page of the file "./Meier-Rechnung-2.pdf"
           (q/write bill :last-page "./Meier-Rechnung-2.pdf" ".")

           ;; create a PDF invoice with the payment slip added on a new
           ;; page to the file "./Meier-Rechnung-3.pdf"
           (q/write bill :new-page-at-end "./Meier-Rechnung-3.pdf" ".")))
       """,
       """
       (do
         (load-module :qrbill ['qrbill :as 'q])

         (q/write  { :debtor      { :name  "Peter Meier"
                                    :line1 "Aarestrasse 2"
                                    :line2 "9500 Wil" }
                     :creditor    { :name  "Kenag GmbH"
                                    :line1 "Aarestrasse 3"
                                    :line2 "9500 Wil" }
                     :bill        { :account   "CH00 3000 2000 1000 0000 0"
                                    :amount    "300.00"
                                    :reference "000004"
                                    :message   "Testrechnung 4" }
                     :qr-slip-pos :new-page-at-end    ;; :last-page
                     :file-in     "./Meier-Rechnung-1.pdf"
                     :file-out    "./Meier-Rechnung-QR-1.pdf" }))
       """) }

  write

  ([spec]
    (write-spec spec))

  ([bill out-file]
    (write-canvas (. :PDFCanvas :new 210.0 297.0) bill (io/file out-file)))

  ([bill payment-slip-pdf-type invoice-pdf-file out-dir]
    (let [page-no  (if (= :last-page payment-slip-pdf-type) -1I -2I)
          out-file (io/file out-dir (make-outfile-name invoice-pdf-file))
          canvas   (. :PDFCanvas :new (. (io/file invoice-pdf-file) :toPath)
                                      page-no)]
      (write-canvas canvas bill out-file))))
