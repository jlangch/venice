;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Multipart 


(ns multipart)

(load-module :mimetypes)

(import :java.net.URL)
(import :java.io.File)
(import :java.nio.file.Files)
(import :java.nio.file.Path)
(import :java.nio.file.Paths)


(defonce ^:private boundary-value (str (rand-bigint 128)))

(defonce ^:private nl "\r\n")



(defn 
  ^{ :arglists '(
        "(render parts)" )
     :doc
        """
        Renders a map of named parts as *multipart/form-data* format.
        
        The part name must be a string and the part data may be of type:
        * string
        * string ("file:/user/foo/image.png" to reference a file)
        * map (describing a part as :name, :mimetype, :data (string or bytebuf), and an optional charset) elements)
        * io/file
        * all other part data types are converted with `(str data)` to a string

        Returns a bytebuf.

        ```
        POST / HTTP/1.1
        HOST: host.example.com
        Connection: Keep-Alive
        Content-Type: multipart/form-data; boundary=12345

        --12345
        Content-Disposition: form-data; name="notes"

        Lorem ipsum ...
        --12345
        Content-Disposition: form-data; name="foo" filename="foo.json"
        Content-Type: application/json; charset=utf-8

        content of foo.xjson
        --12345
        Content-Disposition: form-data; name="image" filename="picture.png"
        Content-Type: image/png

        content of picture.jpg
        --12345--
        ```

        See [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#multipartform-data)
        """
     :examples '(
        """
        (do
          (load-module :multipart ['multipart :as 'm])

          (->> (m/render { "Part-1" "xxxxxxxxxxx" 
                           "Part-2" "yyyyyyyyyyy"})
               (bytebuf-to-string)
               (println)))
        """,
        """
        (do
          (load-module :multipart ['multipart :as 'm])

          (m/render { "Part-1" "xxxxxxxxxxx"
                      "Part-2" "file:/user/foo/image.png"
                      "Part-3" (io/file "/user/foo/image.png")
                      "Part-4" {:name      "data.xml"
                                :mimetype  "application/xml"
                                :data      "<user><name>foo</name></user>"}})
        """ ) }

  render [parts]

  (assert (map? parts))
  (assert (not (empty? parts)))

  (try-with [os (io/bytebuf-out-stream)]
    ;; render parts
    (doseq [[name value] parts] (render-part name value os))
    
    ;; close boundary
    (spit-string os (make-closing-boundary) nl)
    
    @os))


(defn 
  ^{ :arglists '(
        "(http-content-type-header)" )
     :doc
        """
        Returns the HTTP content type header value for *multipart/form-data*
        HTTP requests.
        
        E.g:  Content-Type: multipart/form-data; boundary=1234567890N
        """
     :examples '(
        """
        (do
          (load-module :multipart ['multipart :as 'm])

          (m/http-content-type-header))
        """ ) }

  http-content-type-header []

  (str "multipart/form-data; boundary=" boundary-value))


(defn- render-part [name value os]
  (try 
    (assert (string? name))

    ;; open boundary for part
    (spit-string os (make-boundary) nl)

    ;; dispatch to the part renderer
    (cond 
      (file-url? value)   (->as (. :URL :new value) f
                                (. f :getPath)
                                (io/file f)
                                (render-file-part name f os))
                                
      (io/file? value)    (render-file-part name value os)

      (map? value)        (render-file-data-part name 
                                                 (:name value) 
                                                 (:mimetype value) 
                                                 (:data value) 
                                                 (:charset value) 
                                                 os)

      (string? value)     (render-string-part name value os)

      :else               (render-string-part name (str value) os))
  (catch :Exception e  
    (throw (ex :VncException (str "Failed to process multipart item " name) 
                             e)))))


(defn- render-file-part [name file os]
  (assert (string? name))
  (assert (io/file? file))

  (try
    (let [v-file-name     (io/file-path file)
          v-file-mimetype (mimetypes/probe-content-type file)
          v-file-data     (io/slurp file)]
      (when (nil? v-file-mimetype)
        (throw (ex :VncException (str "Failed to get mimetype for file " v-file-name))))

      (render-file-data-part name v-file-name v-file-mimetype v-file-data os))
    (catch :Exception e  
      (throw (ex :VncException (str "Failed do process file " v-file-name) e)))))


(defn- render-file-data-part [name v-file-name v-file-mimetype v-file-data charset os]
  (assert (string? v-file-name))
  (assert (string? v-file-mimetype))
  (assert (or (string? v-file-data) (bytebuf? v-file-data)))
  (assert (or (nil? charset) (string? charset) (keyword? charset)))

  (spit-string os (make-content-disposition-header name v-file-name) nl)
  (spit-string os (make-content-type-header v-file-mimetype charset) nl)
  (spit-string os nl)
  (if (string? v-file-data)
    (spit-string os v-file-data)
    (spit-bytebuf os v-file-data))
  (spit-string os nl))


(defn- render-string-part [name text os]
  (assert (string? name))
  
  (spit-string os (make-content-disposition-header name) nl)
  (spit-string os nl)
  (spit-string os text nl))


(defn- spit-string [os & s]
  (io/spit-stream os (bytebuf-from-string (apply str s))))


(defn- spit-bytebuf [os buf]
  (io/spit-stream os buf))


(defn- make-boundary []
  (str "--" boundary-value))


(defn- make-closing-boundary []
  (str "--" boundary-value "--"))


(defn- make-content-disposition-header
  ([name]
    (str/format "Content-Disposition: form-data; name=%s"
                (dquote name)))

  ([name filename]
    (str/format "Content-Disposition: form-data; name=%s filename=%s" 
                (dquote name) 
                (dquote filename))))


(defn- make-content-type-header
  ([content-type]
    (make-content-type-header content-type nil))

  ([content-type charset]
    (assert (or (nil? charset) (string? charset) (keyword? charset)))
    (if (nil? charset)
      (str/format "Content-Type: %s" content-type)
      (str/format "Content-Type: %s; charset=%s" content-type (name charset)))))


(defn- dquote [s]
  (assert (not (str/contains? "s" "\"")))
  (str/double-quote s))


(defn- file-url? [v]
  (and (string? v) (str/starts-with? v "file:")))
