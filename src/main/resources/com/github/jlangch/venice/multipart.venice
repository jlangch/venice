;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Multipart 


(ns multipart)

(load-module :mimetypes)

(import :java.net.URL)
(import :java.io.File)
(import :java.nio.file.Files)
(import :java.nio.file.Path)
(import :java.nio.file.Paths)


(defonce ^:private boundary-value (str (rand-bigint 256)))

(defonce ^:private dash "--")
(defonce ^:private dq "\"")
(defonce ^:private nl "\r\n")
(defonce ^:private disposition "Content-Disposition: form-data")
(defonce ^:private field-name "; name=")
(defonce ^:private file-name "; filename=")
(defonce ^:private content-type "Content-Type: ")


(defn to-bytebuf [data]
  (assert (map? data))

  (try-with [os (io/bytebuf-out-stream)]
    (doseq [[name value] data] 
           (if (file-protocol? v)
             (io/spit-stream os (to-bytebuf-file name value))
             (io/spit-stream os (to-bytebuf-simple name value)))
    @os)))
  

(defn- to-bytebuf-file [name value]
  (assert (string? name))

  (try-with [os (io/bytebuf-out-stream)]
    (let [v-file         (->as (. :URL :new value) f
                               (. f :getPath)
                               (. :File :new f))
          v-file-name    (io/file-path v-file)
          v-mime-type    (mimetypes/mimetypes/probe-content-type v-file)]
      (when (nil? v-mime-type)
        (throw (ex :VncException (str "Failed to get mimetype for file " v-file-name))))

      (io/spit-stream os (str-to-bytebuf (str dash boundary-value nl)))
      (io/spit-stream os (str-to-bytebuf disposition))

      (io/spit-stream os (str-to-bytebuf (str field-name dq name dq file-name dq v-file-name dq nl)))
      (io/spit-stream os (str-to-bytebuf (str content-type  v-mime-type nl)))
      (io/spit-stream os (str-to-bytebuf nl))
      (io/spit-stream os (. :Files :readAllBytes (. v-file :toPath)))
      (io/spit-stream os (str-to-bytebuf nl))

      (io/spit-stream os (str-to-bytebuf (str dash boundary-value dash nl)))
      @os)
    (catch :Exception e  
      (throw (ex :VncException (str "Failed do process file " v-file-name) e)))))


(defn- to-bytebuf-simple [name value]
  (assert (string? name))
  
  (try-with [os (io/bytebuf-out-stream)]
    (io/spit-stream os (str-to-bytebuf (str dash boundary-value nl)))
    (io/spit-stream os (str-to-bytebuf disposition))

    (io/spit-stream os (str-to-bytebuf (str field-name  dq  name  dq  nl)))
    (io/spit-stream os (str-to-bytebuf nl))
    ((io/spit-stream os str-to-bytebuf (str value nl)) )

    ((io/spit-stream os str-to-bytebuf (str dash boundary-value dash nl)))
    
    @os))



(defn- str-to-bytebuf [s]
  (bytebuf-from-string s :UTF-8))


(defn- file-protocol? [v]
  (and (string? v) (str/starts-with? v "file:")))
