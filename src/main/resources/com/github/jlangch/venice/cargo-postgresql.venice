;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2024 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Docker PostgreSQL cargo testcontainer

;;;; This is just a configuration wrapper on top of the :cargo module to
;;;; simplify using PostgreSQL testcontainers

;;;; See: 
;;;; https://www.postgresql.org/
;;;; https://hub.docker.com/_/postgres

;;;; DB Clients:
;;;; - https://www.pgadmin.org/
;;;; - https://www.dbvis.com/

(ns cargo-postgresql)

(load-module :docker)
(load-module :cargo)

(import :com.github.jlangch.venice.ShellException)

;; PostgreSQL docker defaults
(defonce internal-port 5432)
(defonce default-external-port 5432)
(defonce default-user "postgres")
(defonce default-password "postgres")




;; ---------------------------------------------------------------------------
;; PostgreSQL start & stop container
;; ---------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(cargo-postgresql/start cname version storage-dir)"
          "(cargo-postgresql/start cname version storage-dir user password)"
          "(cargo-postgresql/start cname version storage-dir user password log)"
          "(cargo-postgresql/start cname version mapped-port storage-dir user password log)")
     :doc """
          Starts a PostgreSQL container. 
          
          Start rules:

            * If a container with another version exists for the container
              name remove the container and the image
            * Pull the image if not yet locally available
            * If the container already runs - use it
            * If the container is available but does not run - start it `(docker/start ...)`
            * If the container is not available - run it `(docker/run ...)`
            * Finally check for a successful startup. The container log must
              contain the string ".*PostgreSQL init process complete.*" on the
              last few line.

          Args:

          | [![width: 20%]]  | [![width: 80%]] |
          | cname            | A unique container name |
          | version          | The PostgreSQL version to use. E.g.: "16.2", "16" |
          | mapped-port      | The published (mapped) port on the host. Defaults to 5432 |
          | storage-dir      | Directory where PostgreSQL persists all the data. |
          | user             | A user. Defaults to "postgres" |
          | password         | A password. Defaults to "postgres" |
          | log              | A log function, may be *nil*. \
                               E.g: `(fn [s] (println "PostgresSQL:" s))`|
          """
     :examples '(
          """
          (do
            (load-module :cargo-postgres ['cargo-postgresql :as 'pg])
           
            ;; Run a PostgreSQL container labeled as "postgres"
            (pg/start "postgres" "16.2" "./postgres-storage"))
          """)
     :see-also '(
          "cargo-postgresql/stop"
          "cargo-postgresql/running?"
          "cargo-postgresql/logs") }

  start 

  ([cname version storage-dir]
    (start cname version default-external-port storage-dir default-user default-password nil))
 
  ([cname version storage-dir user password]
    (start cname version external-port storage-dir user password nil))
 
  ([cname version storage-dir user password log]
    (start cname version default-external-port storage-dir user password log))

  ([cname version mapped-port storage-dir user password log]
    { :pre [(string? cname)
            (string? version)
            (or (int? mapped-port) (long? mapped-port))
            (< 0 mapped-port 65536)
            (or (string? storage-dir) 
                (io/file? storage-dir))
            (or (nil? user) (string? user))
            (or (nil? password) (string? password))] }
    (when-not (io/exists-dir? storage-dir)
      (throw (ex :VncException 
                 "The PostgreSQL storage directory \"~(io/file-canonical storage-dir)\" does not exist!")))
    (let [user      (or user default-user)
          password  (or password default-password)
          publish   ["~{mapped-port}:~{internal-port}"]
          envs      ["POSTGRES_USER=~{user}"
                     "POSTGRES_PASSWORD=~{password}"]
          volumes   ["~{storage-dir}:/var/lib/postgresql/data"]
          args      []
          log       (or log default-log)
          wait-after-start-secs 3
          ready-check-max-secs  30]
      (log "starting ~{version} as \"~{cname}\" @ port ~{publish} ...")
      (cargo/start cname "postgres" version 
                   publish
                   envs 
                   volumes
                   args
                   postgres-ready?
                   log
                   wait-after-start-secs
                   ready-check-max-secs))))


(defn
  ^{ :arglists '(
          "(cargo-postgresql/stop cname)"
          "(cargo-postgresql/stop cname log)")
     :doc """
          Stops a PostgreSQL container

          Args:

          | cname   | A unique container name  |
          """
     :examples '(
          """
          (do
            (load-module :cargo-postgres ['cargo-postgresql :as 'pg])
           
            ;; Stop the PostgreSQL container labeled as "postgresql"
            (pg/stop "postgresql"))
          """)
     :see-also '(
          "cargo-postgresql/start" 
          "cargo-postgresql/running?") }

  stop 
  
  ([cname]
     (stop cname nil))

  ([cname log]
    { :pre [(string? cname)] }
    (let [log (or log default-log)]
      (cargo/stop cname log))))


(defn
  ^{ :arglists '("(cargo-postgresql/running? cname)")
     :doc """
          Returns true if a container with the specified name is running.

          Args:

          | cname   | A unique container name    |
          """
     :examples '(
          """
          ;; Test if PostgreSQL container is running
          (do
            (load-module :cargo-postgres ['cargo-postgresql :as 'pg])
            (pg/running? "postgres"))
          """)
     :see-also '(    
          "cargo-postgresql/logs"
          "cargo-postgresql/start", 
          "cargo-postgresql/stop") }

  running? [cname]

  { :pre [(string? cname)] }

  (docker/container-running-with-name? cname))


(defn 
  ^{ :arglists '(
          "(cargo-postgresql/logs cname)"
          "(cargo-postgresql/logs cname lines)")
     :doc """
          Prints the PostgreSQL docker container logs

          Args:

          | cname   | A unique container name  |
          | lines   | The number of tail lines |
          """
     :examples '(
          """
          (do
            (load-module :cargo-postgres ['cargo-postgresql :as 'pg])
            (pg/logs "postgresql"))
          """,
          """
          (do
            (load-module :cargo-postgres ['cargo-postgresql :as 'pg])
            (pg/logs "postgresql" 100))
          """)
     :see-also '(
          "cargo-postgresql/start" 
          "cargo-postgresql/running?") }

  logs 

  ([cname] 
    (logs cname nil))

  ([cname lines]
    { :pre [(string? cname)  (or (nil? lines) (long? lines))] }
    (if (nil? lines)
      (println (docker/container-logs cname))
      (println (docker/container-logs cname :tail lines)))))



;; ---------------------------------------------------------------------------
;; utils
;; ---------------------------------------------------------------------------

(defn default-log [s]
  (println "PostgreSQL:" s))


(defn postgres-ready? [cname]
  (->> (docker/container-logs cname :tail 10)
       (str/split-lines)
       (map str/trim)
       (filter #(match? % #".*PostgreSQL init process complete; ready for start up.*"))
       (count)
       (pos?)))
 