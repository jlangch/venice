;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Parsifal

;;;; Thanks to Nate Young and his Parsatron Clojure parser combinators project.
;;;; https://github.com/youngnh/parsatron
;;;;
;;;; Introduction:
;;;; https://github.com/sjl/parsatron/blob/docs/docs/guide.markdown
;;;; https://cljdoc.org/d/the/parsatron/0.0.8/doc/token
;;;; https://twoguysarguing.wordpress.com/category/haskell/
;;;;
;;;; This is a Venice port of the Parsatron parser combinator.

;;; Parsatron is based on Haskell's Parsec and boils down to 2 ideas.
;;;     i) A parser either consumes input or doesn’t. Consumed or Empty.
;;;    ii) A parser either succeeds in parsing or it fails. Ok or Err.
;;;
;;; These outcomes can be combined into 4 continuation functions that are
;;; passed to every parser:
;;;
;;;     cok – Consumed & Ok
;;;     cerr – Consumed & Err
;;;     eok – Empty & Ok
;;;     eerr – Empty & Err
;;;
;;; As for errors, Parsatron defines two types of them. Those that we can say
;;; something about, and those that we can say nothing about. These are errors
;;; with messages and unknown errors, respectively. Of the errors that we can
;;; say something about, some are the result of not finding input that the
;;; parser was expecting, which lead to messages like "expected 'a' and
;;; found 'b'", and some are the result of not finding input where we expected
;;; to, which lead to messages like "unexpected end of input".
;;;
;;; Parsatron as Parsec is not implementing backtracking by default, and instead
;;; relies on the programmer to implement backtracking using constructs like
;;; `lookahead` and `attempt`.
;;;
;;; Finally, Parsatron keeps tabs on the thing it's parsing, it maintains state.
;;; The state is made up of 2 elements, the input stream and the current
;;; source position, itself made up of the name of the input, and one's
;;; current line and column location in it.

;;; List of Venice changes added to Parsatron
;;;  - Added protocol 'SourcePosition' and changed function `inc-sourcepos`
;;;    to support error message for source line/column nr if item types
;;;    other than char are used.
;;;  - Deduping the error message list, to avoid repeated error messages
;;;  - Enhanced the `never` parser to accept an optional customized error
;;;    message
;;;  - Changed the behaviour of the built-in `string`, `between`, and `times`
;;;    parser to not consume any input upon failure to follow the principle
;;;    of least surprise.
;;;  - Added an `any` parser to consume a token with any value
;;;  - Added a `hexdigit` parser to consume hexdigit chars

;;; Tracing parsers: https://www.quanttec.com/fparsec/users-guide/debugging-a-parser.html

(ns parsifal)

(import :com.github.jlangch.venice.ParseError)


;; -----------------------------------------------------------------------------
;; protocols

(defprotocol
  ^{ :doc """
          Defines a protocol to add line and column information for custom
          tokens.

          Definition:

          ```
          (defprotocol SourcePosition
            (line [p])
            (column [p]))
          ```
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (deftype :Token [type :keyword, val :string, line :long, column :long]
              Object
                (toString [this] (str/format "[%s %s (%d,%d)]"
                                             (pr-str (:type this))
                                             (pr-str (:val this))
                                             (:line this)
                                             (:column this)))
              p/SourcePosition
                (line [this] (:line this))
                (column [this] (:column this)))

            (p/defparser lbracket []
              (p/let->> [[l c] (p/pos)
                         t     (p/char #\\[)]
                 (p/always (Token. :lbracket (str t) l c))))

            (p/run (lbracket) "[1,2,3]")
            ; => [:lbracket "[" (1,1)]
          )
          """ )
     :see-also '("defprotocol", "deftype") }

  SourcePosition
    (line [p])
    (column [p]))



;; -----------------------------------------------------------------------------
;; internal types
(deftype :source-pos [line :long, column :long])
(deftype :input-state [input :any, pos :source-pos, trace :boolean])

(deftype :continue [func :function])
(deftype :ok [item :any])
(deftype :err [errmsg :string])

(deftype :parse-error [pos :source-pos msgs :sequence])



;; -----------------------------------------------------------------------------
;; position (internal use)
(defn inc-sourcepos
  ; Increment the source position by a single character, c. On newline,
  ; increments the SourcePos's line number and resets the column, on
  ; all other characters, increments the column
  [pos c]
  (if (extends? (type c) SourcePosition)
    (source-pos. (line c) (column c))
    (let [line   (:line pos)
          column (:column pos)]
      (if (str/linefeed? c)
        (source-pos. (inc line) 1)
        (source-pos. line (inc column))))))


;; -----------------------------------------------------------------------------
;; errors (internal use)
(defn show-error [parse-error]
  (let [msgs (:msgs parse-error)
        pos  (:pos parse-error)]
    (str (str/join ", " msgs)
         " at"
         " line: " (:line pos)
         " column: " (:column pos))))

(defn error [msg pos]
  (parse-error. pos (if (vector? msg) msg [msg])))

(defn unknown-error [state]
  (error "Error" (:pos state)))

(defn unexpect-error [msg pos]
  (error (str "Unexpected " msg) pos))

(defn expect-error [msg pos]
  (error (str "Expected " msg) pos))

(defn merge-errors [err other-err]
  (parse-error. (:pos other-err)
                (dedupe (flatten (concat (:msgs err) (:msgs other-err))))))


;; -----------------------------------------------------------------------------
;; trampoline  (internal use)
(defn parsifal-poline
  ; A trampoline for executing potentially stack-blowing recursive
  ; functions without running out of stack space. This particular
  ; trampoline differs from Venice core/trampoline by requiring
  ; continuations to be wrapped in a Continue record. Will loop until
  ; the value is no longer a Continue record, returning that.
  [f & args]
  (loop [value (apply f args)]
    (if (continue? value)
      (recur ((:func value)))
      value)))

(defn sequentially [f value]
  (if (continue? value)
    (continue. #(sequentially f ((:func value))))
    (f value)))


;; -----------------------------------------------------------------------------
;; util  (internal use)
(defn format-pos [state]
  (str/format "[Line: %d, Col: %d]"
              (-> state :pos :line)
              (-> state :pos :column)))

(defn fail [message] (ex :ParseError message))

(defn digit? [c] (str/digit? c))

(defn hexdigit? [c] (str/hexdigit? c))

(defn letter? [c] (str/letter? c))


;; -----------------------------------------------------------------------------
;; parsers  (internal use)
(defn bind
  ; Parse p, and then q. The function f must be of one argument, it
  ; will be given the value of p and must return the q to follow p
  [p f]
  (fn [state cok cerr eok eerr]
    (let [pcok (fn [item state]
                 (sequentially
                     (fn [q] (continue. #(q state cok cerr cok cerr)))
                     (f item)))
          peok (fn [item state]
                 (sequentially
                     (fn [q] (continue. #(q state cok cerr eok eerr)))
                     (f item)))]
      (continue. #(p state pcok cerr peok eerr)))))


(defn nxt
  ; Parse p and then q, returning q's value and discarding p's
  [p q]
  (bind p (fn [_] q)))


;; -----------------------------------------------------------------------------
;; parsers
(defmacro
  ^{ :arglists '("(defparser name args & body)")
     :doc """
          The `defparser` macro defines _functions_ that create parsers.

          **Note:** *Parsifal* is not implementing backtracking by default, and
          instead relies on the programmer to implement backtracking using
          constructs like `lookahead` and `attempt`.

          The parsers created by this macro do not rewind the input state if one
          of the sub parsers fails. To allow backtracking `attempt` can be used!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser sample []
              (p/string "Hello")
              (p/always 42))

            (p/run (sample) "Hello, world!")
            ; => 42
          )
          """,
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            ; Backtracking

            (p/defparser letter-and-digit []
              (p/letter)
              (p/digit))

            ; No implicit backtracking!
            (p/run (p/either (letter-and-digit) (p/letter)) "abc")
            ; => ParseError: Unexpected token 'b' at line: 1 column: 2

            ; Explicit backtracking with `attempt`!
            (p/run (p/either (p/attempt (letter-and-digit)) (p/letter)) "abc")
            ; => #\\a
          )
          """)}

  ; Parsers are simply functions that accept the 5 arguments
  ; state, cok, cerr, eok, eerr but this macro takes care
  ; of writing that ceremony for you and wraps the body in a >>

  defparser [name args & body]

  (let [state (gensym "state_")
        cok   (gensym "cok_")
        cerr  (gensym "cerr_")
        eok   (gensym "eok_")
        eerr  (gensym "eerr_")
        p     (gensym "p_")]
    `(defn ~name ~args
       (fn [~state ~cok ~cerr ~eok ~eerr]
         (let [~p (parsifal/>> ~@body)]
           (parsifal/continue. #(~p ~state ~cok ~cerr ~eok ~eerr)))))))


(defmacro
  ^{ :arglists '("(let->> [[& bindings_] & body])")
     :doc """
          Binds parser results to names for further processing
          input.

          **Note:** *Parsifal* is not implementing backtracking by default, and
          instead relies on the programmer to implement backtracking using
          constructs like `lookahead` and `attempt`.

          The parser `let->>` does not rewind the input state if one of the sub
          parsers fails. `let->>*` is the backtracking version of `let->>` that
          wraps the parsers within a call to `attempt`. See the backtracking
          example below.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser float []
              (p/let->> [i (p/many1 (p/digit))
                         d (p/char #\\.)
                         f (p/many1 (p/digit))]
                 (p/always (apply str (flatten (list i d f))))))

            (p/run (float) "10.56")
            ; => "10.56"
          )
          """,
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser int []
              (p/let->> [i (p/many1 (p/digit))]
                 (let [n (long (apply str i))]
                   (if (even? n)
                     (p/always (str n " is even"))
                     (p/always (str n " is odd"))))))

            (p/run (int) "500")
            ; => "500 is even"
          )
          """,
          """
          ; Backtracking demo
          (do
            (load-module :parsifal ['parsifal :as 'p])

            ; No backtracking with `let->>` parser!
            (p/run (p/either (p/let->> [c (p/letter)
                                        d (p/digit)]
                                (p/always (list c d)))
                             (p/letter))
                   "abc")
            ; => ParseError: Unexpected token 'b' at line: 1 column: 2

            ; Backtracking with `let->>*` parser
            (p/run (p/either (p/let->>* [c (p/letter)
                                         d (p/digit)]
                               (p/always (list c d)))
                             (p/letter))
                   "abc")
            ; => #\\a
          )
          """)}

  let->> [[& bindings_] & body]

   (let [[bind-form p] (take 2 bindings_)]
     (if (== 2 (count bindings_))
       `(parsifal/bind ~p (fn [~bind-form] ~@body))
       `(parsifal/bind ~p (fn [~bind-form]
                             (parsifal/let->> ~(drop 2 bindings_) ~@body))))))

(defmacro let->>* [bindings_ & body]
  `(parsifal/attempt (parsifal/let->> ~bindings_ ~@body)))


(defn
  ^{ :arglists '("(always x)")
     :doc """
          A parser that always succeeds with the value given and consumes no
          input.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser integer []
              (p/let->> [t (p/many1 (p/digit))]
                 (p/always (long (apply str t)))))

            (p/run (integer) "400")
            ; => 400
          )
          """,
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser optional [p default-value]
              (p/either (p/attempt p)
                        (p/always default-value)))

            (p/run (optional (p/char #\\X) #\\?) "X400")
            ; => #\\X

            (p/run (optional (p/char #\\X) #\\?) "400")
            ; => #\\?
          )
          """)}

  always [x]

  (fn [state cok cerr eok eerr]
    (eok x state)))


(defn
  ^{ :arglists '(
          "(never)",
          "(never err-msg)",
          "(never err-msg line column)")
     :doc """
          A parser that always fails, consuming no input.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            ;; parse a string with a single integer
            (p/defparser single-integer []
               (p/let->> [i (p/many1 (p/digit))
                          t (p/either (p/eof) (p/any))]
                  (if (nil? t)
                    (p/always (apply str i))
                    (p/never (str "Unexpected token '" t "'")))))

            (p/run (single-integer) "400")
            ; => "400"

            (p/run (single-integer) "400-")
            ; => ParseError: Unexpected token '-' at line: 1 column: 5
          )
          """)}

  never

  ([]
    (fn [state cok cerr eok eerr]
      (eerr (unknown-error state))))

  ([err-msg]
    (fn [state cok cerr eok eerr]
      (eerr (error err-msg (:pos state)))))

  ([err-msg line column]
    (fn [state cok cerr eok eerr]
      (eerr (error err-msg (source-pos. line column))))))


(defn
  ^{ :arglists '("(attempt p)")
     :doc """
          A parser that will attempt to parse `p`, and upon failure never
          consume any input.

          **Note:** *Parsifal* is not implementing backtracking by default, and
          instead relies on the programmer to implement backtracking using
          constructs like `lookahead` and `attempt`.

          The parsers `>>` and `let->>` do not rewind the input state if any
          of the sub parsers fails. To add backtracking parsers can be wrapped
          with `attempt`!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser optional [p default-value]
              (p/either (p/attempt p)
                        (p/always default-value)))

            (p/run (optional (p/char #\\X) #\\?) "400")
            ; => #\\?
          )
          """,
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            ; Backtracking

            ; No implicit backtracking with `>>` parser!
            (p/run (p/either (p/>> (p/letter) (p/digit))
                             (p/letter))
                   "abc")
            ; => ParseError: Unexpected token 'b' at line: 1 column: 2

            ; Explicit backtracking with `>>` parser using `attempt`!
            (p/run (p/either (p/attempt (p/>> (p/letter) (p/digit)))
                             (p/letter))
                   "abc")
            ; => #\\a
          )
          """)}

  attempt [p]

  (fn [state cok cerr eok eerr]
    (continue. #(p state cok eerr eok eerr))))


;; -----------------------------------------------------------------------------
;; interacting with the parser's state
(defn extract
  ; Extract information from the Parser's current state. f should be a
  ; fn of one argument, the parser's current state, and any value that
  ; it deems worthy of returning will be returned by the entire parser.
  ; No input is consumed by this parser, and the state itself is not
  ; altered.
  [f]
  (fn [state _ _ eok _]
    (eok (f state) state)))


(defn examine
  ; Return the Parser's current state
  []
  (extract identity))


(defn
  ^{ :arglists '("(lineno)")
     :doc """
          A parser that returns the current line number. It consumes no input.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser integer []
              (p/let->> [l (p/lineno)
                         t (p/many1 (p/digit))]
                 (p/always [:int (apply str t) l])))

            (p/run (integer) "400")
            ; => [:int "400" 1]
          )
          """)}

  lineno []

  (extract (comp :line :pos)))


(defn
  ^{ :arglists '("(pos)")
     :doc """
          A parser that returns the current line/column number as tuple of
          `[line col]`. It consumes no input.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser integer []
              (p/let->> [[l c] (p/pos)
                         t     (p/many1 (p/digit))]
                 (p/always [:int (apply str t) (list l c)])))


            (p/run (integer) "400")
            ; => [:int "400" (1,1)]
          )
          """)}

  pos []

  (extract #(vector (-> % :pos :line) (-> % :pos :column))))


;; -----------------------------------------------------------------------------
;; token
(defn
  ^{ :arglists '("(token)")
     :doc """
          Consume a single item from the head of the input if `(consume? item)`
          predicate is not `nil`. This parser will fail to consume if either the
          `consume?` test returns `false` or if the input is empty.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/token #(< % 5)) [3 5 7])
            ; => 3

            (p/run (p/token str/upper-case) "Hello")
            ; => #\\H
          )
          """)}

  token [consume?]

  (fn [{:keys [input pos trace] :as state} cok cerr eok eerr]
    (if-not (empty? input)
      (let [tok (first input)]
        (if (consume? tok)
          (cok tok (input-state. (rest input) (inc-sourcepos pos tok) trace))
          (eerr (unexpect-error (str "token '" tok "'") pos))))
      (eerr (unexpect-error "end of input" pos)))))


(defn
  ^{ :arglists '("(any)")
     :doc """
          Consume any single item from the head of the input. This parser will
          fail to consume if the input is empty.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/any) "Cats")
            ; => #\\C

            (p/run (p/any) [#\\C #\\a #\\t #\\s])
            ; => #\\C
          )
          """)}

  any []

  (token (constantly true)))


(defn
  ^{ :arglists '("(many p)")
     :doc """
          Returns a new parser that will parse zero or more items that match
          the given parser `p`. The matched items are concatenated into a
          sequence.

          *Note*: A ParseError will be thrown if this combinator is applied to
          a parser that accepts the empty string, as that would cause the parser
          to loop forever.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/many (p/digit)) "1234-0000")
            ; => [#\\1 #\\2 #\\3 #\\4]

            (p/run (p/many (p/digit)) "ABC-12345")
            ; => []
          )
          """)}

  many [p]

  (let [many-err (fn [_ _]
                   (fail "Combinator '*' is applied to a parser that accepts an empty string"))
        safe-p   (fn [state cok cerr eok eerr]
                   (continue. #(p state cok cerr many-err eerr)))]
    (either
     (let->> [x safe-p
              xs (many safe-p)]
       (always (cons x xs)))
     (always []))))


(defn
  ^{ :arglists '("(many1 p)")
     :doc """
          Returns a new parser that will parse one or more items that match
          the given parser `p`. The matched items are concatenated into a
          sequence.

          *Note*: A ParseError will be thrown if this combinator is applied to
          a parser that accepts the empty string, as that would cause the parser
          to loop forever.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/many1 (p/digit)) "1234-0000")
            ; => [#\\1 #\\2 #\\3 #\\4]

            (p/run (p/many1 (p/digit)) "ABC-12345")
            ; => ParseError: Unexpected token 'A' at line: 1 column: 1
          )
          """)}

  many1 [p]

  (let->> [x p, xs (many p)]
    (always (cons x xs))))


(defn
  ^{ :arglists '("(times n p)")
     :doc """
          Returns a new parser that consumes exactly n times what the parser `p`
          matches. The matched items are concatenated into a sequence. Does not
          consume any input if not all of the repetitions match.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/times 5 (p/letter)) "Hello, world!")
            ; => [#\\H #\\e #\\l #\\l #\\o]

            ;; Note: `p/times` is different from parsing letters explicitely
            (p/run (p/>> (p/letter)
                         (p/letter)
                         (p/letter)
                         (p/letter)
                         (p/letter))
                   "Hello, world!")
            ; => [#\\o]
          )
          """)}

  times [n p]

  (if (== n 0)
    (always [])
    (attempt
      (let->> [x p
               xs (times (dec n) p)]
        (always (cons x xs))))))


(defn
  ^{ :arglists '("(either p q)")
     :doc """
          Returns a new parser that tries `p`, upon success, returning its
          value, and upon failure (if no input was consumed) tries to parse `q`
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/either (p/many1 (p/digit)) (p/many1 (p/letter))) "Hello")
            ; => [#\\H #\\e #\\l #\\l #\\o]

            (p/run (p/either (p/many1 (p/digit)) (p/many1 (p/letter))) "42")
            ; => [#\\4 #\\2]
          )
          """)}

  either [p q]

  (fn [state cok cerr eok eerr]
    (let [peerr (fn [err-from-p]
                  (let [qeerr (fn [err-from-q]
                                (eerr (merge-errors err-from-p err-from-q)))]
                    (continue. #(q state cok cerr eok qeerr))))]
      (continue. #(p state cok cerr eok peerr)))))


(defn
  ^{ :arglists '("(choice & p)")
     :doc """
          Returns a new parser that tries each given parsers in turn,
          returning the value of the first one that succeeds.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/choice (p/many1 (p/digit)) (p/many1 (p/letter))) "Hello")
            ; => [#\\H #\\e #\\l #\\l #\\o]

            (p/run (p/choice (p/many1 (p/digit)) (p/many1 (p/letter))) "42")
            ; => [#\\4 #\\2]
          )
          """)}

  choice [& parsers]

  (if (empty? parsers)
    (never)
    (let [p (first parsers)]
      (either p (apply choice (rest parsers))))))


(defn
  ^{ :arglists '("(between open close p)")
     :doc """
          Returns a new parser that parses `open`, `p`, and `close`
          returning the value of `p` and discarding the values of `open` and
          `close`.¶
          Does not consume any input on failure.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])
            (p/run (p/between (p/char #\\lparen)
                              (p/char #\\rparen)
                              (p/many1 (p/digit)))
                   "(123)")
            ; => [#\\1 #\\2 #\\3]
          )
          """ )}

  between [open close p]

  (attempt (let->> [_ open, x p, _ close]
             (always x))))


(defmacro
  ^{ :arglists '("(>> p)", "(>> p q)", "(>> p q & ps)")
     :doc """
          Returns a new parser that parses a list of parsers. Returns the value
          of the last parser if all parsers succeed, else the parser fails.

          **Note:** *Parsifal* is not implementing backtracking by default, and
          instead relies on the programmer to implement backtracking using
          constructs like `lookahead` and `attempt`.

          The parser `>>` does not rewind the input state if any of the sub
          parsers fails. `>>*` is the backtracking version of `>>` that
          wraps the parsers within a call to `attempt`. See the backtracking
          example below.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/>> (p/char #\\lparen) (p/digit) (p/char #\\rparen)) "(1)")
            ; => #\\)

            ; Using bindings
            (p/run (p/let->> [l (p/char #\\lparen)
                              d (p/digit)
                              r (p/char #\\rparen)]
                      (p/always (str l d r)))
                   "(1)")
            ; => "(1)"
          )
          """,
          """
          ; Backtracking demo
          (do
            (load-module :parsifal ['parsifal :as 'p])

            ; No backtracking with `>>` parser
            (p/run (p/either (p/>> (p/letter) (p/digit))
                             (p/letter))
                   "abc")
            ; => ParseError: Unexpected token 'b' at line: 1 column: 2

            ; Backtracking with `>>*` parser
            (p/run (p/either (p/>>* (p/letter) (p/digit))
                             (p/letter))
                   "abc")
            ; => #\\a
          )
          """)}

  >>

  ([p] p)
  ([p q] `(parsifal/nxt ~p ~q))
  ([p q & ps] `(parsifal/nxt ~p (parsifal/>> ~q ~@ps))))

(defmacro >>*
  ([p] p)
  ([p q] `(parsifal/attempt (parsifal/nxt ~p ~q)))
  ([p q & ps] `(parsifal/attempt (parsifal/nxt ~p (parsifal/>> ~q ~@ps)))))


(defn
  ^{ :arglists '("(lookahead p)")
     :doc """
          A parser that upon success consumes no input, but returns what was
          parsed.

          **Note:** *Parsifal* is not implementing backtracking by default, and
          instead relies on the programmer to implement backtracking using
          constructs like `lookahead` and `attempt`.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/defparser block-string-tok []
              (p/between (p/times 3 (p/char #\\quote))
                         (p/times 3 (p/char #\\quote))
                         (p/many (p/let->> [cs (p/lookahead (p/times 3 (p/any-char)))]
                                    (if (= cs [#\\quote #\\quote #\\quote])
                                        (p/never)
                                        (p/any-char))))))

            (p/defparser block-string []
              (p/let->> [s (block-string-tok)]
                 (p/always (apply str s))))

            (p/run (block-string) "\\"\\"\\"A \\"string\\" with quotes!\\"\\"\\"")
            ; => "A \\"string\\" with quotes!"
          )
          """)}

  lookahead [p]

  (fn [state cok cerr eok eerr]
    (let [ok (fn [item _] (eok item state))]
      (continue. #(p state ok cerr eok eerr)))))


(defn
  ^{ :arglists '(
        "(eof)",
        "(eof err-msg)")
     :doc """
          A parser to detect the end of input. If there is nothing more to
          consume from the underlying input, this parser suceeds with a `nil`
          value, otherwise it fails.

          A custom error message can be provided for the case the parser fails.
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/eof) "")
            ; => nil

            (p/run (p/eof) "a")
            ; => ParseError: Expected end of input at line: 1 column: 1
          )
          """)}

  eof

  ([]
    (fn [state cok cerr eok eerr]
      (if (empty? (:input state))
        (eok nil state)
        (eerr (expect-error "end of input" (:pos state))))))

  ([err-msg]
    (fn [state cok cerr eok eerr]
      (if (empty? (:input state))
        (eok nil state)
        (eerr (error err-msg (:pos state)))))))


(defn
  ^{ :arglists '("(char)")
     :doc """
          Consume the given character.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/char #\\H) "Hello")
            ; => #\\H

            (p/run (p/char #\\H) [#\\H #\\e #\\l #\\l #\\o])
            ; => #\\H
          )
          """)}

  char [c]

  (token #(== c %)))


(defn
  ^{ :arglists '("(not-char)")
     :doc "Consume all but the given character"
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/not-char #\\x) "Cats")
            ; => #\\C

            (p/run (p/not-char #\\x) [#\\C #\\a #\\t #\\s])
            ; => #\\C
          )
          """)}

  not-char [c]

  (token #(not (== c %))))


(defn
  ^{ :arglists '("(any-char)")
     :doc """
          Consume any character.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/any-char) "Cats")
            ; => #\\C

            (p/run (p/any-char) [#\\C #\\a #\\t #\\s])
            ; => #\\C
          )
          """)}

  any-char []

  (token str/char?))


(defn
  ^{ :arglists '("(digit)")
     :doc """
          Consume a digit [0-9] character.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/digit) "123")
            ; => #\\1

            (p/run (p/any-char) [#\\1 #\\2 #\\3])
            ; => #\\1
          )
          """)}

  digit []

  (token str/digit?))


(defn
  ^{ :arglists '("(hexdigit)")
     :doc """
          Consume a hex digit [0-9a-fA-F] character.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/hexdigit) "A00")
            ; => #\\A

            (p/run (p/hexdigit) [#\\A #\\0 #\\0])
            ; => #\\A
          )
          """)}

  hexdigit []

  (token str/hexdigit?))


(defn
  ^{ :arglists '("(letter)")
     :doc """
          Consume a letter character defined by Java `Character.isLetter(ch)`.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/letter) "Cats")
            ; => #\\C

            (p/run (p/letter) [#\\C #\\a #\\t #\\s])
            ; => #\\C
          )
          """)}

  letter []

  (token str/letter?))


(defn
  ^{ :arglists '("(letter-or-digit)")
     :doc """
          Consume a letter or digit character defined by Java
          `Character.isLetterOrDigit(ch)`.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/letter-or-digit) "Cats")
            ; => #\\C

            (p/run (p/letter-or-digit) "5Cats")
            ; => #\\5

            (p/run (p/letter-or-digit) [#\\C #\\a #\\t #\\s])
            ; => #\\C
          )
          """)}

  letter-or-digit []

  (token str/letter-or-digit?))


(defn
  ^{ :arglists '("(string s)")
     :doc """
          Consume the given string and returns a string. Does not consume any
          input upon failure.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/string "Hello") "Hello, world!")
            ; => "Hello"

            (p/run (p/string "Hello") (seq "Hello, world!"))
            ; => "Hello"
          )
          """,
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/either (p/string "Hello") (p/letter)) "Hello, world!")
            ; => "Hello"

            (p/run (p/either (p/string "HellO") (p/letter)) "Hello, world!")
            ; => #\\H
          )
          """)}

  string [s]

  (attempt (reduce nxt (concat (map parsifal/char s)
                                (list (always s))))))


(defn
  ^{ :arglists '("(any-char-of s)")
     :doc """
          Consume any of the characters given in the string. E.g.:
          `(any-char-of "([{")`.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/any-char-of "HXYZ") "Hello, world!")
            ; => #\\H
          )
          """)}

  any-char-of [s]

  (token (fn [x] (str/contains? s x))))


(defn
  ^{ :arglists '("(none-char-of s)")
     :doc """
          Consume all but of the characters given in the string. E.g.:
          `(none-char-of "([{")`.

          *Note*: Works with char items only!
          """
     :examples '(
          """
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/none-char-of "()[]{}") "Hello, world!")
            ; => #\\H
          )
          """)}

  none-char-of [s]

  (token (fn [x] (not (str/contains? s x)))))




;; -----------------------------------------------------------------------------
;; run parsers
(defn run-parser
  ; Execute a parser p, given some state, Returns Ok or Err
  [p state]
  (parsifal-poline p
                   state
                   (fn cok [it _] (ok. it))
                   (fn cerr [err] (err. (show-error err)))
                   (fn eok [it _] (ok. it))
                   (fn eerr [err] (err. (show-error err)))))


(defn
  ^{ :arglists '("(run p input)")
     :doc """
          Run a parser p over some input. The input can be a string or a seq
          of tokens, if the parser produces an error, its message is wrapped
          in a *ParseError* and thrown, and if the parser succeeds, its
          value is returned.

          *Parsifal* is port of Nate Young's Clojure Parsatron
          [parser combinators](https://github.com/youngnh/parsatron) project.

          *Parsifal* is not implementing backtracking by default, and instead
          relies on the programmer to implement backtracking using constructs
          like `lookahead` and `attempt`.

          A simple parser example:

          ```
          (do
            (load-module :parsifal ['parsifal :as 'p])

            (p/run (p/char #\\H) "Hello")
            ; => #\\H

            (p/run (p/char #\\H) [#\\H #\\e #\\l #\\l #\\o])
            ; => #\\H
          )
          ```
          """}

  run

  ([p input] (run p input false))

  ([p input trace]
    (let [state  (input-state. input (source-pos. 1 1) trace)
          result (run-parser p state)]
      (cond
        (ok? result)  (:item result)
        (err? result) (throw (fail (:errmsg result)))))))
