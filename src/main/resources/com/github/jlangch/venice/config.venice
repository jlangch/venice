;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2023 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice configuration module


(ns config)

(defn
  ^{ :arglists '("(->ks prefix s)")
     :doc """
          Normalize the string, split and map the elements to keywords.
          Returns `nil` if the string doesn't match the passed 'prefix'.

          The 'prefix' may be `nil` or any string (even an empty string). The
          string and the prefix are normalized prior to processing, meaning they
          are translated to lower case and '_' are replaced by '.'.
          """
     :examples '(
          """(config/->ks "" "java.vendor.name")"""
          """(config/->ks "java" "java.vendor.name")"""
          """(config/->ks "java.vendor" "java.vendor.name")""" ) }

  ->ks [prefix s]

  (let [prefix    (when-not (nil? (str/trim-to-nil prefix))
                    (-> (str/lower-case prefix) (str/strip-end ".") (str ".")))
        prefixed? (fn [s] (str/starts-with? s prefix))
        select    (fn [s] (cond
                            (nil? prefix)  s
                            (prefixed? s)  (str/strip-start s prefix)
                            :else          nil))]
    (some-> (str/lower-case s)
            (str/replace-all "_" ".")
            (str/replace-first (regex/pattern "^[.]+") "")
            (str/trim-to-nil)
            (select)
            (str/split "[.]")
            (as-> s (map empty-to-nil s))
            (as-> s (filter some? s))
            (as-> s (map keyword s))
            (empty-to-nil))))


(defn- read-json [s reader-opts]
  (apply json/read-str s reader-opts))


(defn- read-system [prefix properties]
  (reduce (fn [acc [k v]]
            (if-let [ks (->ks prefix k)]
              (assoc-in acc ks v)
              acc))
          {}
          properties))


(defn
  ^{ :arglists '(
          "(resource path)",
          "(resource path reader-opts)")
     :doc """
          Reads a JSON configuration part from given path in classpath.

          The optional 'reader-opts' are defined by `json/read-str`.¶
          E.g.: `:key-fn keyword` will convert all config keys to keywords
          """
     :examples '(
          """
          (config/resource "com/github/jlangch/venice/examples/database-config.json"
                           :key-fn keyword)
          """)
     :see-also '(
          "config/file" "config/build" "json/read-str") }

  resource [path & reader-opts]

  (-> (io/load-classpath-resource path)
      (io/bytebuf-in-stream)
      (io/slurp :binary false)
      (read-json reader-opts)))


(defn
  ^{ :arglists '(
          "(file f)",
          "(file f reader-opts)")
     :doc """
          Reads a JSON configuration part from given file f.

          f may be a:

          * string file path, e.g: "/temp/foo.json"
          * `java.io.File`, e.g: `(io/file "/temp/foo.json")`
          * `java.io.InputStream`
          * `java.io.Reader`
          * `java.net.URL`
          * `java.net.URI`

          The optional 'reader-opts' are defined by `json/read-str`.¶
          E.g.: `:key-fn keyword` will convert all config keys to keywords
          """
     :examples '(
          """(config/file "/foo/app/config-production.json" :key-fn keyword)"""
          """
          (do
            (def cfg-json \"\"\"
                          { "db" : {
                              "classname" : "com.mysql.jdbc.Driver",
                              "subprotocol" : "mysql",
                              "subname" : "//127.0.0.1:3306/test",
                              "user" : "test",
                              "password" : "123"
                            }
                          }
                          \"\"\")
            (-> (io/buffered-reader cfg-json)
                (config/file :key-fn keyword)))
          """)
     :see-also '(
          "config/resource" "config/build" "json/read-str") }

  file [f & reader-opts]

  (-> f
      (io/slurp :binary false)
      (read-json reader-opts)))


(defn
  ^{ :arglists '("(env prefix)")
     :doc """
          Reads configuration part from environment variables, filtered by a
          prefix. `nil` may passed as prefix to get env vars.

          The reader splits the environment variable names on the underscores
          to build a map.

          ```
          (base) $ env | grep JAVA_
          JAVA_11_OPENJDK_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home
          JAVA_11_ZULU_HOME=/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home
          JAVA_11_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home
          JAVA_8_ZULU_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home
          JAVA_8_OPENJDK_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
          JAVA_8_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
          JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home

          venice> (config/env "java")
          => {
               :11 {
                 :zulu { :home "/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home" }
                 :openjdk { :home "/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home" }
                 :home "/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home"
               }

               :8 {
                 :zulu { :home "/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home" }
                 :openjdk { :home "/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home" }
                 :home "/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home"
               }

               :home "/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home"
             }
          ```
          """
     :examples '(
          """(config/env "DATABASE_")""")
     :see-also '(
          "config/env-var" "config/properties" "config/build") }

  env [prefix]

  (read-system prefix (core/system-env)))


(defn
  ^{ :arglists '("(properties prefix)")
     :doc """
          Reads configuration part from system properties, filtered by a prefix.
          `nil` may passed as prefix to get property vars.

          The reader splits the property names on the underscores to build a
          map.
          """
     :examples '(
          """(config/properties "DATABASE_")""")
     :see-also '(
          "config/property-var" "config/build") }

  properties [prefix]

  (read-system prefix (core/system-prop)))


(defn
  ^{ :arglists '(
          "(env-var name path)",
          "(env-var name path default-val)")
     :doc """
          Reads a configuration value from an environment variable and
          associates it to the given path in a map.
          """
     :examples '(
          """(config/env-var "JAVA_HOME" [:java-home])"""
          """(config/env-var "SERVER_PORT" [:http :port])"""
          """(config/env-var "SERVER_PORT" [:http :port] "8080")""")
     :see-also '(
          "config/property-var" "config/env" "config/build") }

  env-var

  ([name path]
    (env-var name path nil))

  ([name path default-val]
    (when-let [value (core/system-env name default-val)]
      (assoc-in {} path value))))


(defn
  ^{ :arglists '(
          "(property-var name path)",
          "(property-var name path default-val)")
     :doc """
          Reads a configuration value from an system property and associates it
          to the given path in a map.
          """
     :examples '(
          """(config/property-var "java.vendor" [:java :vendor])"""
          """(config/property-var "java.version" [:java :version])"""
          """(config/property-var "SERVER_PORT" [:http :port])"""
          """(config/property-var "SERVER_PORT" [:http :port] "8080")""")
     :see-also '(
          "config/env-var" "config/properties" "config/build") }

  property-var

  ([name path]
    (property-var name path nil))

  ([name path default-val]
    (when-let [value (core/system-prop name default-val)]
      (assoc-in {} path value))))


(defn
  ^{ :arglists '("(build & parts)")
     :doc """
          Merges given configuration parts and returns it as a map.

          Configuration parts:

            * JSON classpath resource file
            * JSON file
            * Environment variables
            * System properties

          *Example:*

          ```
          (do
            (load-module :config)

            (def cfg (config/build
                       (config/env "java")
                       (config/env-var "SERVER_PORT" [:http :port] "8080")))

            (println "home:" (-> cfg :11 :zulu :home))
            ; => home: /Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home

            (println "port:" (-> cfg :http :port)))
            ; => port: 8080
          ```
          """
     :examples '(
          """
          ;; -------------------------------------------------------------------
          ;; Example I) Configuration builder
          (do
            (load-module :config ['config :as 'cfg])

            (cfg/build
              (cfg/resource "config-defaults.json" :key-fn keyword)
              (cfg/file "./config-local.json" :key-fn keyword)
              (cfg/env-var "SERVER_PORT" [:http :port])
              (cfg/env-var "SERVER_THREADS" [:http :threads])
              (cfg/property-var "MASTER_PWD" [:app :master-pwd])))
          """,
          """
          ;; -------------------------------------------------------------------
          ;; Example II) Using configurations with the component module
          (do
            (load-module :config ['config :as 'cfg])
            (load-module :component ['component :as 'cmp])

            ;; define the server component
            (deftype :server []
               cmp/Component
                 (start [this]
                    (let [config (cmp/dep this :config)
                          port   (get-in config [:server :port])]
                      (println (cmp/id this) "started at port" port)
                      this))
                 (stop [this]
                    (println (cmp/id this) "stopped")
                    this))

            ;; note that the configuration is a plain vanilla Venice map and
            ;; does not implement the protocol 'Component'
            (defn create-system []
              (-> (cmp/system-map
                     "test"
                     :config (cfg/build
                               (cfg/env-var "SERVER_PORT" [:server :port] "8800"))
                     :server (server. ))
                  (cmp/system-using
                     {:server [:config]})))

            (-> (create-system)
                (cmp/start)
                (cmp/stop))

            nil)
          """)
     :see-also '(
          "config/file"     "config/resource"
          "config/env-var"  "config/property-var"
          "config/env"      "config/properties") }

  build [& parts]

  ; Filter nils out, (merge-deep {...} nil) -> nil
  (apply merge-deep {} (filter identity (coalesce parts '[]))))
